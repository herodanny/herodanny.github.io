<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[good blog]]></title>
    <url>%2Fgood-blog.html</url>
    <content type="text"><![CDATA[这是我碰到问题后，在互联网上找到的解答时，碰到的好博客，现记录下来：Hexo]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>test</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[my blog test]]></title>
    <url>%2Fmy-blog-test.html</url>
    <content type="text"><![CDATA[Anima Anima allows you to query database like SQL and Stream.a simple DSL syntax, supports multiple databases, integrates well with Java8,supports multiple relational mappings, and is a database manipulation tool. Document Feature Simple DSL H2、MySQL、SQLite、PostgreSQL、Oracle、SqlServer Paging support Flexible configuration Connection pool support Support LocalDate、LocalDateTime Support lambda expression Relationship (hasOne、hasMany、belongsTo) SQL performance statistics Based Java8 UsageLatest snapshot version If you want to prioritize new features or some BUG fixes you can use it, you need to specify the snapshot repository in pom.xml 12345678910111213141516&lt;repository&gt; &lt;id&gt;snapshots-repo&lt;/id&gt; &lt;url&gt;https://oss.sonatype.org/content/repositories/snapshots&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/snapshots&gt;&lt;/repository&gt;&lt;dependency&gt; &lt;groupId&gt;io.github.biezhi&lt;/groupId&gt; &lt;artifactId&gt;anima&lt;/artifactId&gt; &lt;version&gt;0.2.4-SNAPSHOT&lt;/version&gt;&lt;/dependency&gt; Here’s the RELEASE version. As Gradle 1compile 'io.github.biezhi:anima:0.2.3' As Maven 12345&lt;dependency&gt; &lt;groupId&gt;io.github.biezhi&lt;/groupId&gt; &lt;artifactId&gt;anima&lt;/artifactId&gt; &lt;version&gt;0.2.2&lt;/version&gt;&lt;/dependency&gt; 📒 Although Anima can also be used by adding a jar package, we do not recommend doing this. ExamplesOpen Connection 12345678910111213141516// MySQLAnima.open("jdbc:mysql://127.0.0.1:3306/demo", "root", "123456");// SQLiteAnima.open("jdbc:sqlite:./demo.db");// H2Anima.open("jdbc:h2:file:~/demo;FILE_LOCK=FS;PAGE_SIZE=1024;CACHE_SIZE=8192", "sa", "");// DataSourceDruidDataSource dataSource = new DruidDataSource();dataSource.setDriverClassName("com.mysql.jdbc.Driver");dataSource.setUrl(blade.environment().getOrNull("jdbc.url"));dataSource.setUsername(blade.environment().getOrNull("jdbc.username"));dataSource.setPassword(blade.environment().getOrNull("jdbc.password"));Anima.open(dataSource); 📕 This operation only needs one time 123456789101112131415public class User extends Model &#123; private Integer id; private String userName; private Integer age; public User() &#123; &#125; public User(String userName, Integer age) &#123; this.userName = userName; this.age = age; &#125; &#125; Table Structure 12345CREATE TABLE `users` ( `id` IDENTITY PRIMARY KEY, `user_name` varchar(50) NOT NULL, `age` int(11)) Query123456789101112131415161718192021long count = select().from(User.class).count();// SELECT COUNT(*) FROM userslong count = select().from(User.class).where("age &gt; ?", 15).isNotNull("user_name").count();// SELECT COUNT(*) FROM users WHERE age &gt; ? AND user_name IS NOT NULLUser user = select().from(User.class).byId(2);// SELECT * FROM users WHERE id = ?List&lt;User&gt; users = select().from(User.class).byIds(1, 2, 3);// SELECT * FROM users WHERE id IN (?, ?, ?)String name = select().bySQL(String.class, "select user_name from users limit 1").one();List&lt;String&gt; names = select().bySQL(String.class, "select user_name from users limit ?", 3);List&lt;User&gt; users = select().from(User.class).all();// SELECT * FROM usersList&lt;User&gt; users = select().from(User.class).like("user_name", "%o%").all();// SELECT * FROM users WHERE user_name LIKE ? Limit 12List&lt;User&gt; users = select().from(User.class).order("id desc").limit(5);// SELECT * FROM users ORDER BY id desc Paging 12Page&lt;User&gt; userPage = select().from(User.class).order("id desc").page(1, 3);// SELECT * FROM users ORDER BY id desc LIMIT ?, ? Map 1select().from(User.class).map(User::getUserName).limit(3).collect(Collectors.toList()); Filter 1select().from(User.class).filter(u -&gt; u.getAge() &gt; 10).collect(Collectors.toList()); Lambda 12User user = select().from(User.class).where(User::getUserName).eq("jack").one();// SELECT * FROM users WHERE user_name = ? 12345List&lt;User&gt; user = select().from(User.class) .where(User::getUserName).notNull() .and(User::getAge).gt(10) .all();// SELECT * FROM users WHERE user_name IS NOT NULL AND age &gt; ? 12select().from(User.class).order(User::getId, OrderBy.DESC).order(User::getAge, OrderBy.ASC).all();// SELECT * FROM users ORDER BY id DESC, age ASC Join 1234567891011121314151617181920@Table(name = "order_info")@Datapublic class OrderInfo extends Model &#123; private Long id; private Integer uid; @Column(name = "productname") private String productName; private LocalDateTime createTime; @Ignore private User user; @Ignore private Address address;&#125; 1234567891011121314151617181920212223242526272829// HasOneOrderInfo orderInfo = select().from(OrderInfo.class) .join( Joins.with(Address.class).as(OrderInfo::getAddress) .on(OrderInfo::getId, Address::getOrderId) ).byId(3);orderInfo = select().from(OrderInfo.class) .join( Joins.with(Address.class).as(OrderInfo::getAddress) .on(OrderInfo::getId, Address::getOrderId) ) .join( Joins.with(User.class).as(OrderInfo::getUser) .on(OrderInfo::getUid, User::getId) ).byId(3);// ManyToOneorderInfo = select().from(OrderInfo.class) .join( Joins.with(User.class).as(OrderInfo::getUser) .on(OrderInfo::getUid, User::getId) ).byId(3);// OneToManyUserDto userDto = select().from(UserDto.class).join( Joins.with(OrderInfo.class).as(UserDto::getOrders) .on(UserDto::getId, OrderInfo::getUid) ).byId(1); Insert12Integer id = new User("biezhi", 100).save().asInt();// INSERT INTO users(id,user_name,age) VALUES (?,?,?) or 1Anima.save(new User("jack", 100)); Batch Save 12345List&lt;User&gt; users = new ArrayList&lt;&gt;();users.add(new User("user1", 10));users.add(new User("user2", 11));users.add(new User("user3", 12));Anima.saveBatch(users); 📘 This operation will begin a transaction and rollback when there is a transaction that is unsuccessful. Update12int result = update().from(User.class).set("user_name", newName).where("id", 1).execute();// UPDATE users SET username = ? WHERE id = ? or 12int result = update().from(User.class).set("user_name", newName).where("id", 1).execute();// UPDATE users SET user_name = ? WHERE id = ? or 12345User user = new User();user.setId(1);user.setUserName("jack");user.update();// UPDATE users SET user_name = ? WHERE id = ? 1update().from(User.class).set(User::getUserName, "base64").updateById(2); 1update().from(User.class).set(User::getUserName, "base64").where(User::getId).eq(2).execute(); Delete12int result = delete().from(User.class).where("id", 1).execute();// DELETE FROM users WHERE id = ? or 12345User user = new User();user.setAge(15);user.setUserName("jack");user.delete();// DELETE FROM users WHERE user_name = ? and age = ? 123delete().from(User.class).where(User::getId).deleteById(3);delete().from(User.class).where(User::getId).eq(1).execute();delete().from(User.class).where(User::getAge).lte(20).execute(); Transaction1234Anima.atomic(() -&gt; &#123; int a = 1 / 0; new User("apple", 666).save();&#125;).catchException(e -&gt; Assert.assertEquals(ArithmeticException.class, e.getClass())); 📗 Anima uses the atomic method to complete a transaction. normally, the code will not throw an exception.when a RuntimeException is caught, the transaction will be rollback. Test CodeSee here LicenseApache2]]></content>
      <categories>
        <category>test</category>
        <category>tools</category>
      </categories>
      <tags>
        <tag>test</tag>
        <tag>markdown</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[my first blog article]]></title>
    <url>%2Fmy-first-blog-article.html</url>
    <content type="text"><![CDATA[摘要摘要测试文章。本文来自互联网。是关于markdown简明语法教程。现在让我们一起来学Markdown吧。 一级标题二级标题三级标题无序列表 我的技术小黑屋 不会写代码的菜鸟 我要返回火星了 有序列表 我们都是地球人 为啥你就不会 markdown? 看完还不会就要被安排 链接的写法我的技术小屋 带 Title我的技术小屋 图片 带 Title 引用方式  世界依旧很大,大到只能胡说。  面朝大海，春暖花开 从明天起，做一个幸福的人喂马、劈柴，周游世界从明天起，关心粮食和蔬菜我有一所房子，面朝大海，春暖花开从明天起，和每一个亲人通信告诉他们我的幸福那幸福的闪电告诉我的我将告诉每一个人给每一条河每一座山取一个温暖的名字陌生人，我也为你祝福愿你有一个灿烂的前程愿你有情人终成眷属愿你在尘世获得幸福我只愿面朝大海，春暖花开 粗体 粗体 看，我斜了没 真的很斜 粗体＋斜体 此处的故事只能用泪水掩盖 群里单身女生名单 姓名 年龄 三围 罗欲凤 18 18, 27, 30 秋刀鱼 26 28, 25, 33 窝不行 22 23, 28, 35 单行代码引用 123456789package mainimport "fmt"func main()&#123; fmt.Println("我的技术小屋");&#125; 分割线]]></content>
      <categories>
        <category>test</category>
        <category>tools</category>
      </categories>
      <tags>
        <tag>test</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
</search>
