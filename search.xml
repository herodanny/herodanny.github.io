<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[python-mageedu-notes1]]></title>
    <url>%2Fpython-mageedu-notes1.html</url>
    <content type="text"><![CDATA[第一章 - Python 基础入门及安装和基础语法操作系统准备准备Linux最小系统即可。 如果在虚拟机中克隆，MAC地址会变。 这里使用CentOS 6.5+ Pyenv 安装 安装git 1yum install git -y 安装Python编译依赖 1yum -y install gcc make patch gdbm-devel openssl-devel sqlite-devel readline-devel zlib-devel bzip2-devel 创建用户python 12useradd python passwd python 使用python用户登录后安装Pyenv 1curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash 下载的 pyenv-installer 是一个shell脚本。注意： 在 https://github.com/pyenv/pyenv-installer 有安装文档 如果curl出现 curl: (35) SSL connect error ，是nss版本低的问题，更新它。 可能需要配置一个有较新包的yum源 [updates] name=CentOS-Updates baseurl=https://mirrors.aliyun.com/centos/6.9/os/x86_64 gpgcheck=0 然后更新nss1yum update nss 在python用户的~/.bash_profile中追加 1234export PATH="/home/python/.pyenv/bin:$PATH" eval "$(pyenv init -)" eval "$(pyenv virtualenv-init -)" source ~/.bash_profile 这样当用户启动的时候，会执行用户的 .bash_profile 中的脚本，就会启动pyenv。 安装好的pyenv 就在~/.pyenv中 Pyenv 使用python 版本及path路径123python --version python -V echo $PATH 可以看到当前系统Python路径 pyenv 命令12pyenvpyenv help install 列出所有可用版本1pyenv install --list 安装指定版本12pyenv install 3.5.3 -v # 加 -v 可以看详细过程 verbosepyenv versions 会从python官网下载安装压缩包到 /tmp 目录，很慢，为了提速，可选用cache方法。 使用缓存方式安装在~/.pyenv目录下，新建cache目录，放入下载好的待安装版本的文件。 不确定要哪一个文件，把下载的3个文件都放进去。一般放 ‘tar.xz’ 包。1$ scp ~/Downloads/Python-3.5.3.tar.xz root@10.211.55.6:~/.pyenv/cache 1pyenv install 3.5.3 -v 安装后的python文件夹在 .pyenv/versions 下。cache文件夹里有下载的压缩包。 pyenv 的 python版本控制version 显示当前的python版本 versions 显示所有可用的python版本，和当前版本。12pyenv versionpyenv versions global 全局设置pyenv global 3.5.3 可以看到所有受pyenv控制的窗口中都是3.5.3的python版本了。 这里用global是作用于非root用户python用户上，如果是root用户安装，请不要使用global，否则影响太大。比如，这里使用的CentOS6.5就是Python2.6，使用了global就成了3.x，会带来很不好的影响。 pyenv global system 回到原来系统版本。 shell 会话设置影响只作用于当前会话 pyenv shell 3.5.3是会话级的，一旦断开sessionid也变了，也不好用。 local 本地设置使用pyenv local设置从当前工作目录开始向下递归都继承这个设置。123pyenv local 3.5.3python -V# 可能还是显示原来的版本，用pyenv version，要用虚拟环境python -V 才会显示 也可以使用 anaconda，pyenv 是自己下源码编，某些情况下可能不如 anaconda 直接编好的二进制分发。 Virtualenv 虚拟环境设置为什么要使用虚拟环境？ 因为刚才使用的Python环境都是一个公共的空间，如果多个项目使用不同Python版本开发，或者使用不同的Python版本部署运行，或者使用同样的版本开发的但不同项目使用了不同版本的库，等等这些问题都会带来冲突。最好的解决办法就是每一个项目独立运行自己的“独立小环境”中。 使用插件，在plugins/pyenv-virtualenv中pyenv virtualenv 3.5.3 mag353使用python3.5.3版本创建出一个独立的虚拟空间 mag353。 12345$ pyenv versions* system (set by /home/python/.pyenv/version)3.5.33.5.3/envs/mag353mag353 可以在版本列表中存在，就和3.5.3是一样的，就是一个版本了。以后只要使用这个虚拟版本，包就会按照到这些对应的目录下去，而不是使用3.5.3。可以看到真实的虚拟环境是下 envs/ 目录下。.pyenv/versions/ 下是软链接。 在需要设置python版本的文件夹路径下12pyenv local mag353pyenv versions 怎么会起作用的，是利用了一堆隐藏文件和在 .bash_profile 中添加的那几指令。 现在可以对python进行版本的管理，包的管理。 pip 通用配置pip 是Python的包管理工具，3.x的版本直接带了，可以直接使用。 和yun一样为了使用国内镜像，如下配置。mkdir ~/.pip配置文件在 ~/.pip/pip.conf 123[global]index-url=https://mirrors.aliyun.com/pypi/simple/trusted-host=mirrors.aliyun.com 安装 ipythonipython 是增强的交互式 Python 命令行工具12pip install ipython ipython 安装 JupyterJupyter 是基于WEB的交互式笔记本，其中可以非常方便的使用Python。安装Jupyter，也会安装ipython的。 12345pip install jupyterjupyter notebook helpjupyter notebook passwd # 设置下浏览器访问时的密码jupyter notebook --ip=0.0.0.0 --no-browserss -tanl 浏览器不能访问是服务器端防火墙问题。 快捷键：shift + enter(运行)、ctrl + enter(运行)、dd(删除一行)、m(用mardkown) 导出包虚拟环境的好处就在于和其他项目运行环境隔离。每一个独立的环境都可以使用pip命令导出已经安装的包，在另一个环境中安装这些包。 123456789(mag353) [python@node web]$ pip freeze &gt; requirement(mag353) [python@node web]$ mkdir ~/magedu/projects/pro1(mag353) [python@node web]$ cd ~/magedu/projects/pro1[python@node pro1]$ pyenv install --list[python@node pro1]$ pyenv install 3.6.4[python@node pro1]$ pyenv virtualenv 3.6.4 mag364[python@node pro1]$ pyenv local mag364(mag364) [python@node pro1]$ mv ../web/requirement ./(mag364) [python@node pro1]$ pip install -r requirement]]></content>
      <categories>
        <category>python-mageedu</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用VsCode写Markdown]]></title>
    <url>%2Fvscodewritemarkdown.html</url>
    <content type="text"><![CDATA[Markdown 基本语法段落非常自然，一行文字就是一个段落。 比如： 这是一个段落 会被解释成： 1&lt;p&gt;这是一个段落。&lt;/p&gt; 如果你需要另起一段，请在两个段落之间隔一个空行。 这是一个段落。 这是另一个段落。 会被解释成 123&lt;p&gt;这是一个段落&lt;/p&gt;&lt;p&gt;这是另一个段落&lt;/p&gt; 不隔一个空行的换行行为，在一些编辑器中被解释为换行，即插入一个标签。对与另外一些编辑器，会被解释为插入一个空格。对于后者，若要插入换行标签，请在当前一行的结尾打两个空格。(vscode 就是后者，typora 普通模式是前者，源码模式和 vscode 一样是后者) 没用空一行，在结尾打两个空格的换行，还在一个段落中。 粗体、斜体可以使用星号*或下划线_指定粗体或者斜体。 *这是斜体* _这也是斜体_ **这是粗体** ***这是粗体+斜体*** 会被解释成 1234&lt;em&gt;这是斜体&lt;/em&gt;&lt;em&gt;这也是斜体&lt;/em&gt;&lt;strong&gt;这是粗体&lt;/strong&gt;&lt;strong&gt;&lt;em&gt;这是粗体+斜体&lt;/strong&gt;&lt;/em&gt; 删除线一部分编辑器支持删除线，它不是经典 markdown 中的要素。用波浪线~定义删除线。 ~~就像这样~~ 会被解释成 1&lt;strike&gt;就像这样&lt;/strike&gt; 标题markdown 总支持 1~6 六级标题，通过在一行之前加上不同数量的井号来表示。 # 这是 H1 # ## 这是 H2 ## ### 这是 H3 ### ... ###### 这是 H6 ###### 行尾可以加上任意数量的井号字符，这些字符不会算作标题内容。通常会加上相等数量的字符以保持对称。 此外，H1 和 H2 也可以采用在文本下方添加底线来实现，比如： 这是 H1 ======= 这是 H2 ------- 引用通过在行首加上大于号&gt;来添加引用格式。 &gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. &gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse id sem consectetuer libero luctus adipiscing. This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus. Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisseid sem consectetuer libero luctus adipiscing. 引用可以嵌套： &gt; This is the first level of quoting. &gt; &gt; &gt; This is nested blockquote. &gt; &gt; Back to the first level. This is the first level of quoting. This is nested blockquote. Back to the first level. 也可以嵌套其他格式： &gt; ## 这是一个标题。 &gt; &gt; 1. 这是第一行列表项。 &gt; 2. 这是第二行列表项。 &gt; &gt; 给出一些例子代码： &gt; &gt; return shell_exec(&quot;echo $input | $markdown_script&quot;); 这是一个标题。 这是第一行列表项。 这是第二行列表项。 给出一些例子代码： return shell_exec(&quot;echo $input | $markdown_script&quot;); 列表无序列表使用星号、加号或是减号作为列表标记： * Red * Green * Blue Red Green Blue 等同于 + Red + Green + Blue 和 - Red - Green - Blue 有序列表则使用数字接着一个英文句点： 1. Bird 2. McHale 3. Parish Bird McHale Parish 内敛代码用反引号 ` 来标记内联代码，它们会解释成 &lt;code&gt; 标签。如果代码的内容中有反引号，请用两个反引号包裹。 代码区域有两种方式标记代码区域，原生风格是行首缩进四个空格。 这是一个普通段落： 这是一个代码区块。 会被解释成 &lt;p&gt;这是一个普通段落：&lt;/p&gt; &lt;pre&gt;&lt;code&gt;这是一个代码区块。 &lt;/code&gt;&lt;/pre&gt; 分隔线你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线： 12345* * *********- - ---------------------------------------- 链接[an example](http://example.com/) [an example](http://example.com/ &quot;Optional Title&quot;) 会被解释为 &lt;a href=&apos;http://example.com/&apos;&gt;an example&lt;/a&gt; &lt;a href=&apos;http://example.com/&apos; title=&quot;Optional Title&quot;&gt;an example&lt;/a&gt; 除了上面的行内式，也可以使用参考式： [an example][id] 然后在任意空白位置定义： [id]: http://example.com/ &quot;Optional Title&quot; 图像![Alt text](/path/to/img.jpg) ![Alt text](/path/to/img.jpg &quot;Optional Title&quot;) 会被解释为 &lt;img src=&apos;/path/to/img.jpg&apos; alt=&apos;Alt text&apos; /&gt; &lt;img src=&apos;/path/to/img.jpg&apos; alt=&apos;Alt text&apos; title=&apos;Optional Title&apos; /&gt; 同样，图像也有类似的参考式语法。 自动链接如果链接的地址和名字重复，可以用尖括号语法将其简化。 &lt;http://example.com/&gt; 就相当于 [http://example.com/](http://example.com/) 切记，大多数编辑器都会自动将符合url规则的东西视为链接，并且解释成链接。很多时候作者由于疏忽等缘故，链接和后面的中文之间缺少空格，导致链接不正常。所以我建议，链接要么加上尖括号，要么两端加上空格。 转义markdown支持在以下字符前面插入反斜杠 \ 反斜线 ` 反引号 * 星号 _ 底线 {} 花括号 [] 方括号 () 括弧 # 井字号 + 加号 - 减号 . 英文句点 ! 惊叹号 表格| Item | Value | Qty | | :------- | ----: | :---: | | Computer | $1600 | 5 | | Phone | $12 | 12 | | Pipe | $1 | 234 | 会被解释成 123456789101112131415161718192021222324&lt;table&gt;&lt;thead&gt;&lt;tr&gt; &lt;th align="left"&gt;Item&lt;/th&gt; &lt;th align="right"&gt;Value&lt;/th&gt; &lt;th align="center"&gt;Qty&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt; &lt;td align="left"&gt;Computer&lt;/td&gt; &lt;td align="right"&gt;$1600&lt;/td&gt; &lt;td align="center"&gt;5&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt; &lt;td align="left"&gt;Phone&lt;/td&gt; &lt;td align="right"&gt;$12&lt;/td&gt; &lt;td align="center"&gt;12&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt; &lt;td align="left"&gt;Pipe&lt;/td&gt; &lt;td align="right"&gt;$1&lt;/td&gt; &lt;td align="center"&gt;234&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; 要注意第二行的冒号决定了居左居右还是居中，如果你不加冒号，默认是居左的。 另外可以把第一行去掉，做成没有表头的表格，但第二行始终是要有的。 内联 HTMLmarkdown 的语法简洁，但有其局限性，所以特意保留了内联html这种方式。任何html标签及其内容，都会原样输出到结果中。也就是说，标签中的星号等作为markdown结构的符号，以及构成html标签和实体的符号，都不会做任何转义。 vscode markdown 扩展Markdown All in OneMarkdown Shortcuts]]></content>
      <categories>
        <category>before-development</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[my blog test]]></title>
    <url>%2Fmy-blog-test.html</url>
    <content type="text"><![CDATA[Anima Anima allows you to query database like SQL and Stream.a simple DSL syntax, supports multiple databases, integrates well with Java8,supports multiple relational mappings, and is a database manipulation tool. Document Feature Simple DSL H2、MySQL、SQLite、PostgreSQL、Oracle、SqlServer Paging support Flexible configuration Connection pool support Support LocalDate、LocalDateTime Support lambda expression Relationship (hasOne、hasMany、belongsTo) SQL performance statistics Based Java8 UsageLatest snapshot version If you want to prioritize new features or some BUG fixes you can use it, you need to specify the snapshot repository in pom.xml 12345678910111213141516&lt;repository&gt; &lt;id&gt;snapshots-repo&lt;/id&gt; &lt;url&gt;https://oss.sonatype.org/content/repositories/snapshots&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;false&lt;/enabled&gt; &lt;/releases&gt; &lt;snapshots&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/snapshots&gt;&lt;/repository&gt;&lt;dependency&gt; &lt;groupId&gt;io.github.biezhi&lt;/groupId&gt; &lt;artifactId&gt;anima&lt;/artifactId&gt; &lt;version&gt;0.2.4-SNAPSHOT&lt;/version&gt;&lt;/dependency&gt; Here’s the RELEASE version. As Gradle 1compile 'io.github.biezhi:anima:0.2.3' As Maven 12345&lt;dependency&gt; &lt;groupId&gt;io.github.biezhi&lt;/groupId&gt; &lt;artifactId&gt;anima&lt;/artifactId&gt; &lt;version&gt;0.2.2&lt;/version&gt;&lt;/dependency&gt; 📒 Although Anima can also be used by adding a jar package, we do not recommend doing this. ExamplesOpen Connection 12345678910111213141516// MySQLAnima.open("jdbc:mysql://127.0.0.1:3306/demo", "root", "123456");// SQLiteAnima.open("jdbc:sqlite:./demo.db");// H2Anima.open("jdbc:h2:file:~/demo;FILE_LOCK=FS;PAGE_SIZE=1024;CACHE_SIZE=8192", "sa", "");// DataSourceDruidDataSource dataSource = new DruidDataSource();dataSource.setDriverClassName("com.mysql.jdbc.Driver");dataSource.setUrl(blade.environment().getOrNull("jdbc.url"));dataSource.setUsername(blade.environment().getOrNull("jdbc.username"));dataSource.setPassword(blade.environment().getOrNull("jdbc.password"));Anima.open(dataSource); 📕 This operation only needs one time 123456789101112131415public class User extends Model &#123; private Integer id; private String userName; private Integer age; public User() &#123; &#125; public User(String userName, Integer age) &#123; this.userName = userName; this.age = age; &#125; &#125; Table Structure 12345CREATE TABLE `users` ( `id` IDENTITY PRIMARY KEY, `user_name` varchar(50) NOT NULL, `age` int(11)) Query123456789101112131415161718192021long count = select().from(User.class).count();// SELECT COUNT(*) FROM userslong count = select().from(User.class).where("age &gt; ?", 15).isNotNull("user_name").count();// SELECT COUNT(*) FROM users WHERE age &gt; ? AND user_name IS NOT NULLUser user = select().from(User.class).byId(2);// SELECT * FROM users WHERE id = ?List&lt;User&gt; users = select().from(User.class).byIds(1, 2, 3);// SELECT * FROM users WHERE id IN (?, ?, ?)String name = select().bySQL(String.class, "select user_name from users limit 1").one();List&lt;String&gt; names = select().bySQL(String.class, "select user_name from users limit ?", 3);List&lt;User&gt; users = select().from(User.class).all();// SELECT * FROM usersList&lt;User&gt; users = select().from(User.class).like("user_name", "%o%").all();// SELECT * FROM users WHERE user_name LIKE ? Limit 12List&lt;User&gt; users = select().from(User.class).order("id desc").limit(5);// SELECT * FROM users ORDER BY id desc Paging 12Page&lt;User&gt; userPage = select().from(User.class).order("id desc").page(1, 3);// SELECT * FROM users ORDER BY id desc LIMIT ?, ? Map 1select().from(User.class).map(User::getUserName).limit(3).collect(Collectors.toList()); Filter 1select().from(User.class).filter(u -&gt; u.getAge() &gt; 10).collect(Collectors.toList()); Lambda 12User user = select().from(User.class).where(User::getUserName).eq("jack").one();// SELECT * FROM users WHERE user_name = ? 12345List&lt;User&gt; user = select().from(User.class) .where(User::getUserName).notNull() .and(User::getAge).gt(10) .all();// SELECT * FROM users WHERE user_name IS NOT NULL AND age &gt; ? 12select().from(User.class).order(User::getId, OrderBy.DESC).order(User::getAge, OrderBy.ASC).all();// SELECT * FROM users ORDER BY id DESC, age ASC Join 1234567891011121314151617181920@Table(name = "order_info")@Datapublic class OrderInfo extends Model &#123; private Long id; private Integer uid; @Column(name = "productname") private String productName; private LocalDateTime createTime; @Ignore private User user; @Ignore private Address address;&#125; 1234567891011121314151617181920212223242526272829// HasOneOrderInfo orderInfo = select().from(OrderInfo.class) .join( Joins.with(Address.class).as(OrderInfo::getAddress) .on(OrderInfo::getId, Address::getOrderId) ).byId(3);orderInfo = select().from(OrderInfo.class) .join( Joins.with(Address.class).as(OrderInfo::getAddress) .on(OrderInfo::getId, Address::getOrderId) ) .join( Joins.with(User.class).as(OrderInfo::getUser) .on(OrderInfo::getUid, User::getId) ).byId(3);// ManyToOneorderInfo = select().from(OrderInfo.class) .join( Joins.with(User.class).as(OrderInfo::getUser) .on(OrderInfo::getUid, User::getId) ).byId(3);// OneToManyUserDto userDto = select().from(UserDto.class).join( Joins.with(OrderInfo.class).as(UserDto::getOrders) .on(UserDto::getId, OrderInfo::getUid) ).byId(1); Insert12Integer id = new User("biezhi", 100).save().asInt();// INSERT INTO users(id,user_name,age) VALUES (?,?,?) or 1Anima.save(new User("jack", 100)); Batch Save 12345List&lt;User&gt; users = new ArrayList&lt;&gt;();users.add(new User("user1", 10));users.add(new User("user2", 11));users.add(new User("user3", 12));Anima.saveBatch(users); 📘 This operation will begin a transaction and rollback when there is a transaction that is unsuccessful. Update12int result = update().from(User.class).set("user_name", newName).where("id", 1).execute();// UPDATE users SET username = ? WHERE id = ? or 12int result = update().from(User.class).set("user_name", newName).where("id", 1).execute();// UPDATE users SET user_name = ? WHERE id = ? or 12345User user = new User();user.setId(1);user.setUserName("jack");user.update();// UPDATE users SET user_name = ? WHERE id = ? 1update().from(User.class).set(User::getUserName, "base64").updateById(2); 1update().from(User.class).set(User::getUserName, "base64").where(User::getId).eq(2).execute(); Delete12int result = delete().from(User.class).where("id", 1).execute();// DELETE FROM users WHERE id = ? or 12345User user = new User();user.setAge(15);user.setUserName("jack");user.delete();// DELETE FROM users WHERE user_name = ? and age = ? 123delete().from(User.class).where(User::getId).deleteById(3);delete().from(User.class).where(User::getId).eq(1).execute();delete().from(User.class).where(User::getAge).lte(20).execute(); Transaction1234Anima.atomic(() -&gt; &#123; int a = 1 / 0; new User("apple", 666).save();&#125;).catchException(e -&gt; Assert.assertEquals(ArithmeticException.class, e.getClass())); 📗 Anima uses the atomic method to complete a transaction. normally, the code will not throw an exception.when a RuntimeException is caught, the transaction will be rollback. Test CodeSee here LicenseApache2]]></content>
      <categories>
        <category>test</category>
        <category>tools</category>
      </categories>
      <tags>
        <tag>test</tag>
        <tag>java</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[my first blog article]]></title>
    <url>%2Fmy-first-blog-article.html</url>
    <content type="text"><![CDATA[一级标题二级标题三级标题无序列表 我的技术小黑屋 不会写代码的菜鸟 我要返回火星了 有序列表 我们都是地球人 为啥你就不会 markdown? 看完还不会就要被安排 链接的写法我的技术小屋 带 Title我的技术小屋 图片 带 Title 引用方式  世界依旧很大,大到只能胡说。  面朝大海，春暖花开 从明天起，做一个幸福的人喂马、劈柴，周游世界从明天起，关心粮食和蔬菜我有一所房子，面朝大海，春暖花开从明天起，和每一个亲人通信告诉他们我的幸福那幸福的闪电告诉我的我将告诉每一个人给每一条河每一座山取一个温暖的名字陌生人，我也为你祝福愿你有一个灿烂的前程愿你有情人终成眷属愿你在尘世获得幸福我只愿面朝大海，春暖花开 粗体 粗体 看，我斜了没 真的很斜 粗体＋斜体 此处的故事只能用泪水掩盖 群里单身女生名单 姓名 年龄 三围 罗欲凤 18 18, 27, 30 秋刀鱼 26 28, 25, 33 窝不行 22 23, 28, 35 单行代码引用 123456789package mainimport "fmt"func main()&#123; fmt.Println("我的技术小屋");&#125; 分割线]]></content>
      <categories>
        <category>test</category>
        <category>tools</category>
      </categories>
      <tags>
        <tag>test</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
</search>
