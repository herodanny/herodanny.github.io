<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>从菜鸟到老鸟</title>
  
  <subtitle>From Zero To Hero</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://herodanny.github.io/"/>
  <updated>2019-04-15T09:04:14.086Z</updated>
  <id>https://herodanny.github.io/</id>
  
  <author>
    <name>herodanny</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>good blog</title>
    <link href="https://herodanny.github.io/good-blog.html"/>
    <id>https://herodanny.github.io/good-blog.html</id>
    <published>2019-04-15T08:57:44.000Z</published>
    <updated>2019-04-15T09:04:14.086Z</updated>
    
    <content type="html"><![CDATA[<h3 id="这是我碰到问题后，在互联网上找到的解答时，碰到的好博客，现记录下来："><a href="#这是我碰到问题后，在互联网上找到的解答时，碰到的好博客，现记录下来：" class="headerlink" title="这是我碰到问题后，在互联网上找到的解答时，碰到的好博客，现记录下来："></a>这是我碰到问题后，在互联网上找到的解答时，碰到的好博客，现记录下来：</h3><h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;这是我碰到问题后，在互联网上找到的解答时，碰到的好博客，现记录下来：&quot;&gt;&lt;a href=&quot;#这是我碰到问题后，在互联网上找到的解答时，碰到的好博客，现记录下来：&quot; class=&quot;headerlink&quot; title=&quot;这是我碰到问题后，在互联网上找到的解答时，碰到的
      
    
    </summary>
    
      <category term="tools" scheme="https://herodanny.github.io/categories/tools/"/>
    
    
      <category term="test" scheme="https://herodanny.github.io/tags/test/"/>
    
      <category term="blog" scheme="https://herodanny.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>my blog test</title>
    <link href="https://herodanny.github.io/my-blog-test.html"/>
    <id>https://herodanny.github.io/my-blog-test.html</id>
    <published>2019-04-13T03:59:37.000Z</published>
    <updated>2019-04-15T08:59:10.871Z</updated>
    
    <content type="html"><![CDATA[<p>测试文章。本文来自互联网。关于常用的markdown文档中常用语法的写法。  </p><a id="more"></a><h1 id="Anima"><a href="#Anima" class="headerlink" title="Anima"></a>Anima</h1><!--<p align="center">    <a href="https://github.com/biezhi/anima/wiki"><img src="screenshot/cover.png" width="623"/></a></p>--><p><code>Anima</code> allows you to query database like <code>SQL</code> and <code>Stream</code>.<br>a simple DSL syntax, supports multiple databases, integrates well with Java8,<br>supports multiple relational mappings, and is a database manipulation tool.</p><p><strong><a href="https://github.com/biezhi/anima/wiki" target="_blank" rel="noopener">Document</a></strong></p><p><a href="https://travis-ci.org/biezhi/anima" target="_blank" rel="noopener"><img src="https://travis-ci.org/biezhi/anima.svg?branch=master" alt="Travis Build"></a><br><a href="https://mvnrepository.com/artifact/io.github.biezhi/anima" target="_blank" rel="noopener"><img src="https://img.shields.io/maven-central/v/io.github.biezhi/anima.svg" alt></a></p><!--more--><h2 id="Feature"><a href="#Feature" class="headerlink" title="Feature"></a>Feature</h2><ul><li>Simple DSL </li><li>H2、MySQL、SQLite、PostgreSQL、Oracle、SqlServer </li><li>Paging support </li><li>Flexible configuration </li><li>Connection pool support</li><li>Support <code>LocalDate</code>、<code>LocalDateTime</code></li><li>Support lambda expression</li><li>Relationship (<code>hasOne</code>、<code>hasMany</code>、<code>belongsTo</code>)</li><li>SQL performance statistics</li><li>Based Java8</li></ul><h1 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h1><p><strong>Latest snapshot version</strong></p><blockquote><p>If you want to prioritize new features or some BUG fixes you can use it, you need to specify the snapshot repository in <code>pom.xml</code></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>snapshots-repo<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://oss.sonatype.org/content/repositories/snapshots<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.biezhi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>anima<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.4-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Here’s the <code>RELEASE</code> version.</p><p><strong>As Gradle</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">'io.github.biezhi:anima:0.2.3'</span></span><br></pre></td></tr></table></figure><p><strong>As Maven</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.biezhi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>anima<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>📒 Although <code>Anima</code> can also be used by adding a jar package, we do not recommend doing this.</p></blockquote><h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><p><strong>Open Connection</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MySQL</span></span><br><span class="line">Anima.open(<span class="string">"jdbc:mysql://127.0.0.1:3306/demo"</span>, <span class="string">"root"</span>, <span class="string">"123456"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// SQLite</span></span><br><span class="line">Anima.open(<span class="string">"jdbc:sqlite:./demo.db"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// H2</span></span><br><span class="line">Anima.open(<span class="string">"jdbc:h2:file:~/demo;FILE_LOCK=FS;PAGE_SIZE=1024;CACHE_SIZE=8192"</span>, <span class="string">"sa"</span>, <span class="string">""</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// DataSource</span></span><br><span class="line">DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">dataSource.setDriverClassName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">dataSource.setUrl(blade.environment().getOrNull(<span class="string">"jdbc.url"</span>));</span><br><span class="line">dataSource.setUsername(blade.environment().getOrNull(<span class="string">"jdbc.username"</span>));</span><br><span class="line">dataSource.setPassword(blade.environment().getOrNull(<span class="string">"jdbc.password"</span>));</span><br><span class="line">Anima.open(dataSource);</span><br></pre></td></tr></table></figure><blockquote><p>📕 This operation only needs one time</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String  userName;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String userName, Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Table Structure</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`users`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="keyword">IDENTITY</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  <span class="string">`user_name`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`age`</span> <span class="built_in">int</span>(<span class="number">11</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> count = select().from(User.class).count();</span><br><span class="line"><span class="comment">// SELECT COUNT(*) FROM users</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> count = select().from(User.class).where(<span class="string">"age &gt; ?"</span>, <span class="number">15</span>).isNotNull(<span class="string">"user_name"</span>).count();</span><br><span class="line"><span class="comment">// SELECT COUNT(*) FROM users WHERE age &gt; ? AND user_name IS NOT NULL</span></span><br><span class="line"></span><br><span class="line">User user = select().from(User.class).byId(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE id = ?</span></span><br><span class="line"></span><br><span class="line">List&lt;User&gt; users = select().from(User.class).byIds(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE id IN (?, ?, ?)</span></span><br><span class="line"></span><br><span class="line">String name = select().bySQL(String.class, <span class="string">"select user_name from users limit 1"</span>).one();</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; names = select().bySQL(String.class, <span class="string">"select user_name from users limit ?"</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">List&lt;User&gt; users = select().from(User.class).all();</span><br><span class="line"><span class="comment">// SELECT * FROM users</span></span><br><span class="line"></span><br><span class="line">List&lt;User&gt; users = select().from(User.class).like(<span class="string">"user_name"</span>, <span class="string">"%o%"</span>).all();</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE user_name LIKE ?</span></span><br></pre></td></tr></table></figure><p><strong>Limit</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; users = select().from(User.class).order(<span class="string">"id desc"</span>).limit(<span class="number">5</span>);</span><br><span class="line"><span class="comment">// SELECT * FROM users ORDER BY id desc</span></span><br></pre></td></tr></table></figure><p><strong>Paging</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Page&lt;User&gt; userPage = select().from(User.class).order(<span class="string">"id desc"</span>).page(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">// SELECT * FROM users ORDER BY id desc LIMIT ?, ?</span></span><br></pre></td></tr></table></figure><p><strong>Map</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select().from(User.class).map(User::getUserName).limit(<span class="number">3</span>).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><p><strong>Filter</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select().from(User.class).filter(u -&gt; u.getAge() &gt; <span class="number">10</span>).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><p><strong>Lambda</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User user = select().from(User.class).where(User::getUserName).eq(<span class="string">"jack"</span>).one();</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE user_name = ?</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; user = select().from(User.class)</span><br><span class="line">                .where(User::getUserName).notNull()</span><br><span class="line">                .and(User::getAge).gt(<span class="number">10</span>)</span><br><span class="line">                .all();</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE user_name IS NOT NULL AND age &gt; ?</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select().from(User.class).order(User::getId, OrderBy.DESC).order(User::getAge, OrderBy.ASC).all();</span><br><span class="line"><span class="comment">// SELECT * FROM users ORDER BY  id DESC, age ASC</span></span><br></pre></td></tr></table></figure><p><strong>Join</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Table</span>(name = <span class="string">"order_info"</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderInfo</span> <span class="keyword">extends</span> <span class="title">Model</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"productname"</span>)</span><br><span class="line">    <span class="keyword">private</span> String productName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Ignore</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Ignore</span></span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HasOne</span></span><br><span class="line">OrderInfo orderInfo = select().from(OrderInfo.class)</span><br><span class="line">        .join(</span><br><span class="line">            Joins.with(Address.class).as(OrderInfo::getAddress)</span><br><span class="line">                 .on(OrderInfo::getId, Address::getOrderId)</span><br><span class="line">        ).byId(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">orderInfo = select().from(OrderInfo.class)</span><br><span class="line">        .join(</span><br><span class="line">            Joins.with(Address.class).as(OrderInfo::getAddress)</span><br><span class="line">                 .on(OrderInfo::getId, Address::getOrderId)</span><br><span class="line">        )</span><br><span class="line">        .join(</span><br><span class="line">                Joins.with(User.class).as(OrderInfo::getUser)</span><br><span class="line">                        .on(OrderInfo::getUid, User::getId)</span><br><span class="line">        ).byId(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ManyToOne</span></span><br><span class="line">orderInfo = select().from(OrderInfo.class)</span><br><span class="line">        .join(</span><br><span class="line">            Joins.with(User.class).as(OrderInfo::getUser)</span><br><span class="line">                 .on(OrderInfo::getUid, User::getId)</span><br><span class="line">        ).byId(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// OneToMany</span></span><br><span class="line">UserDto userDto = select().from(UserDto.class).join(</span><br><span class="line">            Joins.with(OrderInfo.class).as(UserDto::getOrders)</span><br><span class="line">                 .on(UserDto::getId, OrderInfo::getUid)</span><br><span class="line">        ).byId(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><h3 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a>Insert</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer id = <span class="keyword">new</span> User(<span class="string">"biezhi"</span>, <span class="number">100</span>).save().asInt();</span><br><span class="line"><span class="comment">// INSERT INTO users(id,user_name,age) VALUES (?,?,?)</span></span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Anima.save(<span class="keyword">new</span> User(<span class="string">"jack"</span>, <span class="number">100</span>));</span><br></pre></td></tr></table></figure><p><strong>Batch Save</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">users.add(<span class="keyword">new</span> User(<span class="string">"user1"</span>, <span class="number">10</span>));</span><br><span class="line">users.add(<span class="keyword">new</span> User(<span class="string">"user2"</span>, <span class="number">11</span>));</span><br><span class="line">users.add(<span class="keyword">new</span> User(<span class="string">"user3"</span>, <span class="number">12</span>));</span><br><span class="line">Anima.saveBatch(users);</span><br></pre></td></tr></table></figure><blockquote><p>📘 This operation will begin a transaction and rollback when there is a transaction that is unsuccessful.</p></blockquote><h3 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> result  = update().from(User.class).set(<span class="string">"user_name"</span>, newName).where(<span class="string">"id"</span>, <span class="number">1</span>).execute();</span><br><span class="line"><span class="comment">// UPDATE users SET username = ? WHERE id = ?</span></span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> result = update().from(User.class).set(<span class="string">"user_name"</span>, newName).where(<span class="string">"id"</span>, <span class="number">1</span>).execute();</span><br><span class="line"><span class="comment">// UPDATE users SET user_name = ? WHERE id = ?</span></span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setId(<span class="number">1</span>);</span><br><span class="line">user.setUserName(<span class="string">"jack"</span>);</span><br><span class="line">user.update();</span><br><span class="line"><span class="comment">// UPDATE users SET user_name = ? WHERE id = ?</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update().from(User.class).set(User::getUserName, <span class="string">"base64"</span>).updateById(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update().from(User.class).set(User::getUserName, <span class="string">"base64"</span>).where(User::getId).eq(<span class="number">2</span>).execute();</span><br></pre></td></tr></table></figure><h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> result = delete().from(User.class).where(<span class="string">"id"</span>, <span class="number">1</span>).execute();</span><br><span class="line"><span class="comment">// DELETE FROM users WHERE id = ?</span></span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setAge(<span class="number">15</span>);</span><br><span class="line">user.setUserName(<span class="string">"jack"</span>);</span><br><span class="line">user.delete();</span><br><span class="line"><span class="comment">// DELETE FROM users WHERE user_name = ? and age = ?</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">delete().from(User.class).where(User::getId).deleteById(<span class="number">3</span>);</span><br><span class="line">delete().from(User.class).where(User::getId).eq(<span class="number">1</span>).execute();</span><br><span class="line">delete().from(User.class).where(User::getAge).lte(<span class="number">20</span>).execute();</span><br></pre></td></tr></table></figure><h3 id="Transaction"><a href="#Transaction" class="headerlink" title="Transaction"></a>Transaction</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Anima.atomic(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">new</span> User(<span class="string">"apple"</span>, <span class="number">666</span>).save();</span><br><span class="line">&#125;).catchException(e -&gt; Assert.assertEquals(ArithmeticException.class, e.getClass()));</span><br></pre></td></tr></table></figure><blockquote><p>📗 <code>Anima</code> uses the <code>atomic</code> method to complete a transaction. normally, the code will not throw an exception.<br>when a <code>RuntimeException</code> is caught, the transaction will be <code>rollback</code>.</p></blockquote><h2 id="Test-Code"><a href="#Test-Code" class="headerlink" title="Test Code"></a>Test Code</h2><p>See <a href="https://github.com/biezhi/anima/tree/master/src/test/java/io/github/biezhi/anima" target="_blank" rel="noopener">here</a></p><h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>Apache2</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;测试文章。本文来自互联网。关于常用的markdown文档中常用语法的写法。  &lt;/p&gt;
    
    </summary>
    
      <category term="tools" scheme="https://herodanny.github.io/categories/tools/"/>
    
      <category term="test" scheme="https://herodanny.github.io/categories/test/"/>
    
    
      <category term="test" scheme="https://herodanny.github.io/tags/test/"/>
    
      <category term="markdown" scheme="https://herodanny.github.io/tags/markdown/"/>
    
      <category term="java" scheme="https://herodanny.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>my first blog article</title>
    <link href="https://herodanny.github.io/my-first-blog-article.html"/>
    <id>https://herodanny.github.io/my-first-blog-article.html</id>
    <published>2019-04-08T13:14:14.000Z</published>
    <updated>2019-04-15T08:59:24.564Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/04/15/5cb44607518ec.jpeg" alt="timg.jpeg">  </p><p>测试文章。本文来自互联网。是关于markdown简明语法教程。现在让我们一起来学Markdown吧。  </p><a id="more"></a><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><ul><li>我的技术小黑屋</li><li>不会写代码的菜鸟</li><li>我要返回火星了</li></ul><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><ol><li>我们都是地球人</li><li>为啥你就不会 markdown?</li><li>看完还不会就要被安排</li></ol><h2 id="链接的写法"><a href="#链接的写法" class="headerlink" title="链接的写法"></a>链接的写法</h2><p><a href="https://herodanny.github.io">我的技术小屋</a></p><h2 id="带-Title"><a href="#带-Title" class="headerlink" title="带 Title"></a>带 Title</h2><p><a href="https://www.github.com/herodanny" title="此处可能有炸弹" target="_blank" rel="noopener">我的技术小屋</a></p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p><img src="https://i.loli.net/2019/04/15/5cb44054a29ee.jpg" alt></p><h2 id="带-Title-1"><a href="#带-Title-1" class="headerlink" title="带 Title"></a>带 Title</h2><p><img src="&quot;咯咯咯&quot;" alt="alt"></p><h2 id="引用方式"><a href="#引用方式" class="headerlink" title="引用方式"></a>引用方式</h2><p><img src="https://i.loli.net/2019/04/15/5cb44054a29ee.jpg" alt="alt" title="咯咯咯，会不会markdown"></p><p></p><blockquote><p>世界依旧很大,大到只能胡说。  </p></blockquote><p></p><h3 id="面朝大海，春暖花开"><a href="#面朝大海，春暖花开" class="headerlink" title="面朝大海，春暖花开"></a>面朝大海，春暖花开</h3><blockquote><p>从明天起，做一个幸福的人<br>喂马、劈柴，周游世界<br>从明天起，关心粮食和蔬菜<br>我有一所房子，面朝大海，春暖花开<br>从明天起，和每一个亲人通信<br>告诉他们我的幸福<br>那幸福的闪电告诉我的<br>我将告诉每一个人<br>给每一条河每一座山取一个温暖的名字<br>陌生人，我也为你祝福<br>愿你有一个灿烂的前程<br>愿你有情人终成眷属<br>愿你在尘世获得幸福<br>我只愿面朝大海，春暖花开  </p></blockquote><p><strong>粗体</strong></p><p><strong>粗体</strong></p><p><em>看，我斜了没</em></p><p><em>真的很斜</em></p><p><strong><em>粗体＋斜体</em></strong></p><p><del>此处的故事只能用泪水掩盖</del></p><h1 id="群里单身女生名单"><a href="#群里单身女生名单" class="headerlink" title="群里单身女生名单"></a>群里单身女生名单</h1><table><thead><tr><th>姓名</th><th style="text-align:center">年龄</th><th style="text-align:right">三围</th></tr></thead><tbody><tr><td>罗欲凤</td><td style="text-align:center">18</td><td style="text-align:right">18, 27, 30</td></tr><tr><td>秋刀鱼</td><td style="text-align:center">26</td><td style="text-align:right">28, 25, 33</td></tr><tr><td>窝不行</td><td style="text-align:center">22</td><td style="text-align:right">23, 28, 35</td></tr></tbody></table><p><code>单行代码引用</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">   fmt.Println(<span class="string">"我的技术小屋"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分割线</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/04/15/5cb44607518ec.jpeg&quot; alt=&quot;timg.jpeg&quot;&gt;  &lt;/p&gt;
&lt;p&gt;测试文章。本文来自互联网。是关于markdown简明语法教程。现在让我们一起来学Markdown吧。  &lt;/p&gt;
    
    </summary>
    
      <category term="tools" scheme="https://herodanny.github.io/categories/tools/"/>
    
      <category term="test" scheme="https://herodanny.github.io/categories/test/"/>
    
    
      <category term="test" scheme="https://herodanny.github.io/tags/test/"/>
    
      <category term="markdown" scheme="https://herodanny.github.io/tags/markdown/"/>
    
  </entry>
  
</feed>
