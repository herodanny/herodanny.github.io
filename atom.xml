<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>从菜鸟到老鸟</title>
  
  <subtitle>From Zero To Hero</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://herodanny.github.io/"/>
  <updated>2019-04-29T10:31:53.914Z</updated>
  <id>https://herodanny.github.io/</id>
  
  <author>
    <name>herodanny</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python全栈-magedu-2018-笔记10</title>
    <link href="https://herodanny.github.io/python-magedu-2018-notes10.html"/>
    <id>https://herodanny.github.io/python-magedu-2018-notes10.html</id>
    <published>2019-04-29T10:30:47.000Z</published>
    <updated>2019-04-29T10:31:53.914Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第三章-Python-内置数据结构"><a href="#第三章-Python-内置数据结构" class="headerlink" title="第三章 - Python 内置数据结构"></a>第三章 - Python 内置数据结构</h1><h2 id="集set"><a href="#集set" class="headerlink" title="集set"></a>集set</h2><ul><li>约定<ul><li>set 翻译为集合</li><li>collection 翻译为集合类型，是一个大概念</li></ul></li><li>set<ul><li><strong>可变的、无序的、不重复的</strong>元素的集合</li></ul></li></ul><h2 id="set定义-初始化"><a href="#set定义-初始化" class="headerlink" title="set定义 初始化"></a>set定义 初始化</h2><ul><li>set() -&gt; new empty set object</li><li>set(iterable) -&gt; new set object</li></ul><p>&emsp; s1 = set()<br>&emsp; s2 = set(range(5))<br>&emsp; s3 = set(list(range(10)))<br>&emsp; s4 = {} # dict<br>&emsp; s5 = {9,10,11} # set<br>&emsp; s6 = {(1,2),3,’a’}<br>&emsp; s7 = {[1],(1,),1} # unhashable type: ‘list’  </p><h2 id="set的元素"><a href="#set的元素" class="headerlink" title="set的元素"></a>set的元素</h2><ul><li>set的元素要求必须可以hash（因为set就是哈希表啊）</li><li>目前学过的不可hash的类型有list、set</li><li>元素不可以索引，因为无序</li><li>set可以迭代</li></ul><h2 id="set增加"><a href="#set增加" class="headerlink" title="set增加"></a>set增加</h2><ul><li><p>add(elem)</p><ul><li>增加一个元素到set中</li><li>如果元素存在，什么都不做</li></ul></li><li><p>update(*others)</p><ul><li>合并其他元素到set集合中来</li><li>参数others必须是可迭代对象</li><li>就地修改</li></ul></li></ul><h2 id="set删除"><a href="#set删除" class="headerlink" title="set删除"></a>set删除</h2><ul><li>remove(elem)<ul><li>从set中移除一个元素</li><li>元素不存在，抛出KeyError异常。为什么是KeyError？</li></ul></li><li>discard(elem)<ul><li>从set中移除一个元素</li><li>元素不存在，什么都不做</li></ul></li><li>pop() -&gt; item<ul><li>移除并返回任意的元素。为什么是任意元素？</li><li>空集返回KeyError异常</li><li>clear()</li><li>移除所有元素</li></ul></li></ul><h2 id="set修改、查询"><a href="#set修改、查询" class="headerlink" title="set修改、查询"></a>set修改、查询</h2><ul><li>修改<ul><li>要么删除，要么加入新的元素</li><li>为什么没有修改？</li></ul></li><li>查询<ul><li>非线性结构，无法索引</li></ul></li><li>遍历<ul><li>可以迭代所有元素</li></ul></li><li>成员运算符<ul><li>in 和 not in 判断元素是否在set中</li><li>效率呢？与索引访问列表的效率是差不多的，O(1)</li></ul></li></ul><h2 id="set成员运算符的比较"><a href="#set成员运算符的比较" class="headerlink" title="set成员运算符的比较"></a>set成员运算符的比较</h2><ul><li>list和set的比较</li><li>lst1 = list(range(100))</li><li>lst2 = list(range(1000000))</li><li>-1 in lst1、-1 in lst2 看看效率</li><li>set1 = set(range(100))</li><li>set2 = set(range(1000000))</li><li>-1 in set1、-1 in set2 看看效率  </li></ul><h2 id="set成员运算符的比较-1"><a href="#set成员运算符的比较-1" class="headerlink" title="set成员运算符的比较"></a>set成员运算符的比较</h2><p>%%timeit lst1=list(range(100))<br>a = -1 in lst1  </p><p>%%timeit lst1=list(range(1000000))<br>a = -1 in lst1  </p><p>%%timeit set1=set(range(100))<br>a = -1 in set1  </p><p>%%timeit set1=set(range(1000000))<br>a = -1 in set1  </p><p>set不管元素怎么增加遍历的效率都是一样的。  </p><h2 id="set和线性结构"><a href="#set和线性结构" class="headerlink" title="set和线性结构"></a>set和线性结构</h2><ul><li>线性结构的查询时间复杂度是O(n)，即随着数据规模的增大而增加耗时</li><li><p>set、dict等结构，内部使用hash值作为key，时间复杂度可以做到O(1)，查询时间和数据规模无关</p></li><li><p>可hash</p><ul><li>数值型int、float、complex</li><li>布尔型True、False</li><li>字符串string、bytes</li><li>tuple</li><li>None</li><li>以上都是不可变类型，成为可哈希类型，hashable</li></ul></li><li><p>set的元素必须是可hash的</p></li></ul><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><ul><li>基本概念<ul><li>全集<ul><li>所有元素的集合。例如实数集，所有实数组成的集合就是全集</li></ul></li><li>子集subset和超集superset<ul><li>一个集合A所有元素都在另一个集合B内，A是B的子集，B是A的超集</li></ul></li><li>真子集和真超集<ul><li>A是B的子集，且A不等于B，A就是B的真子集，B是A的真超集</li></ul></li><li>并集：多个集合合并的结果</li><li>交集：多个集合的公共部分</li><li>差集：集合中除去和其他集合公共部分</li></ul></li></ul><h2 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h2><ul><li>并集<ul><li>将两个集合A和B的所有的元素合并到一起，组成的集合称作集合A与集合B的并集</li><li>union(*others)<ul><li>返回和多个集合合并后的新的集合</li></ul></li><li>| 运算符重载<ul><li>等同union</li></ul></li><li>update(*others)<ul><li>和多个集合合并，就地修改</li></ul></li><li>|=<ul><li>等同update</li></ul></li></ul></li></ul><p><img src="https://raw.githubusercontent.com/herodanny/Image-Hosting/master/data/bingji.jpg" alt="bingji"></p><h2 id="集合运算-1"><a href="#集合运算-1" class="headerlink" title="集合运算"></a>集合运算</h2><ul><li>交集<ul><li>集合A和B，由所有属于A且属于B的元素组成的集合</li><li>intersection(*others)<ul><li>返回和多个集合的交集</li></ul></li><li>&amp;<ul><li>等同intersection</li></ul></li><li>intersection_update(*others)<ul><li>获取和多个集合的交集，并就地修改</li></ul></li><li>&amp;=<ul><li>等同intersection_update</li></ul></li></ul></li></ul><p><img src="https://raw.githubusercontent.com/herodanny/Image-Hosting/master/data/jiaoji.jpg" alt="jiaoji"></p><h2 id="集合运算-2"><a href="#集合运算-2" class="headerlink" title="集合运算"></a>集合运算</h2><ul><li>差集<ul><li>集合A和B，由所有属于A且不属于B的元素组成的集合</li><li>difference(*others)<ul><li>返回和多个集合的差集</li></ul></li></ul></li><li>-<ul><li>等同difference</li></ul></li><li>difference_update(*others)<ul><li>获取和多个集合的差集并就地修改</li></ul></li><li>-=<ul><li>等同difference_update</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/herodanny/Image-Hosting/master/data/chaji.jpg" alt="chaji"></p><h2 id="集合运算-3"><a href="#集合运算-3" class="headerlink" title="集合运算"></a>集合运算</h2><ul><li>对称差集<ul><li>集合A和B，由所有不属于A和B的交集元素组成的集合，记作（A-B）∪（B-A）</li><li>symmetric_differece(other)<ul><li>返回和另一个集合的差集</li></ul></li><li>\^<ul><li>等同symmetric_differece</li></ul></li><li>symmetric_differece_update(other)<ul><li>获取和另一个集合的差集并就地修改</li></ul></li><li>\^=<ul><li>等同symmetric_differece_update</li></ul></li></ul></li></ul><p><img src="https://raw.githubusercontent.com/herodanny/Image-Hosting/master/data/duichenchaji.jpg" alt="duichenchaji"></p><h2 id="集合运算-4"><a href="#集合运算-4" class="headerlink" title="集合运算"></a>集合运算</h2><ul><li>issubset(other)、&lt;=<ul><li>判断当前集合是否是另一个集合的子集</li></ul></li><li>set1 &lt; set2<ul><li>判断set1是否是set2的真子集</li></ul></li><li>issuperset(other)、&gt;=<ul><li>判断当前集合是否是other的超集</li></ul></li><li>set1 &gt; set2<ul><li>判断set1是否是set的真超集</li></ul></li><li>isdisjoint(other)<ul><li>当前集合和另一个集合没有交集</li><li>没有交集，返回True</li></ul></li></ul><h2 id="集合应用"><a href="#集合应用" class="headerlink" title="集合应用"></a>集合应用</h2><ul><li>共同好友<ul><li>你的好友A、B、C，他的好友C、B、D，求共同好友<br>如果是推荐好友，用差集求，不用查库，在内存中集合运算是非常快的，而且往往用到Redis的  </li></ul></li><li>微信群提醒<ul><li>XXX与群里其他人都不是微信朋友关系</li></ul></li><li>权限判断<ul><li>有一个API，要求权限同时具备A、B、C才能访问，用户权限是B、C、D，判断用户是否能够访问该API</li><li>有一个API，要求权限具备A、B、C任意一项就可访问，用户权限是B、C、D，判断用户是否能够访问该API</li></ul></li><li>一个总任务列表，存储所有任务。一个完成的任务列表。找出为未完成的任务</li></ul><p>解决的方法都不是唯一的，下面仅供参考。  </p><h2 id="集合应用-1"><a href="#集合应用-1" class="headerlink" title="集合应用"></a>集合应用</h2><ul><li><p>共同好友</p><ul><li>你的好友A、B、C，他的好友C、B、D，求共同好友</li><li>交集问题：{‘A’, ‘B’, ‘C’}.intersection({‘B’, ‘C’, ‘D’})</li></ul></li><li><p>微信群提醒</p><ul><li>XXX与群里其他人都不是微信朋友关系</li><li>并集：userid in (A | B | C | …) == False，A、B、C等是微信好友的并集，用户ID不在这个并集中，说明他和任何人都不是朋友</li></ul></li></ul><h2 id="集合应用-2"><a href="#集合应用-2" class="headerlink" title="集合应用"></a>集合应用</h2><ul><li>权限判断<ul><li>有一个API，要求权限同时具备A、B、C才能访问，用户权限是B、C、D，判断用户是否能够访问该API<ul><li>API集合A，权限集合P</li><li>A - P = {} ，A-P为空集，说明P包含A</li><li>A.issubset(P) 也行，A是P的子集也行</li><li>A &amp; P = A 也行</li></ul></li><li>有一个API，要求权限具备A、B、C任意一项就可访问，用户权限是B、C、D，判断用户是否能够访问该API<ul><li>API集合A，权限集合P</li><li>A &amp; P != {} 就可以</li><li>A.isdisjoint(P) == False 表示有交集</li></ul></li></ul></li></ul><h2 id="集合应用-3"><a href="#集合应用-3" class="headerlink" title="集合应用"></a>集合应用</h2><ul><li>一个总任务列表，存储所有任务。一个已完成的任务列表。找出为未完成的任务<ul><li>业务中，任务ID一般不可以重复</li><li>所有任务ID放到一个set中，假设为ALL</li><li>所有已完成的任务ID放到一个set中，假设为COMPLETED，它是ALL的子集</li><li>ALL - COMPLETED = UNCOMPLETED</li></ul></li></ul><h2 id="集合练习"><a href="#集合练习" class="headerlink" title="集合练习"></a>集合练习</h2><ul><li>随机产生2组各10个数字的列表，如下要求：<ul><li>每个数字取值范围[10,20]</li><li>统计20个数字中，一共有多少个不同的数字？</li><li>2组中，不重复的数字有几个？分别是什么？</li><li>2组中，重复的数字有几个？分别是什么？</li></ul></li></ul><h2 id="集合练习-1"><a href="#集合练习-1" class="headerlink" title="集合练习"></a>集合练习</h2><ul><li>随机产生2组各10个数字的列表，如下要求：<ul><li>每个数字取值范围[10,20]</li><li>统计20个数字中，一共有多少个不同的数字？</li><li>2组比较，不重复的数字有几个？分别是什么？</li><li>2组比较，重复的数字有几个？分别是什么？  </li></ul></li></ul><p>&emsp; a = [1, 9, 7, 5, 6, 7, 8, 8, 2, 6]<br>&emsp; b = [1, 9, 0, 5, 6, 4, 8, 3, 2, 3]<br>&emsp; s1 = set(a)<br>&emsp; s2 = set(b)<br>&emsp; print(s1)<br>&emsp; print(s2)<br>&emsp; print(s1.union(s2))<br>&emsp; print(s1.symmetric_difference(s2))<br>&emsp; print(s1.intersection(s2))  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第三章-Python-内置数据结构&quot;&gt;&lt;a href=&quot;#第三章-Python-内置数据结构&quot; class=&quot;headerlink&quot; title=&quot;第三章 - Python 内置数据结构&quot;&gt;&lt;/a&gt;第三章 - Python 内置数据结构&lt;/h1&gt;&lt;h2 id=&quot;集
      
    
    </summary>
    
      <category term="python-magedu" scheme="https://herodanny.github.io/categories/python-magedu/"/>
    
    
      <category term="python" scheme="https://herodanny.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python全栈-magedu-2018-笔记9</title>
    <link href="https://herodanny.github.io/python-magedu-2018-notes9.html"/>
    <id>https://herodanny.github.io/python-magedu-2018-notes9.html</id>
    <published>2019-04-28T06:33:09.000Z</published>
    <updated>2019-04-28T06:40:17.861Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第三章-Python-内置数据结构"><a href="#第三章-Python-内置数据结构" class="headerlink" title="第三章 - Python 内置数据结构"></a>第三章 - Python 内置数据结构</h1><h2 id="封装和解构"><a href="#封装和解构" class="headerlink" title="封装和解构"></a>封装和解构</h2><ul><li>封装<ul><li>将多个值使用逗号分割，组合在一起</li><li>本质上，返回一个元组，只是省掉了小括号</li><li>python特有语法，被很多语言学习和借鉴  </li></ul></li></ul><p>&emsp;&emsp; t1 = (1,2) # 定义为元组<br>&emsp;&emsp; t2 = 1,2 # 将1和2封装成元组，一般都这么写<br>&emsp;&emsp; type(t1)<br>&emsp;&emsp; type(t2)  </p><h2 id="封装和解构-1"><a href="#封装和解构-1" class="headerlink" title="封装和解构"></a>封装和解构</h2><ul><li>举例  </li></ul><p>&emsp;&emsp; a = 4<br>&emsp;&emsp; b = 5  </p><p>&emsp;&emsp; <strong>temp = a</strong><br>&emsp;&emsp; <strong>a = b</strong><br>&emsp;&emsp; <strong>b = temp</strong>  </p><p>&emsp;&emsp; 等价于<br>&emsp;&emsp; <strong>a, b = b, a</strong>  </p><p>&emsp;&emsp; 上句中，等号右边使用了封装，而左边就使用了解构</p><h2 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h2><ul><li>把线性结构的元素解开，并顺序的赋给其它变量</li><li><p>左边接纳的变量数要和右边解开的元素个数一致</p></li><li><p>举例  </p></li></ul><p>&emsp;&emsp; lst = [3, 5]<br>&emsp;&emsp; first, second = lst<br>&emsp;&emsp; print(first, second)  </p><h2 id="解构-1"><a href="#解构-1" class="headerlink" title="解构"></a>解构</h2><p>a,b = 1,2<br>a,b = (1,2)<br>a,b = [1,2]<br>a,b = [10,20]<br>a,b = {10,20}<br>a,b = {‘a’:10,’b’:20} # 非线性结构也可以解构，a为a是key值，b为b<br>a,b = {10,20,30}<br>a,*b = {10,20,30}  # a为1，b为[20,30]，*是匹配任意多个元素，因为解构时元素不确定，所以用列表<br>[a,b] = (1,2)<br>[a,b] = 10,20<br>(a,b) = {30,40}  </p><h2 id="Python3的解构"><a href="#Python3的解构" class="headerlink" title="Python3的解构"></a>Python3的解构</h2><ul><li>使用 *变量名 接收，但不能单独使用</li><li>被 *变量名 收集后组成一个列表</li><li>举例  </li></ul><p>&emsp;&emsp; lst = list(range(1, 101, 2))<br>&emsp;&emsp; head, *mid, tail = lst<br>&emsp;&emsp; *lst2 = lst<br>&emsp;&emsp; *body, tail = lst<br>&emsp;&emsp; head, *tail = lst<br>&emsp;&emsp; head, *m1, *m2, tail = lst<br>&emsp;&emsp; head, *mid, tail = “abcdefghijklmn”<br>&emsp;&emsp; type(mid)</p><h2 id="丢弃变量"><a href="#丢弃变量" class="headerlink" title="丢弃变量"></a>丢弃变量</h2><ul><li>这是一个惯例，是一个不成文的约定，不是标准</li><li>如果不关心一个变量，就可以定义改变量的名字为_</li><li>_是一个合法的标识符，也可以作为一个有效的变量使用，但是定义成下划线就是希望不要被使用，除非你明确的知道这个数据需要使用  </li><li>举例</li></ul><p>&emsp;&emsp; lst = [9,8,7,20]<br>&emsp;&emsp; first, *second = lst<br>&emsp;&emsp; head, *_, tail = lst<br>&emsp;&emsp; print(head)<br>&emsp;&emsp; print(tail)<br>&emsp;&emsp; _是合法的标识符，看到下划线就知道这个变量就是不想被使用<br>&emsp;&emsp; print(_)</p><h2 id="丢弃变量-1"><a href="#丢弃变量-1" class="headerlink" title="丢弃变量"></a>丢弃变量</h2><ul><li>举例  </li></ul><p>&emsp;&emsp; lst = [9,8,7,20]<br>&emsp;&emsp; first, *second = lst<br>&emsp;&emsp; _ , *_, tail = lst<br>&emsp;&emsp; print(_)<br>&emsp;&emsp; print(tail)<br>&emsp;&emsp; print(_)</p><h2 id="丢弃变量-2"><a href="#丢弃变量-2" class="headerlink" title="丢弃变量"></a>丢弃变量</h2><ul><li><p>总结</p><ul><li>_ 这个变量本身无任何语义，没有任何可读性，所以不是用来给人使用的</li><li>Python中很多库，都使用这个变量，使用十分广泛。请不要在不明确变量作用域的情况下，使用 _ 导致和库中 _ 冲突</li></ul></li><li><p>练习</p><ul><li>lst = list(range(10)) # 这样一个列表，取出第二个、第四个、倒数第二个</li></ul></li></ul><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><ul><li>练习<ul><li>从lst = [1,(2,3,4),5]中，提取4出来</li><li>环境变量JAVA_HOME=/usr/bin，返回环境变量名和路径</li><li>对列表[1, 9, 8, 5, 6, 7, 4, 3, 2]使用冒泡法排序，要求使用封装和解构来交互数据</li></ul></li></ul><h2 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h2><ul><li>练习<ul><li>从lst = [1,(2,3,4),5]中，提取4出来  </li></ul></li></ul><p>&emsp;&emsp; lst = [1,(2,3,4),5]<br>&emsp;&emsp; a,(b,c,d),e = lst<br>&emsp;&emsp; print(a,b,c,d,e)  </p><p>&emsp;&emsp; _, (*_, val), *_ = lst<br>&emsp;&emsp; print(val)  </p><p>&emsp;&emsp; _, [*_, val], *_ = lst<br>&emsp;&emsp; print(val)  </p><h2 id="练习-2"><a href="#练习-2" class="headerlink" title="练习"></a>练习</h2><ul><li><p>练习</p><ul><li>环境变量JAVA_HOME=/usr/bin，返回变量名和路径<br>key, _ , val = “JAVA_HOME=/usr/bin”.partition(‘=’)<br>print(key)<br>print(val)  </li></ul></li><li><p>总结：</p><ul><li>解构，是Python提供的很好的功能，可以方便的提取复杂数据结构的值</li><li>配合 _ 的使用，会更加便利</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第三章-Python-内置数据结构&quot;&gt;&lt;a href=&quot;#第三章-Python-内置数据结构&quot; class=&quot;headerlink&quot; title=&quot;第三章 - Python 内置数据结构&quot;&gt;&lt;/a&gt;第三章 - Python 内置数据结构&lt;/h1&gt;&lt;h2 id=&quot;封
      
    
    </summary>
    
      <category term="python-magedu" scheme="https://herodanny.github.io/categories/python-magedu/"/>
    
    
      <category term="python" scheme="https://herodanny.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python全栈-magedu-2018-笔记8</title>
    <link href="https://herodanny.github.io/python-magedu-2018-notes8.html"/>
    <id>https://herodanny.github.io/python-magedu-2018-notes8.html</id>
    <published>2019-04-28T02:34:30.000Z</published>
    <updated>2019-04-28T02:35:41.363Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第四章-IPython-使用"><a href="#第四章-IPython-使用" class="headerlink" title="第四章 - IPython 使用"></a>第四章 - IPython 使用</h1><h2 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h2><ul><li>?<ul><li>Ipython的概述和简介</li></ul></li><li>help(name)<ul><li>查询指定名称的帮助，是python帮助</li></ul></li><li>obj?<ul><li>列出obj对象的详细信息</li></ul></li><li>obj??<ul><li>列出更加详细的信息</li></ul></li></ul><h2 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量"></a>特殊变量</h2><ul><li>_ 表示前一次输出</li><li>__ 表示倒数第二次输出</li><li>___ 表示倒数第三次输出</li><li>_dh 目录历史</li><li>_oh 输出历史</li></ul><h2 id="shell命令"><a href="#shell命令" class="headerlink" title="shell命令"></a>shell命令</h2><ul><li>!command 执行shell命令<ul><li>!ls -l</li><li>!touch test.txt</li><li>files = !ls -l | grep py</li></ul></li></ul><h2 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h2><ul><li>使用%百分号开头的，IPython内置的特殊方法<ul><li>%magic 格式<ul><li>% 开头是line magic</li><li>%% 开头是 cell magic，notebook的cell</li></ul></li><li>%alias 定义一个系统命令的别名<ul><li>alias ll ls -l</li></ul></li><li>%timeit statement<ul><li>-n 一个循环loop执行语句多少次</li><li>-r 循环执行多少次loop，取最好的结果</li></ul></li><li>%%timeit setup_code<br>code…..</li></ul></li></ul><h2 id="魔术方法-1"><a href="#魔术方法-1" class="headerlink" title="魔术方法"></a>魔术方法</h2><ul><li>%cd 改变当前工作目录，cd可以认为是%cd的链接。路径历史在_dh中查看</li><li>%pwd、pwd 显示当前工作目录</li><li>%ls 、ls 返回文件列表</li><li>注意：%pwd这种是魔术方法，是IPython的内部实现，和操作系统无关。而!pwd 就要依赖当前操作系统的shell提供的命令执行，默认windows不支持pwd命令</li><li>%%js、%%javascript 在cell中运行js脚本<br>%%js<br>alert(‘a’ + 1)  </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第四章-IPython-使用&quot;&gt;&lt;a href=&quot;#第四章-IPython-使用&quot; class=&quot;headerlink&quot; title=&quot;第四章 - IPython 使用&quot;&gt;&lt;/a&gt;第四章 - IPython 使用&lt;/h1&gt;&lt;h2 id=&quot;帮助&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="python-magedu" scheme="https://herodanny.github.io/categories/python-magedu/"/>
    
    
      <category term="python" scheme="https://herodanny.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python全栈-magedu-2018-笔记7</title>
    <link href="https://herodanny.github.io/python-magedu-2018-notes7.html"/>
    <id>https://herodanny.github.io/python-magedu-2018-notes7.html</id>
    <published>2019-04-27T15:40:52.000Z</published>
    <updated>2019-04-27T15:46:46.468Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第三章-Python-内置数据结构"><a href="#第三章-Python-内置数据结构" class="headerlink" title="第三章 - Python 内置数据结构"></a>第三章 - Python 内置数据结构</h1><h2 id="线性结构"><a href="#线性结构" class="headerlink" title="线性结构"></a>线性结构</h2><ul><li><p>线性结构</p><ul><li>可迭代 for … in</li><li>len()可以获取长度</li><li>通过下标可以访问</li><li>可以切片</li></ul></li><li><p>学过的线性结构</p><ul><li>列表、元组、字符串、bytes、bytearray</li></ul></li></ul><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><ul><li>切片<ul><li>通过索引区间访问线性结构的一段数据</li><li>sequence[start:stop] 表示返回[start, stop)区间的子序列</li><li>支持负索引</li><li>start为0，可以省略</li><li>stop为末尾，可以省略</li><li>超过上界（右边界），就取到末尾；超过下界（左边界），取到开头</li><li>start一定要在stop的左边</li><li>[:] 表示从头至尾，全部元素被取出，等效于copy()方法</li></ul></li></ul><h2 id="切片-1"><a href="#切片-1" class="headerlink" title="切片"></a>切片</h2><ul><li><p>切片举例<br>‘<a href="http://www.github.com&#39;[4:10]" target="_blank" rel="noopener">www.github.com&#39;[4:10]</a><br>‘<a href="http://www.github.com&#39;[:10]" target="_blank" rel="noopener">www.github.com&#39;[:10]</a><br>‘<a href="http://www.github.com&#39;[4:]" target="_blank" rel="noopener">www.github.com&#39;[4:]</a><br>‘<a href="http://www.github.com&#39;[:]" target="_blank" rel="noopener">www.github.com&#39;[:]</a><br>‘<a href="http://www.github.com&#39;[:-1]" target="_blank" rel="noopener">www.github.com&#39;[:-1]</a><br>‘<a href="http://www.github.com&#39;[4:-4]" target="_blank" rel="noopener">www.github.com&#39;[4:-4]</a><br>‘<a href="http://www.github.com&#39;[4:50]" target="_blank" rel="noopener">www.github.com&#39;[4:50]</a><br>b’<a href="http://www.github.com&#39;[-40:10]" target="_blank" rel="noopener">www.github.com&#39;[-40:10]</a><br>bytearray(b’<a href="http://www.github.com&#39;)[-4:10]" target="_blank" rel="noopener">www.github.com&#39;)[-4:10]</a><br>tuple(‘<a href="http://www.github.com&#39;)[-10:10]" target="_blank" rel="noopener">www.github.com&#39;)[-10:10]</a><br>list(‘<a href="http://www.github.com&#39;)[-10:-4]" target="_blank" rel="noopener">www.github.com&#39;)[-10:-4]</a>  </p></li><li><p>步长切片</p><ul><li>[start:stop:step]  </li><li>step为步长，可以正、负整数，默认是1  </li><li>step要和start:stop同向，否则返回空序列<br>‘<a href="http://www.github.com&#39;[4:10:2]" target="_blank" rel="noopener">www.github.com&#39;[4:10:2]</a><br>list(‘<a href="http://www.github.com&#39;)[4:10:-2]" target="_blank" rel="noopener">www.github.com&#39;)[4:10:-2]</a><br>tuple(‘<a href="http://www.github.com&#39;)[-10:-4:2]" target="_blank" rel="noopener">www.github.com&#39;)[-10:-4:2]</a><br>b’<a href="http://www.github.com&#39;[-4:-10:2]" target="_blank" rel="noopener">www.github.com&#39;[-4:-10:2]</a><br>bytearray(b’<a href="http://www.github.com&#39;)[-4:-10:-2]" target="_blank" rel="noopener">www.github.com&#39;)[-4:-10:-2]</a>  </li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第三章-Python-内置数据结构&quot;&gt;&lt;a href=&quot;#第三章-Python-内置数据结构&quot; class=&quot;headerlink&quot; title=&quot;第三章 - Python 内置数据结构&quot;&gt;&lt;/a&gt;第三章 - Python 内置数据结构&lt;/h1&gt;&lt;h2 id=&quot;线
      
    
    </summary>
    
      <category term="python-magedu" scheme="https://herodanny.github.io/categories/python-magedu/"/>
    
    
      <category term="python" scheme="https://herodanny.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python全栈-magedu-2018-笔记6</title>
    <link href="https://herodanny.github.io/python-magedu-2018-notes6.html"/>
    <id>https://herodanny.github.io/python-magedu-2018-notes6.html</id>
    <published>2019-04-27T09:25:01.000Z</published>
    <updated>2019-04-27T09:26:34.423Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第三章-Python-内置数据结构"><a href="#第三章-Python-内置数据结构" class="headerlink" title="第三章 - Python 内置数据结构"></a>第三章 - Python 内置数据结构</h1><h2 id="bytes、bytearray"><a href="#bytes、bytearray" class="headerlink" title="bytes、bytearray"></a>bytes、bytearray</h2><ul><li>Python3引入两个新类型<ul><li>bytes<ul><li><strong>不可变</strong>字节序列</li></ul></li><li>bytearray<ul><li>字节数组</li><li><strong>可变</strong></li></ul></li></ul></li></ul><h2 id="bytes、bytearray-1"><a href="#bytes、bytearray-1" class="headerlink" title="bytes、bytearray"></a>bytes、bytearray</h2><ul><li><p>字符串与bytes</p><ul><li>字符串是字符组成的有序序列，字符可以使用编码来理解</li><li>bytes是字节组成的有序的<strong>不可变</strong>序列</li><li>bytearray是字节组成的有序的<strong>可变</strong>序列</li></ul></li><li><p>编码与解码</p><ul><li>字符串按照不同的字符集编码encode返回字节序列bytes<ul><li>encode(encoding=’utf-8’, errors=’strict’) -&gt; bytes</li></ul></li><li>字节序列按照不同的字符集解码decode返回字符串<ul><li>bytes.decode(encoding=”utf-8”, errors=”strict”) -&gt; str</li><li>bytearray.decode(encoding=”utf-8”, errors=”strict”) -&gt; str</li></ul></li></ul></li></ul><h2 id="bytes定义"><a href="#bytes定义" class="headerlink" title="bytes定义"></a>bytes定义</h2><ul><li>定义<ul><li>bytes() 空bytes</li><li>bytes(int) 指定长度的bytes，被0填充</li><li>bytes(iterable_of_ints) -&gt; bytes [0,255]的int组成的可迭代对象</li><li>bytes(string, encoding[, errors]) -&gt; bytes 等价于string.encode()</li><li>bytes(bytes_or_buffer) -&gt; immutable copy of bytes_or_buffer 从一个字节序列或者buffer复制出 (是浅拷贝)  <ul><li>一个新的不可变的bytes对象</li></ul></li><li>使用b前缀定义<ul><li>只允许基本ASCII使用字符形式b’abc9’</li><li>使用16进制表示b”\x41\x61”<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = bytes(range(<span class="number">15</span>))</span><br><span class="line">a</span><br><span class="line"><span class="string">b'\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e'</span></span><br><span class="line"><span class="comment"># 看ASCII表，9 是\t，10是\n，13是\r。前面那些 00 01 02 03，</span></span><br><span class="line"><span class="comment"># 也有自己的意思，但是没办法用字符表示出来，所以就用它的十六进制表示法表示出来。</span></span><br><span class="line"><span class="comment"># 类似当看到返回或自己写的是 b'hello' 其实应该是 \x68\x65\x6c\x6c\x6f </span></span><br><span class="line"><span class="comment"># 这样一串，只不过ipython等工具，把他优化成便于人类理解的形式。</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="bytes操作"><a href="#bytes操作" class="headerlink" title="bytes操作"></a>bytes操作</h2><ul><li><p>和str类型类似，都是不可变类型，所以方法很多都一样。只不过bytes的方法，输入是bytes，输出是bytes<br>&emsp; b’abcdef’.replace(b’f’,b’k’)<br>&emsp; b’abc’.find(b’b’)</p></li><li><p>类方法 bytes.fromhex(string)</p><ul><li>string必须是2个字符的16进制的形式，’6162 6a 6b’，空格将被忽略<br>&emsp; bytes.fromhex(‘6162 09 6a 6b00’)<br>&emsp; 输出：b’ab\tjk\x00’ # 即a:61 b:63 \t:09 j:6a k=6b 00:\x00  </li></ul></li><li><p>hex()</p><ul><li>返回16进制表示的字符串<br>&emsp; ‘abc’.encode().hex()</li></ul></li><li><p>索引<br>&emsp; b’abcdef’[2] 返回该字节对应的数，int类型</p></li></ul><h2 id="bytearray定义"><a href="#bytearray定义" class="headerlink" title="bytearray定义"></a>bytearray定义</h2><ul><li><p>定义</p><ul><li>bytearray() 空bytearray</li><li>bytearray(int) 指定字节的bytearray，被0填充</li><li>bytearray(iterable_of_ints) -&gt; bytearray [0,255]的int组成的可迭代对象</li><li>bytearray(string, encoding[, errors]) -&gt; bytearray 近似string.encode()，不过返回可变对象</li><li><p>bytearray(bytes_or_buffer) 从一个字节序列或者buffer复制出一个新的可变的bytearray对象 （有时也有从bytes转list对象）</p></li><li><p>注意，b前缀定义的类型是bytes类型</p></li></ul></li></ul><h2 id="bytearray操作"><a href="#bytearray操作" class="headerlink" title="bytearray操作"></a>bytearray操作</h2><ul><li>和bytes类型的方法相同<ul><li>bytearray(b’abcdef’).replace(b’f’,b’k’)</li><li>bytearray(b’abc’).find(b’b’)</li></ul></li><li>类方法 bytearray.fromhex(string)<ul><li>string必须是2个字符的16进制的形式，’6162 6a 6b’，空格将被忽略<br>bytearray.fromhex(‘6162 09 6a 6b00’)</li></ul></li><li>hex()<ul><li>返回16进制表示的字符串<br>bytearray(‘abc’.encode()).hex()  </li></ul></li><li>索引<br>bytearray(b’abcdef’)[2] 返回该字节对应的数，int类型</li></ul><h2 id="bytearray操作-1"><a href="#bytearray操作-1" class="headerlink" title="bytearray操作"></a>bytearray操作</h2><ul><li>append(int) 尾部追加一个元素</li><li>insert(index, int) 在指定索引位置插入元素</li><li>extend(iterable_of_ints) 将一个可迭代的整数集合追加到当前bytearray</li><li>pop(index=-1) 从指定索引上移除元素，默认从尾部移除</li><li>remove(value) 找到第一个value移除，找不到抛ValueError异常</li><li>注意：上述方法若需要使用int类型，值在[0, 255]</li><li>clear() 清空bytearray</li><li>reverse() 翻转bytearray，就地修改</li></ul><p>&emsp;&emsp; b = bytearray()<br>&emsp;&emsp; b.append(97)<br>&emsp;&emsp; b.append(99)<br>&emsp;&emsp; b.insert(1,98)<br>&emsp;&emsp; b.extend([65,66,67])<br>&emsp;&emsp; b.remove(66)<br>&emsp;&emsp; b.pop()<br>&emsp;&emsp; b.reverse()<br>&emsp;&emsp; b.clear()  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第三章-Python-内置数据结构&quot;&gt;&lt;a href=&quot;#第三章-Python-内置数据结构&quot; class=&quot;headerlink&quot; title=&quot;第三章 - Python 内置数据结构&quot;&gt;&lt;/a&gt;第三章 - Python 内置数据结构&lt;/h1&gt;&lt;h2 id=&quot;b
      
    
    </summary>
    
      <category term="python-magedu" scheme="https://herodanny.github.io/categories/python-magedu/"/>
    
    
      <category term="python" scheme="https://herodanny.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python全栈-magedu-2018-笔记5</title>
    <link href="https://herodanny.github.io/python-magedu-2018-notes5.html"/>
    <id>https://herodanny.github.io/python-magedu-2018-notes5.html</id>
    <published>2019-04-26T13:09:12.000Z</published>
    <updated>2019-04-27T01:51:20.389Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第三章-Python-内置数据结构"><a href="#第三章-Python-内置数据结构" class="headerlink" title="第三章 - Python 内置数据结构"></a>第三章 - Python 内置数据结构</h1><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><ul><li>一个个字符组成的有序的序列，是字符的集合。</li><li>python中一个字符也是str类型。</li><li>使用单引号、双引号、三引号引住的字符序列</li><li>字符串是<strong>不可变</strong>对象</li><li>Python3起，字符串就是Unicode类型</li></ul><h2 id="字符串定义-初始化"><a href="#字符串定义-初始化" class="headerlink" title="字符串定义 初始化"></a>字符串定义 初始化</h2><ul><li>举例  </li></ul><p>&emsp;&emsp; s1 = ‘string’<br>&emsp;&emsp; s2 = “string2”<br>&emsp;&emsp; s3 = ‘’’this’s a “String” ‘’’<br>&emsp;&emsp; s4 = ‘hello \n herodanny.github.io’<br>&emsp;&emsp; s5 = r”hello \n herodanny.github.io”<br>&emsp;&emsp; s6 = ‘c:\windows\nt’<br>&emsp;&emsp; s7 = R”c:\windows\nt”<br>&emsp;&emsp; s8 = ‘c:\windows\\nt’<br>&emsp;&emsp; sql = “””select * from user where name=’tom’ “””  </p><h2 id="字符串元素访问——下标"><a href="#字符串元素访问——下标" class="headerlink" title="字符串元素访问——下标"></a>字符串元素访问——下标</h2><ul><li>字符串支持使用索引访问  </li></ul><p>&emsp;&emsp; sql = “select * from user where name=’tom’”<br>&emsp;&emsp; sql[4] # 字符串’c’<br>&emsp;&emsp; sql[4] = ‘o’  </p><ul><li><p>有序的字符集合，字符序列<br>&emsp;&emsp; for c in sql:<br>&emsp;&emsp;&emsp; print(c)<br>&emsp;&emsp;&emsp; print(type(c)) # 什么类型？  </p></li><li><p>可迭代  </p></li></ul><p>&emsp;&emsp; lst = list(sql)</p><h2 id="字符串join连接"><a href="#字符串join连接" class="headerlink" title="字符串join连接*"></a>字符串join连接*</h2><ul><li>“string”.join(iterable) -&gt; str<ul><li>将可迭代对象连接起来，使用string作为分隔符</li><li>可迭代对象本身元素都是字符串</li><li>返回一个新字符串</li></ul></li></ul><p>&emsp;&emsp; lst = [‘1’,’2’,’3’]<br>&emsp;&emsp; print(“\””.join(lst)) # 分隔符是双引号<br>&emsp;&emsp; print(“ “.join(lst))<br>&emsp;&emsp; print(“\n”.join(lst))<br>&emsp;&emsp; lst = [‘1’,[‘a’,’b’],’3’] # 复杂结构列表<br>&emsp;&emsp; print(“ “.join(lst))  # TypeError: sequence item 1: expected str instance, list found  </p><h2 id="字符串-连接"><a href="#字符串-连接" class="headerlink" title="字符串+连接"></a>字符串+连接</h2><ul><li>+ -&gt; str<ul><li>将2个字符串连接在一起</li><li>返回一个新字符串</li></ul></li></ul><h2 id="字符串分割"><a href="#字符串分割" class="headerlink" title="字符串分割"></a>字符串分割</h2><ul><li><p>分割字符串的方法分为2类</p><ul><li><p>split系</p><ul><li>将字符串按照分隔符分割成若干字符串，并返回列表</li></ul></li><li><p>partition系</p><ul><li>将字符串按照分隔符分割成2段，返回这2段和分隔符的元组</li></ul></li></ul></li></ul><h2 id="字符串分割-1"><a href="#字符串分割-1" class="headerlink" title="字符串分割*"></a>字符串分割*</h2><ul><li>split(sep=None, maxsplit=-1) -&gt; list of strings<ul><li>从左至右</li><li>sep 指定分割字符串，缺省的情况下空白字符串作为分隔符</li><li>maxsplit 指定分割的次数，-1 表示遍历整个字符串</li></ul></li></ul><p>&emsp;&emsp; s1 = “I’m \ta super student.”<br>&emsp;&emsp; s1.split()<br>&emsp;&emsp; s1.split(‘s’)<br>&emsp;&emsp; s1.split(‘super’)<br>&emsp;&emsp; s1.split(‘super ‘)<br>&emsp;&emsp; s1.split(‘ ‘)<br>&emsp;&emsp; s1.split(‘ ‘,maxsplit=2)<br>&emsp;&emsp; s1.split(‘\t’,maxsplit=2)  </p><h2 id="字符串分割-2"><a href="#字符串分割-2" class="headerlink" title="字符串分割"></a>字符串分割</h2><ul><li>rsplit(sep=None, maxsplit=-1) -&gt; list of strings<ul><li>从右向左</li><li>sep 指定分割字符串，缺省的情况下空白字符串作为分隔符</li><li>maxsplit 指定分割的次数，-1 表示遍历整个字符串</li></ul></li></ul><p>&emsp;&emsp; s1 = “I’m \ta super student.”<br>&emsp;&emsp; s1.rsplit()<br>&emsp;&emsp; s1.rsplit(‘s’)<br>&emsp;&emsp; s1.rsplit(‘super’)<br>&emsp;&emsp; s1.rsplit(‘super ‘)<br>&emsp;&emsp; s1.rsplit(‘ ‘)<br>&emsp;&emsp; s1.rsplit(‘ ‘,maxsplit=2)<br>&emsp;&emsp; s1.rsplit(‘\t’,maxsplit=2)  </p><h2 id="字符串分割-3"><a href="#字符串分割-3" class="headerlink" title="字符串分割"></a>字符串分割</h2><ul><li>splitlines([keepends]) -&gt; list of strings<ul><li>按照行来切分字符串</li><li>keepends 指的是是否保留行分隔符</li><li>行分隔符包括\n、\r\n、\r等</li></ul></li></ul><p>&emsp;&emsp; ‘ab c\n\nde fg\rkl\r\n’.splitlines()<br>&emsp;&emsp; ‘ab c\n\nde fg\rkl\r\n’.splitlines(True)<br>&emsp;&emsp; s1 = ‘’’I’m a super student.<br>&emsp;&emsp; You’re a super teacher.’’’<br>&emsp;&emsp; print(s1)<br>&emsp;&emsp; print(s1.splitlines())<br>&emsp;&emsp; print(s1.splitlines(True))</p><h2 id="字符串分割-4"><a href="#字符串分割-4" class="headerlink" title="字符串分割*"></a>字符串分割*</h2><ul><li>partition(sep) -&gt; (head, sep, tail)<ul><li>从左至右，遇到分隔符就把字符串分割成两部分，返回头、分隔符、尾三部分的三<strong>元组</strong>；如果没有找到分隔符，就返回头、2个空元素的三<strong>元组</strong></li><li>sep 分割字符串，必须指定</li></ul></li></ul><p>&emsp;&emsp; s1 = “I’m a super student.”<br>&emsp;&emsp; s1.partition(‘s’)<br>&emsp;&emsp; s1.partition(‘stu’)<br>&emsp;&emsp; s1.partition(‘’)  # ValueError: empty separator<br>&emsp;&emsp; s1.partition(‘abc’)  </p><ul><li>rpartition(sep) -&gt; (head, sep, tail)<ul><li>从右至左，遇到分隔符就把字符串分割成两部分，返回头、分隔符、尾三部分的三元组；如果没有找到分隔符，就返回2个空元素和尾的三元组</li></ul></li></ul><h2 id="字符串大小写"><a href="#字符串大小写" class="headerlink" title="字符串大小写"></a>字符串大小写</h2><ul><li><p>upper()</p><ul><li>全大写</li></ul></li><li><p>lower()</p><ul><li>全小写</li></ul></li><li><p>大小写，做判断的时候用</p></li><li><p>swapcase()</p><ul><li>交互大小写</li></ul></li></ul><h2 id="字符串排版"><a href="#字符串排版" class="headerlink" title="字符串排版"></a>字符串排版</h2><ul><li>title() -&gt; str<ul><li>标题的每个单词都大写</li></ul></li><li>capitalize() -&gt; str<ul><li>首个单词大写</li></ul></li><li>center(width[, fillchar]) -&gt; str<ul><li>width 打印宽度</li><li>fillchar 填充的字符</li></ul></li><li>zfill(width) -&gt; str<ul><li>width 打印宽度，居右，左边用0填充</li></ul></li><li>ljust(width[, fillchar]) -&gt; str 左对齐</li><li>rjust(width[, fillchar]) -&gt; str 右对齐</li><li>中文用的少，了解一下</li></ul><h2 id="字符串修改"><a href="#字符串修改" class="headerlink" title="字符串修改*"></a>字符串修改*</h2><ul><li>replace(old, new[, count]) -&gt; str<ul><li>字符串中找到匹配替换为新子串，返回新字符串</li><li>count表示替换几次，不指定就是全部替换</li></ul></li></ul><p>&emsp;&emsp; ‘<a href="https://www.cnblogs.com&#39;.replace(&#39;w&#39;,&#39;p&#39;)" target="_blank" rel="noopener">https://www.cnblogs.com&#39;.replace(&#39;w&#39;,&#39;p&#39;)</a><br>&emsp;&emsp; ‘<a href="https://www.cnblogs.com&#39;.replace(&#39;w&#39;,&#39;p&#39;,2)" target="_blank" rel="noopener">https://www.cnblogs.com&#39;.replace(&#39;w&#39;,&#39;p&#39;,2)</a><br>&emsp;&emsp; ‘<a href="https://www.cnblogs.com&#39;.replace(&#39;w&#39;,&#39;p&#39;,3)" target="_blank" rel="noopener">https://www.cnblogs.com&#39;.replace(&#39;w&#39;,&#39;p&#39;,3)</a><br>&emsp;&emsp; ‘<a href="https://www.cnblogs.com&#39;.replace(&#39;ww&#39;,&#39;p&#39;,2)" target="_blank" rel="noopener">https://www.cnblogs.com&#39;.replace(&#39;ww&#39;,&#39;p&#39;,2)</a><br>&emsp;&emsp; ‘<a href="https://www.cnblogs.com&#39;.replace(&#39;www&#39;,&#39;python&#39;,2)" target="_blank" rel="noopener">https://www.cnblogs.com&#39;.replace(&#39;www&#39;,&#39;python&#39;,2)</a>  </p><h2 id="字符串修改-1"><a href="#字符串修改-1" class="headerlink" title="字符串修改*"></a>字符串修改*</h2><ul><li>strip([chars]) -&gt; str<ul><li>从字符串两端去除指定的字符集chars中的所有字符</li><li>如果chars没有指定，去除两端的空白字符</li></ul></li></ul><p>&emsp;&emsp; s = “\r \n \t Hello Python \n \t”<br>&emsp;&emsp; s.strip()<br>&emsp;&emsp; s = “ I am very very very sorry “<br>&emsp;&emsp; s.strip(‘Iy’)<br>&emsp;&emsp; s.strip(‘Iy ‘)  </p><ul><li>lstrip([chars]) -&gt; str  <ul><li>从左开始  </li></ul></li><li>rstrip([chars]) -&gt; str  <ul><li>从右开始  </li></ul></li></ul><h2 id="字符串查找"><a href="#字符串查找" class="headerlink" title="字符串查找*"></a>字符串查找*</h2><ul><li>find(sub[, start[, end]]) -&gt; int<ul><li>在指定的区间[start, end)，从左至右，查找子串sub。找到返回索引，没找到返回-1</li></ul></li><li>rfind(sub[, start[, end]]) -&gt; int<ul><li>在指定的区间[start, end)，从右至左，查找子串sub。找到返回索引，没找到返回-1</li></ul></li></ul><p>&emsp;&emsp; s = “I am very very very sorry”<br>&emsp;&emsp; s.find(‘very’)<br>&emsp;&emsp; s.find(‘very’, 5)<br>&emsp;&emsp; s.find(‘very’, 6, 13)<br>&emsp;&emsp; s.rfind(‘very’, 10)<br>&emsp;&emsp; s.rfind(‘very’, 10, 15)<br>&emsp;&emsp; s.rfind(‘very’,-10,-1)  </p><h2 id="字符串查找-1"><a href="#字符串查找-1" class="headerlink" title="字符串查找*"></a>字符串查找*</h2><p>与 find 的区别就是抛出异常  </p><ul><li>index(sub[, start[, end]]) -&gt; int<ul><li>在指定的区间[start, end)，从左至右，查找子串sub。找到返回索引，没找到抛出异常ValueError</li></ul></li><li>rindex(sub[, start[, end]]) -&gt; int<ul><li>在指定的区间[start, end)，从左至右，查找子串sub。找到返回索引，没找到抛出异常ValueError</li></ul></li></ul><p>&emsp;&emsp; s = “I am very very very sorry”<br>&emsp;&emsp; s.index(‘very’)<br>&emsp;&emsp; s.index(‘very’, 5)<br>&emsp;&emsp; s.index(‘very’, 6, 13)<br>&emsp;&emsp; s.rindex(‘very’, 10)<br>&emsp;&emsp; s.rindex(‘very’, 10, 15)<br>&emsp;&emsp; s.rindex(‘very’,-10,-1)  </p><h2 id="字符串查找-2"><a href="#字符串查找-2" class="headerlink" title="字符串查找"></a>字符串查找</h2><ul><li><p>时间复杂度</p><ul><li>index和count方法都是O(n)</li><li>随着列表数据规模的增大，而效率下降</li></ul></li><li><p>len(string)</p><ul><li>返回字符串的长度，即字符的个数，O(1)</li></ul></li></ul><h2 id="字符串查找-3"><a href="#字符串查找-3" class="headerlink" title="字符串查找"></a>字符串查找</h2><ul><li>count(sub[, start[, end]]) -&gt; int<ul><li>在指定的区间[start, end)，从左至右，统计子串sub出现的次数</li></ul></li></ul><p>&emsp;&emsp; s = “I am very very very sorry”<br>&emsp;&emsp; s.count(‘very’)<br>&emsp;&emsp; s.count(‘very’, 5)<br>&emsp;&emsp; s.count(‘very’, 10, 14)</p><h2 id="字符串判断"><a href="#字符串判断" class="headerlink" title="字符串判断*"></a>字符串判断*</h2><ul><li>endswith(suffix[, start[, end]]) -&gt; bool<ul><li>在指定的区间[start, end)，字符串是否是suffix结尾</li></ul></li><li>startswith(prefix[, start[, end]]) -&gt; bool<ul><li>在指定的区间[start, end)，字符串是否是prefix开头</li></ul></li></ul><p>&emsp;&emsp; s = “I am very very very sorry”<br>&emsp;&emsp; s.startswith(‘very’)<br>&emsp;&emsp; s.startswith(‘very’, 5)<br>&emsp;&emsp; s.startswith(‘very’, 5, 9)<br>&emsp;&emsp; s.endswith(‘very’, 5, 9)<br>&emsp;&emsp; s.endswith(‘sorry’, 5)<br>&emsp;&emsp; s.endswith(‘sorry’, 5, -1)<br>&emsp;&emsp; s.endswith(‘sorry’, 5, 100)  </p><h2 id="字符串判断-is系列"><a href="#字符串判断-is系列" class="headerlink" title="字符串判断 is系列"></a>字符串判断 is系列</h2><ul><li><p>isalnum() -&gt; bool 是否是字母和数字组成</p><ul><li>isalpha() 是否是字母</li></ul></li><li><p>isdecimal() 是否只包含十进制数字</p><ul><li>isdigit() 是否全部数字(0~9)</li></ul></li><li><p>isidentifier() 是不是字母和下划线开头，其他都是字母、数字、下划线</p><ul><li>islower() 是否都是小写</li><li>isupper() 是否全部大写</li><li>isspace() 是否只包含空白字符</li></ul></li></ul><h2 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h2><ul><li><p>字符串的格式化是一种拼接字符串输出样式的手段，更灵活方便</p><ul><li>join 拼接只能使用分隔符，且要求被拼接的是可迭代对象</li><li>+ 拼接字符串还算方便，但是非字符串需要先转换为字符串才能拼接</li></ul></li><li><p>在2.5版本之前，只能使用printf style风格的print输出</p><ul><li><p>printf-style formatting，来自于C语言的printf函数</p></li><li><p>格式要求</p><ul><li>占位符：使用%和格式字符组成，例如%s、%d等<ul><li>s调用str()，r会调用repr()。所有对象都可以被这两个转换。</li></ul></li><li>占位符中还可以插入修饰字符，例如%03d表示打印3个位置，不够前面补零</li><li>format % values，格式字符串和被格式的值之间使用%分隔</li><li>values只能是一个对象，或是一个和格式字符串占位符数目相等的元组</li></ul></li></ul></li></ul><h2 id="字符串格式化-1"><a href="#字符串格式化-1" class="headerlink" title="字符串格式化"></a>字符串格式化</h2><ul><li>printf-style formatting 举例</li></ul><p>&emsp;&emsp; “I am %03d” % (20,)<br>&emsp;&emsp; ‘I like %s.’ % ‘Python’<br>&emsp;&emsp; ‘%3.2f%% , 0x%x, 0X%02X’ % (89.7654, 10, 15)<br>&emsp;&emsp; “I am %-5d” % (20,)<br>&emsp;&emsp; 3 是显示的最小总宽度，2 是小数点后的位数(如果可用的话)<br>&emsp;&emsp; - 号表示左对齐，默认是有对齐.</p><h2 id="字符串格式化-2"><a href="#字符串格式化-2" class="headerlink" title="字符串格式化***"></a>字符串格式化***</h2><ul><li><p>format函数格式字符串语法——Python鼓励使用</p><ul><li><p>“{} {xxx}”.format(*args, **kwargs) -&gt; str</p></li><li><p>args是位置参数，是一个元组</p></li><li><p>kwargs是关键字参数，是一个字典</p></li><li><p>花括号表示占位符</p></li><li><p>{}表示按照顺序匹配位置参数，{n}表示取位置参数索引为n的值</p></li><li><p>{xxx}表示在关键字参数中搜索名称一致的</p></li><li><p> {{}} 表示打印花括号</p></li></ul></li></ul><h2 id="字符串格式化-3"><a href="#字符串格式化-3" class="headerlink" title="字符串格式化***"></a>字符串格式化***</h2><ul><li><p>位置参数<br>“{}:{}”.format(‘192.168.1.100’,8888)，这就是按照位置顺序用位置参数替换前面的格式字符串的占位符中</p></li><li><p>关键字参数或命名参数<br>“{server} {1}:{0}”.format(8888, ‘192.168.1.100’, server=’Web Server Info : ‘) ，位置参数按照序号匹配，关键字参数按照名词匹配</p></li><li><p>访问元素<br>“{0[0]}.{0[1]}”.format((‘github’,’com’))</p></li><li><p>对象属性访问<br>from collections import namedtuple<br>Point = namedtuple(‘Point’,’x y’)<br>p = Point(4,5)<br>“{{{0.x},{0.y}}}“.format(p)  </p></li><li><p>有了这些字符串格式化方法，字符串拼接可以丢弃了。</p></li></ul><h2 id="字符串格式化-4"><a href="#字符串格式化-4" class="headerlink" title="字符串格式化***"></a>字符串格式化***</h2><ul><li><p>对齐<br>‘{0}*{1}={2:&lt;2}’.format(3,2,2*3)<br>‘{0}*{1}={2:&lt;02}’.format(3,2,2*3)<br>‘{0}*{1}={2:&gt;02}’.format(3,2,2*3)<br>‘{:^30}’.format(‘centered’)<br>‘{:*^30}’.format(‘centered’)  </p></li><li><p>进制<br>“int: {0:d}; hex: {0:x}; oct: {0:o}; bin: {0:b}”.format(42)<br>“int: {0:d}; hex: {0:#x}; oct: {0:#o}; bin: {0:#b}”.format(42)<br>octets = [192, 168, 0, 1]<br>‘{:02X}{:02X}{:02X}{:02X}’.format(<em>octets)<br>\</em> 是参数解构，分解为4个元素  </p></li></ul><h2 id="字符串格式化-5"><a href="#字符串格式化-5" class="headerlink" title="字符串格式化***"></a>字符串格式化***</h2><p><strong>请使用format函数格式化字符串</strong></p><h2 id="字符串练习"><a href="#字符串练习" class="headerlink" title="字符串练习"></a>字符串练习</h2><ul><li>用户输入一个数字<ul><li>判断是几位数</li><li>打印每一位数字及其重复的次数</li><li>依次打印每一位数字，顺序个、十、百、千、万…位</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="string">""</span> <span class="comment"># 这里不写，下面的num也不会出错，在python作用域是能访问到的，但是不写不好</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    num  = input(<span class="string">"Please input a interger: "</span>).strip()</span><br><span class="line">    <span class="keyword">if</span> num.isdigit():</span><br><span class="line">        num = int(num) <span class="comment"># 把前导0也删除，或 lstrip('0')</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"Bad number."</span>)</span><br><span class="line"></span><br><span class="line">count [<span class="number">0</span>] * <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    count[i] = num.count(str(i))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">if</span> count[i]:</span><br><span class="line">        print(i, count[i])</span><br><span class="line">lst = list(num)</span><br><span class="line">lst.reverse()</span><br><span class="line">print(lst)</span><br></pre></td></tr></table></figure><ul><li>输入5个数字，打印每个数字的位数，将这些数字排序打印，要求升序打印<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">lst = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    m = input(<span class="string">"&gt;&gt;&gt;"</span>).strip().lstrip(<span class="string">"0"</span>)</span><br><span class="line">    print(<span class="string">"这是&#123;&#125;位数"</span>.format(len(m)))</span><br><span class="line"></span><br><span class="line">    lst.append(int(m))</span><br><span class="line"><span class="comment"># print(sorted(lst))</span></span><br><span class="line">lst.sort()</span><br><span class="line">print(lst)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第三章-Python-内置数据结构&quot;&gt;&lt;a href=&quot;#第三章-Python-内置数据结构&quot; class=&quot;headerlink&quot; title=&quot;第三章 - Python 内置数据结构&quot;&gt;&lt;/a&gt;第三章 - Python 内置数据结构&lt;/h1&gt;&lt;h2 id=&quot;字
      
    
    </summary>
    
      <category term="python-magedu" scheme="https://herodanny.github.io/categories/python-magedu/"/>
    
    
      <category term="python" scheme="https://herodanny.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python全栈-magedu-2018-笔记4</title>
    <link href="https://herodanny.github.io/python-magedu-2018-notes4.html"/>
    <id>https://herodanny.github.io/python-magedu-2018-notes4.html</id>
    <published>2019-04-25T06:04:39.000Z</published>
    <updated>2019-04-26T14:57:00.243Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第三章-Python-内置数据结构"><a href="#第三章-Python-内置数据结构" class="headerlink" title="第三章 - Python 内置数据结构"></a>第三章 - Python 内置数据结构</h1><h2 id="元组tuple"><a href="#元组tuple" class="headerlink" title="元组tuple"></a>元组tuple</h2><ul><li>一个有序的元素组成的集合<ul><li>使用小括号 ( ) 表示</li><li>元组是<strong>不可变</strong>对象</li></ul></li></ul><h2 id="元组的定义-初始化"><a href="#元组的定义-初始化" class="headerlink" title="元组的定义 初始化"></a>元组的定义 初始化</h2><ul><li>定义<ul><li>tuple() -&gt; empty tuple</li><li>tuple(iterable) -&gt; tuple initialized from iterable’s item</li></ul></li></ul><p>&emsp;&emsp; t = tuple() # 工厂方法，空元组是不能插入的<br>&emsp;&emsp; t = ()<br>&emsp;&emsp; t = tuple(range(1,7,2)) # iteratable<br>&emsp;&emsp; t = (2,4,6,3,4,2)<br>&emsp;&emsp; t = (1,) # 一个元素元组的定义，注意有个逗号<br>&emsp;&emsp; t = (1,)<em>5<br>&emsp;&emsp; t = (1,2,3) </em> 6<br>&emsp;&emsp; 元组就像个只读列表，好处就是比列表占用空间少。<br>&emsp;&emsp; t1 = (1, [2, 3], 4)<br>&emsp;&emsp; t1[1][0] = 10</p><h2 id="元组元素的访问"><a href="#元组元素的访问" class="headerlink" title="元组元素的访问"></a>元组元素的访问</h2><ul><li>支持索引（下标）</li><li>正索引：从左至右，从0开始，为列表中每一个元素编号</li><li>负索引：从右至左，从-1开始</li><li><p>正负索引不可以超界，否则引发异常IndexError</p></li><li><p>元组通过索引访问</p><ul><li>tuple[index] ，index就是索引，使用中括号访问</li></ul></li></ul><p>&emsp;&emsp; t[1]<br>&emsp;&emsp; t[-2]<br>&emsp;&emsp; t[1] = 5  </p><h2 id="元组查询"><a href="#元组查询" class="headerlink" title="元组查询"></a>元组查询</h2><ul><li><p>index(value,[start,[stop]])</p><ul><li>通过值value，从指定区间查找列表内的元素是否匹配</li><li>匹配第一个就立即返回索引</li><li>匹配不到，抛出异常ValueError</li></ul></li><li><p>count(value)</p><ul><li>返回列表中匹配value的次数</li></ul></li><li><p>时间复杂度</p><ul><li>index和count方法都是O(n)</li><li>随着列表数据规模的增大，而效率下降</li></ul></li><li><p>len(tuple)</p><ul><li>返回元素的个数</li></ul></li></ul><h2 id="元组其它操作"><a href="#元组其它操作" class="headerlink" title="元组其它操作"></a>元组其它操作</h2><ul><li>元组是只读的，所以增、改、删方法都没有</li></ul><h2 id="命名元组namedtuple"><a href="#命名元组namedtuple" class="headerlink" title="命名元组namedtuple"></a>命名元组namedtuple</h2><ul><li>帮助文档中，查阅namedtuple，有使用例程</li><li>namedtuple(typename, field_names, verbose=False, rename=False)<ul><li>命名元组，返回一个元组的子类，并定义了字段</li><li>field_names可以是空白符或逗号分割的字段的字符串，可以是字段的列表</li></ul></li></ul><p>&emsp;&emsp; from collections import namedtuple<br>&emsp;&emsp; Point = namedtuple(‘_Point’,[‘x’,’y’]) # Point为返回的类<br>&emsp;&emsp; p = Point(11, 22)  </p><p>&emsp;&emsp; Student = namedtuple(‘Student’, ‘name age’)<br>&emsp;&emsp; tom = Student(‘tom’, 20)<br>&emsp;&emsp; jerry = Student(‘jerry’, 18)<br>&emsp;&emsp; tom.name  </p><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><ul><li>依次接收用户输入的3个数，排序后打印<ul><li><ol><li>转换int后，判断大小排序。使用分支结构完成</li></ol></li><li><ol start="2"><li>使用max函数</li></ol></li><li><ol start="3"><li>使用列表的sort方法</li></ol></li><li><ol start="4"><li>冒泡法</li></ol></li></ul></li></ul><h2 id="冒泡法"><a href="#冒泡法" class="headerlink" title="冒泡法"></a>冒泡法</h2><ul><li><p>冒泡法</p><ul><li>属于交换排序</li><li>两两比较大小，交换位置。如同水泡咕嘟咕嘟往上冒</li><li>结果分为升序和降序排列</li></ul></li><li><p>升序</p><ul><li>n个数从左至右，编号从0开始到n-1，索引0和1的值比较，如果索引0大，则交换两者位置，如果索引1大，则不交换。继续比较索引1和2的值，将大值放在右侧。直至n-2和n-1比较完，第一轮比较完成。第二轮从索引0比较到n-2，因为最右侧n-1位置上已经是最大值了。依次类推，每一轮都会减少最右侧的不参与比较，直至剩下最后2个数比较。</li></ul></li><li><p>降序</p><ul><li>和升序相反</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">num_list = [[<span class="number">1</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">3</span> ,<span class="number">2</span>],</span><br><span class="line">            [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>],</span><br><span class="line">            [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">8</span>]]</span><br><span class="line"></span><br><span class="line">nums = num_list[<span class="number">2</span>]</span><br><span class="line">print(nums)</span><br><span class="line">length = len(nums)</span><br><span class="line">count_swap = <span class="number">0</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="comment"># bubble_sort</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(length): <span class="comment"># 有n个数要排序</span></span><br><span class="line">    flag = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(length-i<span class="number">-1</span>): <span class="comment"># 比较的次数</span></span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> nums[j] &gt; nums[j+<span class="number">1</span>]:</span><br><span class="line">            tmp = nums[j]</span><br><span class="line">            nums[j] = nums[j+<span class="number">1</span>]</span><br><span class="line">            nums[j+<span class="number">1</span>] = tmp</span><br><span class="line">            flag = <span class="literal">True</span> <span class="comment"># swapped</span></span><br><span class="line">            count_swap += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> flag:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">print(nums, count_swap, count)</span><br></pre></td></tr></table></figure><h2 id="冒泡法总结"><a href="#冒泡法总结" class="headerlink" title="冒泡法总结"></a>冒泡法总结</h2><ul><li>冒泡法需要数据一轮轮比较</li><li>可以设定一个标记判断此轮是否有数据交换发生，如果没有发生交换，可以结束排序，如果发生交换，继续下一轮排序</li><li>最差的排序情况是，初始顺序与目标顺序完全相反，遍历次数1,…,n-1之和n(n-1)/2</li><li>最好的排序情况是，初始顺序与目标顺序完全相同，遍历次数n-1</li><li>时间复杂度O(n2)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第三章-Python-内置数据结构&quot;&gt;&lt;a href=&quot;#第三章-Python-内置数据结构&quot; class=&quot;headerlink&quot; title=&quot;第三章 - Python 内置数据结构&quot;&gt;&lt;/a&gt;第三章 - Python 内置数据结构&lt;/h1&gt;&lt;h2 id=&quot;元
      
    
    </summary>
    
      <category term="python-magedu" scheme="https://herodanny.github.io/categories/python-magedu/"/>
    
    
      <category term="python" scheme="https://herodanny.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python全栈-magedu-2018-笔记3</title>
    <link href="https://herodanny.github.io/python-magedu-2018-notes3.html"/>
    <id>https://herodanny.github.io/python-magedu-2018-notes3.html</id>
    <published>2019-04-24T13:00:30.000Z</published>
    <updated>2019-04-25T07:32:25.797Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第三章-Python-内置数据结构"><a href="#第三章-Python-内置数据结构" class="headerlink" title="第三章 - Python 内置数据结构"></a>第三章 - Python 内置数据结构</h1><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul><li><p>数值型</p><ul><li>int、float、complex、bool  </li></ul></li><li><p>序列对象</p><ul><li>字符串 str</li><li>列表 list</li><li>tuple</li></ul></li><li><p>键值对</p><ul><li>集合set</li><li>字典dict</li></ul></li></ul><h2 id="数值型"><a href="#数值型" class="headerlink" title="数值型"></a>数值型</h2><ul><li><p>数值型</p><ul><li>int、float、complex、bool都是class，1、5.0、2+3j都是对象即实例</li><li>int：python3的int就是长整型，且没有大小限制，受限于内存区域的大小</li><li>float：有整数部分和小数部分组成。支持十进制和科学计数法表示。只有双精度型。</li><li>complex：有实数和虚数部分组成，实数和虚数部分都是浮点数，3+4.2J</li><li>bool：int的子类，仅有2个实例True、False对应1和0，可以和整数直接运算</li></ul></li><li><p>类型转换（built-in）</p><ul><li>int(x) 返回一个整数 ，int是与类型名相同的内置转换函数，如果字符串不合法抛出异常</li><li>float(x) 返回一个浮点数</li><li>complex(x)、complex(x,y) 返回一个复数</li><li>bool(x) 返回布尔值，前面讲过False等价的对象</li></ul></li></ul><h2 id="数字的处理函数"><a href="#数字的处理函数" class="headerlink" title="数字的处理函数"></a>数字的处理函数</h2><ul><li>round()，四舍五入？六入四舍五取偶</li><li>math模块、floor()地板、天花板ceil()</li><li>int() 、//</li><li>举例：<br>&emsp; import math<br>&emsp; print(math.floor(2.5), math.floor(-2.5))<br>&emsp; print(math.ceil(2.5), math.ceil(-2.5))  </li></ul><p>&emsp; 以下打印什么结果？说明什么<br>&emsp; print(int(-3.6), int(-2.5), int(-1.4))<br>&emsp; print(int(3.6), int(2.5), int(1.4))<br>&emsp; print(7//2, 7//-2, -7//2, -(7//2))<br>&emsp; print(2//3, -2//3, -1//3)<br>&emsp; print(round(2.5), round(2.5001), round(2.6))<br>&emsp; print(round(3.5), round(3.5001), round(3.6), round(3.3))<br>&emsp; print(round(-2.5), round(-2.5001), round(-2.6))<br>&emsp; print(round(-3.5), round(-3.5001), round(-3.6), round(-3.3))  </p><ul><li>round()，四舍六入五取偶</li><li>floor()向下取整、ceil()向上取整</li><li>int() 取整数部分</li><li><p>// 整除且向下取整</p></li><li><p>min()</p></li><li>max()</li><li>pow(x,y) 等于 x**y</li><li><p>math.sqrt()</p></li><li><p>进制函数，返回值是字符串</p><ul><li>bin()</li><li>oct()</li><li>hex()</li></ul></li><li><p>math.pi π</p></li><li>math.e 自如常数</li></ul><h2 id="类型判断"><a href="#类型判断" class="headerlink" title="类型判断"></a>类型判断</h2><ul><li>type(obj) ，返回类型，而不是字符串  </li><li>isinstance(obj, class_or_tuple)，返回布尔值  </li><li><p>举例：  </p><ul><li>type(a)</li><li>type(‘abc’)</li><li>type(123)</li><li>isinstance(6, str)、type(6) == str</li><li>isinstance(6, (str, bool, int))</li></ul></li><li><p>type(1+True)  # bool型是int的子类</p></li><li>type(1+True+2.0) # 是什么？隐式转换 # 都是数值类型，往高精度转</li></ul><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ul><li>一个队列，一个排列整齐的队伍</li><li>列表内的个体称作元素，由若干元素组成列表</li><li>元素可以是任意对象（数字、字符串、对象、列表等）</li><li>列表内元素有顺序，可以使用索引</li><li>线性的数据结构</li><li>使用 [ ] 表示</li><li>列表是<strong>可变</strong>的</li><li>列表list、链表、queue、stack的差异</li></ul><h2 id="列表list定义-初始化"><a href="#列表list定义-初始化" class="headerlink" title="列表list定义 初始化"></a>列表list定义 初始化</h2><p>赋值即定义，这也是静态语言和动态语言的区别。  </p><ul><li>list() -&gt; new empty list</li><li>list(iterable) -&gt; new list initialized from iterable’s items</li><li>列表不能一开始就定义大小</li></ul><p>&emsp;&emsp; lst = list()<br>&emsp;&emsp; lst = []<br>&emsp;&emsp; lst = [2, 6, 9, ‘ab’]<br>&emsp;&emsp; lst = list(range(5))  </p><h2 id="列表索引访问"><a href="#列表索引访问" class="headerlink" title="列表索引访问"></a>列表索引访问</h2><ul><li>索引，也叫下标</li><li>正索引：从左至右，从0开始，为列表中每一个元素编号</li><li>负索引：从右至左，从-1开始</li><li>正负索引不可以超界，否则引发异常IndexError</li><li>为了理解方便，可以认为列表是从左至右排列的，左边是头部，右边是尾部，左边是下界，右边是上界</li><li>列表通过索引访问<ul><li>list[index] ，index就是索引，使用中括号访问</li></ul></li></ul><h2 id="列表查询"><a href="#列表查询" class="headerlink" title="列表查询"></a>列表查询</h2><ul><li><p>index(value,[start,[stop]])</p><ul><li>通过值value，从指定区间查找列表内的元素是否匹配</li><li>匹配第一个就立即返回索引</li><li>匹配不到，抛出异常ValueError</li></ul></li><li><p>count(value)</p><ul><li>返回列表中匹配value的次数</li></ul></li><li><p>时间复杂度</p><ul><li>index和count方法都是O(n)</li><li>随着列表数据规模的增大，而效率下降</li></ul></li><li><p>如何返回列表元素的个数？如何遍历？如何设计高效？</p><ul><li>len()</li></ul></li></ul><h2 id="如何查帮助"><a href="#如何查帮助" class="headerlink" title="如何查帮助"></a>如何查帮助</h2><ul><li><p>官方帮助文档</p><ul><li>搜索关键字</li></ul></li><li><p>IPython中</p><ul><li>help(keyword)</li><li>keyword可以是变量、对象、类名、函数名、方法名</li></ul></li></ul><h2 id="列表元素修改"><a href="#列表元素修改" class="headerlink" title="列表元素修改"></a>列表元素修改</h2><ul><li>索引访问修改<ul><li>list[index] = value</li><li>索引不要超界</li></ul></li></ul><h2 id="列表增加、插入元素"><a href="#列表增加、插入元素" class="headerlink" title="列表增加、插入元素"></a>列表增加、插入元素</h2><ul><li><p>append(object) -&gt; None</p><ul><li>列表尾部追加元素，返回None</li><li>返回None就意味着没有新的列表产生，就地修改</li><li>时间复杂度是O(1)，因为直接可以索引到结尾添加</li></ul></li><li><p>insert(index, object) -&gt; None</p><ul><li>在指定的索引index处插入元素object</li><li>返回None就意味着没有新的列表产生，就地修改</li><li>时间复杂度是O(n)，因为会调整内存布局</li><li>索引能超上下界吗？</li><li>超越上界，尾部追加</li><li>超越下界，头部追加</li></ul></li></ul><h2 id="列表增加、插入元素-1"><a href="#列表增加、插入元素-1" class="headerlink" title="列表增加、插入元素"></a>列表增加、插入元素</h2><ul><li><p>extend(iteratable) -&gt; None</p><ul><li>将可迭代对象的元素追加进来，返回None</li><li>就地修改</li></ul></li><li><p>+ -&gt; list</p><ul><li>连接操作，将两个列表连接起来</li><li>产生新的列表，原列表不变</li><li>本质上调用的是<strong>add</strong>()方法</li></ul></li><li><p>* -&gt; list</p><ul><li>重复操作，将本列表元素重复n次，返回新的列表</li></ul></li></ul><h2 id="列表-重复的坑"><a href="#列表-重复的坑" class="headerlink" title="列表 *重复的坑"></a>列表 *重复的坑</h2><ul><li>* -&gt; list  <ul><li>重复操作，将本列表元素重复n次，返回新的列表  </li></ul></li></ul><p>&emsp;&emsp; x = [[1,2,3]]*3<br>&emsp;&emsp; print(x)<br>&emsp;&emsp; x[0][1] = 20<br>&emsp;&emsp; print(x)  </p><p>&emsp;&emsp; y = [1]*5<br>&emsp;&emsp; y[0] = 6<br>&emsp;&emsp; y[1] = 7<br>&emsp;&emsp; print(y)<br>&emsp;&emsp; 上面代码运行结果是什么？为什么？</p><h2 id="列表删除元素"><a href="#列表删除元素" class="headerlink" title="列表删除元素"></a>列表删除元素</h2><ul><li><p>remove(value) -&gt; None</p><ul><li>从左至右查找第一个匹配value的值，移除该元素，返回None</li><li>就地修改</li><li>效率？</li></ul></li><li><p>pop([index]) -&gt; item</p><ul><li>不指定索引index，就从列表尾部弹出一个元素</li><li>指定索引index，就从索引处弹出一个元素，索引超界抛出IndexError错误</li><li>效率？指定索引的的时间复杂度？不指定索引呢？</li></ul></li><li><p>clear() -&gt; None</p><ul><li>清除列表所有元素，剩下一个空列表（一批元素不要，可能会引起垃圾回收gc）</li></ul></li></ul><h2 id="列表其它操作"><a href="#列表其它操作" class="headerlink" title="列表其它操作"></a>列表其它操作</h2><ul><li><p>reverse() -&gt; None</p><ul><li>将列表元素<strong>反转</strong>，返回None</li><li>就地修改</li></ul></li><li><p>sort(key=None, reverse=False) -&gt; None</p><ul><li>只写一个参数，匹配的是第一个参数，要匹配第二个参数，要指明参数名字，这么写 lst.sort(reverse=True) </li><li>对列表元素进行<strong>排序</strong>，就地修改，默认升序</li><li>reverse为True，反转，降序</li><li>key一个函数，指定key如何排序<ul><li>lst.sort(key=functionname)</li></ul></li></ul></li><li><p>in</p><ul><li>[3,4] in [1, 2, [3,4]]</li><li>for x in [1,2,3,4]</li></ul></li><li><p>not in</p></li></ul><h2 id="列表复制"><a href="#列表复制" class="headerlink" title="列表复制"></a>列表复制</h2><ul><li>先看一段代码  </li></ul><p>&emsp;&emsp; lst0 = list(range(4))<br>&emsp;&emsp; lst2 = list(range(4))<br>&emsp;&emsp; print(lst0 == lst2)<br>&emsp;&emsp; lst1 = lst0<br>&emsp;&emsp; lst1[2] = 10<br>&emsp;&emsp; print(lst0)  </p><p>&emsp;&emsp; lst0 == lst2相等吗？为什么？lst0里面存的是什么？<br>&emsp;&emsp; == 比较的是对象的内容 (True)<br>&emsp;&emsp; is 比较的是对象的地址 (False) 即 id(lst0) == id(lst2)<br>&emsp;&emsp; 这里虽然都是创建 list(range(4)) 这个对象，解释器并没有优化为只创建一个  </p><p>&emsp;&emsp; 请问lst0的索引为2的元素的值是什么？<br>&emsp;&emsp; 请问lst1 = lst0这个过程中有没有复制过程？  </p><h2 id="列表复制-1"><a href="#列表复制-1" class="headerlink" title="列表复制"></a>列表复制</h2><ul><li>copy() -&gt; List<ul><li>shadow copy返回一个新的列表</li></ul></li></ul><p>&emsp;&emsp; lst0 = list(range(4))<br>&emsp;&emsp; lst5 = lst0.copy()<br>&emsp;&emsp; id(lst0) 和 id(lst5) 是不同的 ，与 lst5=lst0 还是不一样的<br>&emsp;&emsp; copy是把原列表的item复制到一个片新内存，创建一个新列表<br>&emsp;&emsp; print(lst5 == lst0)<br>&emsp;&emsp; lst5[2] = 10<br>&emsp;&emsp; print(lst5 == lst0)<br>&emsp;&emsp; lst0和lst5一样吗？  </p><ul><li>对比前面程序的差别  </li></ul><p>&emsp;&emsp; lst0 = [1, [2, 3, 4], 5]<br>&emsp;&emsp; lst5 = lst0.copy()<br>&emsp;&emsp; lst5 == lst0<br>&emsp;&emsp; lst5[2] = 10<br>&emsp;&emsp; lst5 == lst0<br>&emsp;&emsp; lst5[2] = 5<br>&emsp;&emsp; lst5[1][1] = 20<br>&emsp;&emsp; lst5 == lst0<br>&emsp;&emsp; list中间元素是个复杂元素，所以copy时只拷贝了它的引用，即它的地址。所以在一边修改之后，另一边也一同修改了。  </p><h2 id="列表复制-2"><a href="#列表复制-2" class="headerlink" title="列表复制"></a>列表复制</h2><ul><li><p>shadow copy</p><ul><li>影子拷贝，也叫浅拷贝，遇到引用类型，只是复制了一个引用而已</li></ul></li><li><p>深拷贝</p><ul><li>copy模块提供了deepcopy  </li></ul></li></ul><p>&emsp;&emsp;&emsp;&emsp; import copy<br>&emsp;&emsp;&emsp;&emsp; lst0 = [1, [2, 3, 4], 5]<br>&emsp;&emsp;&emsp;&emsp; lst5 = copy.deepcopy(lst0)<br>&emsp;&emsp;&emsp;&emsp; lst5[1][1] = 20<br>&emsp;&emsp;&emsp;&emsp; lst5 == lst0  </p><h2 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h2><ul><li>random模块</li><li>randint(a, b) 返回[a, b]之间的整数</li><li>choice(seq) 从非空序列的元素中随机挑选一个元素，比如random.choice(range(10))，从0到9中随机挑选一个整数。random.choice([1,3,5,7])</li><li>randrange ([start,] stop [,step]) 从指定范围内，按指定基数递增的集合中获取一个随机数，基数缺省值为1。 random.randrange(1,7,2)</li><li>random.shuffle(list) -&gt;None 就地打乱列表元素</li><li>sample(population, k) 从样本空间或总体（序列或者集合类型）中随机取出k个不同的元素，返回一个新的列表<ul><li>random.sample([‘a’, ‘b’, ‘c’, ‘d’], 2)</li><li>random.sample([‘a’, ‘a’], 2) 会返回什么结果</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第三章-Python-内置数据结构&quot;&gt;&lt;a href=&quot;#第三章-Python-内置数据结构&quot; class=&quot;headerlink&quot; title=&quot;第三章 - Python 内置数据结构&quot;&gt;&lt;/a&gt;第三章 - Python 内置数据结构&lt;/h1&gt;&lt;h2 id=&quot;分
      
    
    </summary>
    
      <category term="python-magedu" scheme="https://herodanny.github.io/categories/python-magedu/"/>
    
    
      <category term="python" scheme="https://herodanny.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python全栈-magedu-2018-笔记2</title>
    <link href="https://herodanny.github.io/python-magedu-2018-notes2.html"/>
    <id>https://herodanny.github.io/python-magedu-2018-notes2.html</id>
    <published>2019-04-20T15:48:58.000Z</published>
    <updated>2019-04-25T07:32:01.809Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第二章-Python-基础语法"><a href="#第二章-Python-基础语法" class="headerlink" title="第二章 - Python 基础语法"></a>第二章 - Python 基础语法</h1><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><ul><li><p>注释 —— # 标注的文本</p></li><li><p>数字</p><ul><li>整数，不区分long和int<ul><li>进制0xa、0o10、0b10</li><li>bool，2个值True、False</li></ul></li><li>浮点数<ul><li>1.2、3.1415、-0.12，1.46e9等价于1.46*109</li></ul></li><li>复数，1+2j</li></ul></li><li><p>字符串</p><ul><li>使用 ‘ “ 单双引号引用的字符的序列</li><li>‘’’和””” 单双三引号，可以跨行、可以在其中自由的使用单双引号</li><li>在字符串前面加上r或者R前缀，表示该字符串不做特殊的处理</li></ul></li><li><p>转义序列</p><ul><li><code>\\ \t \r \n \&#39; \&quot;</code></li><li>前缀r，把里面的所有字符当普通字符对待</li></ul></li><li><p>缩进</p><ul><li>未使用C等语言的花括号，而是采用缩进的方式表示层次关系</li><li>约定使用4个空格缩进</li></ul></li><li><p>续行</p><ul><li>在行尾使用 \</li><li>如果使用各种括号，认为括号内是一个整体，内部跨行不用 \</li></ul></li><li><p>标识符</p><ol><li>一个名字，用来指代一个值</li><li>只能字母、下划线和数字</li><li>只能以字母或下划线开头</li><li>不能是python的关键字，例如def、class就不能作为标识符</li><li>Python是大小写敏感的</li></ol></li><li><p>约定：  </p><ul><li>不允许使用中文  </li><li>不允许使用歧义单词，例如class_  </li><li>在python中不要随便使用下划线开头的表示符  </li></ul></li><li><p>常量</p><ul><li>一旦赋值就不能改变值的标识符</li><li>python中无法定义常量</li></ul></li><li><p>字面常量</p><ul><li>一个单独的量，例如 12、”abc” 、’2341356514.03e-9’</li></ul></li><li><p>变量</p><ul><li>赋值后，可以改变值的标识符</li></ul></li></ul><h2 id="Python的语言类型"><a href="#Python的语言类型" class="headerlink" title="Python的语言类型"></a>Python的语言类型</h2><ul><li><p>Python是动态语言、强类型语言</p></li><li><p>静态编译语言</p><ul><li>实现声明变量类型，类型不能再改变</li><li>编译时检查</li></ul></li><li><p>动态编译语言</p><ul><li>不用事先声明类型，随时可以赋值为其他类型</li><li>编程时不知道是什么类型，很难推断</li></ul></li><li><p>强类型语言</p><ul><li>不同类型之间操作，必须先强制类型转换为同一类型。print(‘a’+1)</li></ul></li><li><p>弱类型语言</p><ul><li>不同类型间可以操作，自动隐式转换，JavaScript中console.log(1+’a’)</li></ul></li></ul><h2 id="运算符-Operator"><a href="#运算符-Operator" class="headerlink" title="运算符 Operator"></a>运算符 Operator</h2><ul><li><p>算数运算符</p><ul><li>+ - * / % **</li><li>自然除/结果是浮点数，整除//。注：2.x中/和//都是整除</li></ul></li><li><p>位运算符</p><ul><li>&amp; | ~ ^ &lt;&lt; &gt;&gt;</li><li>常用方式：乘除2的倍数，32 // 4相当于 32 &gt;&gt; 2</li><li>12，0xc，0o14，0b1100<ul><li>~12等于多少，为什么</li></ul></li></ul></li></ul><h2 id="原码、反码、补码，负数表示法"><a href="#原码、反码、补码，负数表示法" class="headerlink" title="原码、反码、补码，负数表示法"></a>原码、反码、补码，负数表示法</h2><ul><li><p>原码</p><ul><li>5 =&gt; 0b101，1 =&gt; 0b1 ，-1 =&gt; -0b1， bin(-1)</li></ul></li><li><p>反码</p><ul><li>正数的反码与原码相同；负数的反码符号位不变其余按位取反</li></ul></li><li><p>补码</p><ul><li>正数的补码与原码相同；负数的补码符号位不变其余按位取反后+1<br>有符号数才用补码表示</li></ul></li><li><p>负数表示法</p><ul><li>数字电路的CPU中的运算器实现了加法器，但是没有减法器，减法是转换成加法</li><li>负数在计算机中使用补码存储，-1的补码为1111 1111</li><li>5-1 =&gt; 5+(-1)直觉上是0b101-0b1，其实计算机中是0b101+0b11111111，溢出位舍弃</li><li>~12为什么是-13？</li><li>10^9 等于？ 10^-9等于？为什么</li></ul></li></ul><p>&#160;&#160;&#160;&#160;  5 的补码 0000 0101<br>&#160;&#160;&#160;&#160;  -1 的原码 1000 0001<br>&#160;&#160;&#160;&#160;  -1 的补码 1111 1111  (0xff)<br>&#160;&#160;&#160;&#160;  5-1得 0000 0100</p><p>&#160;&#160;&#160;&#160; 12 的补码  0000 1100<br>&#160;&#160;&#160;&#160; ~12 是 1111 0011<br>&#160;&#160;&#160;&#160; 怎么从补码得到原码？<br>&#160;&#160;&#160;&#160; 与得到补码是一样的，最高位不变，其他位取反加一，即补码的补码就是原码<br>&#160;&#160;&#160;&#160; 1000 1101 (即-13)</p><ul><li><p>比较运算符</p><ul><li>== != &gt; &lt; &gt;= &lt;=</li><li>返回一个bool值</li><li>1 &lt; ‘1’ &#160; 报错 &#160;&#160;&#160;&#160;&#160; 1 == ‘1’ &#160; False</li><li>== 是可以不同类型比较的，除非 大于、小于等做类型重载，不然是不能比较的</li><li>链式比较操作符<ul><li>4&gt;3&gt;2  &#160;&#160;&#160;&#160;&#160;  4&gt;mynumber&gt;=1</li></ul></li></ul></li><li><p>逻辑运算符</p><ul><li>与或非 and or not</li><li>短路运算符<ul><li>and 如果第一个表达式为False，后面就没有必要计算了，这个逻辑表达式一定是False</li><li>or 如果第一个表达式True，后面没有必要计算了，这个逻辑表达式一定是True</li></ul></li></ul></li><li><p>赋值运算符</p><ul><li>a = min(3,5)</li><li>+= -= *= /= %= 等</li><li>x = y = z = 10<ul><li>尽量少用连等，因为如果右边是个引用就麻烦了</li></ul></li></ul></li><li><p>成员运算符</p><ul><li>in、not in</li></ul></li><li><p>身份运算符</p><ul><li>is 、is not</li></ul></li></ul><h2 id="运算符优先级（由高到低）"><a href="#运算符优先级（由高到低）" class="headerlink" title="运算符优先级（由高到低）"></a>运算符优先级（由高到低）</h2><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">‘expr’</td><td style="text-align:left">字符串转换</td></tr><tr><td style="text-align:left">{key:expr}</td><td style="text-align:left">字典</td></tr><tr><td style="text-align:left">[expr1, expr2, …]</td><td style="text-align:left">列表</td></tr><tr><td style="text-align:left">(expr1, expr2, …)</td><td style="text-align:left">元组</td></tr><tr><td style="text-align:left">function(expr, …)</td><td style="text-align:left">函数调用</td></tr><tr><td style="text-align:left">x[index:index]</td><td style="text-align:left">切片</td></tr><tr><td style="text-align:left">x[index]</td><td style="text-align:left">下标索引值</td></tr><tr><td style="text-align:left">x.attribute</td><td style="text-align:left">属性引用</td></tr><tr><td style="text-align:left">~x</td><td style="text-align:left">按位取反</td></tr><tr><td style="text-align:left">+x, -x</td><td style="text-align:left">正，负</td></tr><tr><td style="text-align:left">x ** y</td><td style="text-align:left">幂</td></tr><tr><td style="text-align:left">x * y,  x / y,  x % y</td><td style="text-align:left">乘法,除,取模</td></tr><tr><td style="text-align:left">x + y, x - y</td><td style="text-align:left">加，减</td></tr><tr><td style="text-align:left">x &lt;&lt; y, x &gt;&gt; y</td><td style="text-align:left">移位</td></tr><tr><td style="text-align:left">x &amp; y</td><td style="text-align:left">按位与</td></tr><tr><td style="text-align:left">x ^ y</td><td style="text-align:left">按位异或</td></tr><tr><td style="text-align:left">x \</td><td style="text-align:left">y</td><td>按位或</td></tr><tr><td style="text-align:left">x &lt; y, x &lt;= y , x == y, x != y, x &gt;= y, x &gt; y</td><td style="text-align:left">比较</td></tr><tr><td style="text-align:left">x is y , x is not y</td><td style="text-align:left">等同测试</td></tr><tr><td style="text-align:left">x in y, x not in y</td><td style="text-align:left">成员测试</td></tr><tr><td style="text-align:left">not x</td><td style="text-align:left">逻辑否</td></tr><tr><td style="text-align:left">x and y</td><td style="text-align:left">逻辑与</td></tr><tr><td style="text-align:left">x or y</td><td style="text-align:left">逻辑或</td></tr><tr><td style="text-align:left">lambda arg, … : expr</td><td style="text-align:left">Lambda 匿名函数</td></tr></tbody></table><ul><li><p>算数运算符 &gt; 位运算符 &gt; 身份运算符 &gt; 成员运算符 &gt; 逻辑运算符 &gt; 赋值运算符</p><ul><li>位运算符也可以看成算术运算</li></ul></li><li><p>记不住，用括号</p></li><li><p>长表达式，多用括号，易懂、易读</p></li></ul><h2 id="表达式-Expression"><a href="#表达式-Expression" class="headerlink" title="表达式 Expression"></a>表达式 Expression</h2><ul><li>由数字、符号、括号、变量等的组合<ul><li>算数表达式</li><li>逻辑表达式</li><li>赋值表达式<ul><li>Python中，赋值即定义，如果一个变量已经定义，赋值相当于重新定义</li></ul></li></ul></li></ul><h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><ul><li><p>变量无须事先声明，也不需要指定类型</p><ul><li>动态语言的特性</li></ul></li><li><p>编程中一般无须关心变量的存亡，也不用关心内存的管理</p></li><li><p>python使用引用计数记录所有对象的引用数</p><ul><li>当对象引用数变为0，它就可以被 垃圾回收GC</li><li>计数增加：<ul><li>赋值给其它变量就增加引用计数，例如x=3;y=x</li></ul></li><li>计数减少：<ul><li>函数运行结束时，局部变量就会被自动销毁，对象引用计数减少</li><li>变量被赋值给其它对象。例如x=3;y=x;x=4</li></ul></li></ul></li><li><p>有关性能的时候，就需要考虑变量的引用问题，但是该释放内存，还是尽量不释放内存，看需求</p></li></ul><h2 id="程序控制"><a href="#程序控制" class="headerlink" title="程序控制"></a>程序控制</h2><ul><li><p>顺序</p><ul><li>按照先后顺序一条条执行</li><li>例如，先洗手，再吃饭，再洗碗</li></ul></li><li><p>分支</p><ul><li>根据不同的情况判断，条件满足执行某条件下的语句</li><li>例如，先洗手，如果饭没有做好，玩游戏，如果饭做好了，就吃饭，如果饭都没有做，叫外卖</li></ul></li><li><p>循环</p><ul><li>条件满足就反复执行，不满足就不执行或不再执行</li><li>例如，先洗手，看饭好了没有，没有好，一会来看一次是否好了，一会儿来看一次，直到饭好了，才可是吃饭。这里循环的条件是饭没有好，饭没有好，就循环的来看饭好了没有</li></ul></li></ul><h2 id="单分支结构"><a href="#单分支结构" class="headerlink" title="单分支结构"></a>单分支结构</h2><ul><li><p>if语句</p><ul><li>if condition:<ul><li>代码块</li></ul></li><li>condition必须是一个bool类型，这个地方有一个隐式转换bool(condition)</li><li>if 1&lt;2:<br>   &#160;&#160;&#160;&#160;print(‘1 less than 2’)</li></ul></li><li><p>代码块</p><ul><li>类似于if语句的冒号后面的就是一个语句块</li><li>在if、for、def、class等</li></ul></li></ul><h2 id="真值表"><a href="#真值表" class="headerlink" title="真值表"></a>真值表</h2><table><thead><tr><th style="text-align:left">对象/常量</th><th style="text-align:left">值</th></tr></thead><tbody><tr><td style="text-align:left">“”</td><td style="text-align:left">假</td></tr><tr><td style="text-align:left">“string”</td><td style="text-align:left">真</td></tr><tr><td style="text-align:left">0</td><td style="text-align:left">假</td></tr><tr><td style="text-align:left">&gt;=1</td><td style="text-align:left">真</td></tr><tr><td style="text-align:left">&lt;=-1</td><td style="text-align:left">真</td></tr><tr><td style="text-align:left">()空元组</td><td style="text-align:left">假</td></tr><tr><td style="text-align:left">[]空列表</td><td style="text-align:left">假</td></tr><tr><td style="text-align:left">{}空字典</td><td style="text-align:left">假</td></tr><tr><td style="text-align:left">None</td><td style="text-align:left">假</td></tr></tbody></table><ul><li>False等价布尔值，相当于bool(value)<ul><li>空集合<ul><li>空字符串</li><li>空字典</li><li>空列表</li><li>空元祖</li></ul></li><li>None对象</li><li>0</li></ul></li></ul><h2 id="多分支结构"><a href="#多分支结构" class="headerlink" title="多分支结构"></a>多分支结构</h2><ul><li><p>if…elif…else语句<br>&#160;&#160;&#160;&#160;if condition1:<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;代码块1<br>&#160;&#160;&#160;&#160;elif condition2:<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;代码块2<br>&#160;&#160;&#160;&#160;elif condition3:<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;代码块3<br>&#160;&#160;&#160;&#160;……<br>&#160;&#160;&#160;&#160;else:<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;代码块  </p></li><li><p>举例<br>&#160;&#160;&#160;&#160;a = 5<br>&#160;&#160;&#160;&#160;if a&lt;0:<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;print(‘negative’)<br>&#160;&#160;&#160;&#160;elif a==0:<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;print(‘zero’)<br>&#160;&#160;&#160;&#160;else:<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;print(‘positive’)  </p></li></ul><h2 id="分支嵌套"><a href="#分支嵌套" class="headerlink" title="分支嵌套"></a>分支嵌套</h2><ul><li><p>举例<br>&#160;&#160;&#160;&#160;score = 80<br>&#160;&#160;&#160;&#160;&#160;if score&lt;0:<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;print(‘wrong’)<br>&#160;&#160;&#160;&#160;else:<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if score==0:<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;print(‘egg’)<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;elif score &lt;= 100:<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;print(‘right’)<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else:<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;print(‘too big’)  </p></li><li><p>嵌套结构，可以是分支、循环的嵌套</p></li><li><p>可以互相嵌套多层</p></li><li><p>练习：给定一个不超过5位的正整数，判断其有几位  </p><ul><li>使用 input 函数，input返回的是字符串</li><li>如果位数多的话可以用折半</li><li>num = 8<br>if (num /= 10) == 0: &#160;&#160;&#160;&#160; 为什么这里报错<br>&#160;&#160;&#160;&#160;print(‘1位数’)</li></ul></li></ul><h2 id="循环——while语句"><a href="#循环——while语句" class="headerlink" title="循环——while语句"></a>循环——while语句</h2><ul><li><p>语法<br>&#160;&#160;&#160;&#160;while condition:<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;block  </p><ul><li>当条件满足即condition为True，进入循环体，执行block</li></ul></li><li><p>举例<br>&#160;&#160;&#160;&#160;flag=10<br>&#160;&#160;&#160;&#160;while flag:<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;print(flag)<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;flag -= 1  </p><ul><li>执行结果是什么？为什么？</li><li>如果flag=-10可以吗？如何改造？</li></ul></li></ul><h2 id="循环——for语句"><a href="#循环——for语句" class="headerlink" title="循环——for语句*"></a>循环——for语句*</h2><ul><li><p>语法</p><ul><li>for element in iteratable:<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;block</li><li>当可迭代对象中有元素可以迭代，进入循环体，执行block</li></ul></li><li><p>range函数  </p></li><li><p>举例：打印1~10<br>&#160;&#160;&#160;&#160;for i in range(10):<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;print(i+1)  </p><ul><li>执行结果是什么？为什么？</li><li>如果想倒序打印呢</li></ul></li></ul><h2 id="循环-continue语句"><a href="#循环-continue语句" class="headerlink" title="循环 continue语句"></a>循环 continue语句</h2><ul><li><p>中断当前循环的当次执行，继续下一次循环</p></li><li><p>举例：计算10以内的偶数（for循环）<br>&#160;&#160;&#160;&#160;for i in range(10):<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if not i%2:  &#160;&#160;&#160;&#160; # i%2==0这么写也行<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;print(i)  </p></li><li>还有其它的实现吗？</li></ul><p>&#160;&#160;&#160;&#160;for i in range(0,10,2):<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;print(i)  </p><p>&#160;&#160;&#160;&#160;for i in range(0,10):<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if i &amp; 1: &#160;&#160;&#160;&#160;# 或用 i%2  表示奇数就continue<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;continue<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;print(i)  </p><h2 id="循环-break语句"><a href="#循环-break语句" class="headerlink" title="循环 break语句"></a>循环 break语句</h2><ul><li>终止当前循环</li><li>举例：计算1000以内的被7整除的前20个数（for循环）<br>&#160;&#160;&#160;&#160;count = 0<br>&#160;&#160;&#160;&#160;for i in range(0,1000,7):<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;print(i)<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;count += 1<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if count &gt;= 20:<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break</li></ul><h2 id="循环-continue、break语句"><a href="#循环-continue、break语句" class="headerlink" title="循环 continue、break语句"></a>循环 continue、break语句</h2><ul><li><p>总结</p><ul><li>continue和break是循环的控制语句，只影响当前循环，包括while、for循环</li><li>如果循环嵌套， continue和break也只影响语句所在的那一层循环</li><li>continue和break 不是跳出语句块，所以 if cond: break 不是跳出if，而是终止if外的break所在的循环</li></ul></li><li><p>练习：<br>给定一个不超过5位的正整数，判断该数的位数，依次打印出个位、十位、百位、千位、万位的数字  </p></li></ul><h2 id="循环-else子句"><a href="#循环-else子句" class="headerlink" title="循环 else子句"></a>循环 else子句</h2><ul><li><p>语法<br>&#160;&#160;&#160;&#160;while condition:<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;block<br>&#160;&#160;&#160;&#160;else:<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;block<br>&#160;&#160;&#160;&#160;for element in iteratable:<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;block<br>&#160;&#160;&#160;&#160;else:<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;block  </p></li><li><p>如果循环正常的执行结束，就执行else子句；如果使用break终止，else子句不会执行</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第二章-Python-基础语法&quot;&gt;&lt;a href=&quot;#第二章-Python-基础语法&quot; class=&quot;headerlink&quot; title=&quot;第二章 - Python 基础语法&quot;&gt;&lt;/a&gt;第二章 - Python 基础语法&lt;/h1&gt;&lt;h2 id=&quot;基本语法&quot;&gt;&lt;a 
      
    
    </summary>
    
      <category term="python-magedu" scheme="https://herodanny.github.io/categories/python-magedu/"/>
    
    
      <category term="python" scheme="https://herodanny.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python全栈-magedu-2018-笔记1</title>
    <link href="https://herodanny.github.io/python-magedu-2018-notes1.html"/>
    <id>https://herodanny.github.io/python-magedu-2018-notes1.html</id>
    <published>2019-04-19T12:16:49.000Z</published>
    <updated>2019-04-25T07:31:29.193Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-Python-环境搭建"><a href="#第一章-Python-环境搭建" class="headerlink" title="第一章 - Python 环境搭建"></a>第一章 - Python 环境搭建</h1><h2 id="操作系统准备"><a href="#操作系统准备" class="headerlink" title="操作系统准备"></a>操作系统准备</h2><p>准备Linux最小系统即可。 </p><p>如果在虚拟机中克隆，MAC地址会变。 这里使用CentOS 6.5+ </p><h2 id="Pyenv-安装"><a href="#Pyenv-安装" class="headerlink" title="Pyenv 安装"></a>Pyenv 安装</h2><ol><li>安装git </li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install git -y</span><br></pre></td></tr></table></figure><ol start="2"><li>安装Python编译依赖 </li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc make patch gdbm-devel openssl-devel sqlite-devel  readline-devel zlib-devel bzip2-devel</span><br></pre></td></tr></table></figure><ol start="3"><li>创建用户python </li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd python </span><br><span class="line">passwd python</span><br></pre></td></tr></table></figure><ol start="4"><li>使用python用户登录后安装Pyenv </li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash</span><br></pre></td></tr></table></figure><p>下载的 pyenv-installer 是一个shell脚本。<br>注意： </p><ol><li>在 <a href="https://github.com/pyenv/pyenv-installer" target="_blank" rel="noopener">https://github.com/pyenv/pyenv-installer</a> 有安装文档 </li><li><p>如果curl出现 curl: (35) SSL connect error ，是nss版本低的问题，更新它。 可能需要配置一个有较新包的yum源 </p><pre><code>[updates] name=CentOS-Updates baseurl=https://mirrors.aliyun.com/centos/6.9/os/x86_64 gpgcheck=0 </code></pre></li></ol><p>然后更新nss<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum update nss</span><br></pre></td></tr></table></figure></p><ol start="5"><li>在python用户的~/.bash_profile中追加 </li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="string">"/home/python/.pyenv/bin:<span class="variable">$PATH</span>"</span> </span><br><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(pyenv init -)</span>"</span> </span><br><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(pyenv virtualenv-init -)</span>"</span> </span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure><p>这样当用户启动的时候，会执行用户的 .bash_profile 中的脚本，就会启动pyenv。 安装好的pyenv 就在~/.pyenv中 </p><h2 id="Pyenv-使用"><a href="#Pyenv-使用" class="headerlink" title="Pyenv 使用"></a>Pyenv 使用</h2><p>python 版本及path路径<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python --version </span><br><span class="line">python -V </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span></span><br></pre></td></tr></table></figure></p><p>可以看到当前系统Python路径 </p><p>pyenv 命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pyenv</span><br><span class="line">pyenv <span class="built_in">help</span> install</span><br></pre></td></tr></table></figure></p><p>列出所有可用版本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyenv install --list</span><br></pre></td></tr></table></figure></p><p>安装指定版本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pyenv install 3.5.3 -v <span class="comment"># 加 -v 可以看详细过程 verbose</span></span><br><span class="line">pyenv versions</span><br></pre></td></tr></table></figure></p><p>会从python官网下载安装压缩包到 /tmp 目录，很慢，为了提速，可选用cache方法。</p><p>使用缓存方式安装<br>在~/.pyenv目录下，新建cache目录，放入下载好的待安装版本的文件。  </p><p>不确定要哪一个文件，把下载的3个文件都放进去。一般放 ‘tar.xz’ 包。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ scp ~/Downloads/Python-3.5.3.tar.xz root@10.211.55.6:~/.pyenv/cache</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyenv install 3.5.3 -v</span><br></pre></td></tr></table></figure><p>安装后的python文件夹在 .pyenv/versions 下。<br>cache文件夹里有下载的压缩包。  </p><p>pyenv 的 python版本控制<br>version 显示当前的python版本 versions 显示所有可用的python版本，和当前版本。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pyenv version</span><br><span class="line">pyenv versions</span><br></pre></td></tr></table></figure></p><p>global 全局设置<br><code>pyenv global 3.5.3</code> 可以看到所有受pyenv控制的窗口中都是3.5.3的python版本了。 这里用global是作用于非root用户python用户上，如果是root用户安装，请不要使用global，否则影响太大。比如，这里使用的CentOS6.5就是Python2.6，使用了global就成了3.x，会带来很不好的影响。 <code>pyenv global system</code> 回到原来系统版本。  </p><p>shell 会话设置<br>影响只作用于当前会话 <code>pyenv shell 3.5.3</code><br>是会话级的，一旦断开sessionid也变了，也不好用。  </p><p>local 本地设置<br>使用pyenv local设置从当前工作目录开始向下递归都继承这个设置。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pyenv <span class="built_in">local</span> 3.5.3</span><br><span class="line">python -V</span><br><span class="line"><span class="comment"># 可能还是显示原来的版本，用pyenv version，要在虚拟环境中python -V 才会显示新的版本</span></span><br></pre></td></tr></table></figure></p><p>也可以使用 anaconda，pyenv 是自己下源码编，某些情况下可能不如 anaconda 直接编好的二进制分发。  </p><h2 id="Virtualenv-虚拟环境设置"><a href="#Virtualenv-虚拟环境设置" class="headerlink" title="Virtualenv 虚拟环境设置"></a>Virtualenv 虚拟环境设置</h2><p>为什么要使用虚拟环境？ 因为刚才使用的Python环境都是一个公共的空间，如果多个项目使用不同Python版本开发，或者使用不同的Python版本部署运行，或者使用同样的版本开发的但不同项目使用了不同版本的库，等等这些问题都会带来冲突。最好的解决办法就是每一个项目独立运行自己的“独立小环境”中。  </p><p>使用插件，在plugins/pyenv-virtualenv中<br><code>pyenv virtualenv 3.5.3 mag353</code><br>使用python3.5.3版本创建出一个独立的虚拟空间 mag353。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ pyenv versions</span><br><span class="line">* system (<span class="built_in">set</span> by /home/python/.pyenv/version)</span><br><span class="line">3.5.3</span><br><span class="line">3.5.3/envs/mag353</span><br><span class="line">mag353</span><br></pre></td></tr></table></figure><p>可以在版本列表中存在，就和3.5.3是一样的，就是一个版本了。以后只要使用这个虚拟版本，包就会按照到这些对应的目录下去，而不是使用3.5.3。<br>可以看到真实的虚拟环境是下 envs/ 目录下。<br>.pyenv/versions/ 下是软链接。  </p><p>在需要设置python版本的文件夹路径下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pyenv <span class="built_in">local</span> mag353</span><br><span class="line">pyenv versions</span><br></pre></td></tr></table></figure></p><p>怎么会起作用的，是利用了一堆隐藏文件和在 .bash_profile 中添加的那几指令。</p><p>现在可以对python进行版本的管理，包的管理。</p><h2 id="pip-通用配置"><a href="#pip-通用配置" class="headerlink" title="pip 通用配置"></a>pip 通用配置</h2><p>pip 是Python的包管理工具，3.x的版本直接带了，可以直接使用。 和yun一样为了使用国内镜像，如下配置。<br><code>mkdir ~/.pip</code><br>配置文件在 ~/.pip/pip.conf  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url=https://mirrors.aliyun.com/pypi/simple/</span><br><span class="line">trusted-host=mirrors.aliyun.com</span><br></pre></td></tr></table></figure><h2 id="安装-ipython"><a href="#安装-ipython" class="headerlink" title="安装 ipython"></a>安装 ipython</h2><p>ipython 是增强的交互式 Python 命令行工具<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install ipython  </span><br><span class="line">ipython</span><br></pre></td></tr></table></figure></p><h2 id="安装-Jupyter"><a href="#安装-Jupyter" class="headerlink" title="安装 Jupyter"></a>安装 Jupyter</h2><p>Jupyter 是基于WEB的交互式笔记本，其中可以非常方便的使用Python。<br>安装Jupyter，也会安装ipython的。  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pip install jupyter</span><br><span class="line">jupyter notebook <span class="built_in">help</span></span><br><span class="line">jupyter notebook password <span class="comment"># 设置下浏览器访问时的密码</span></span><br><span class="line">jupyter notebook --ip=0.0.0.0 --no-browser</span><br><span class="line">ss -tanl</span><br></pre></td></tr></table></figure><p>浏览器不能访问是服务器端防火墙问题。  </p><p>快捷键：shift + enter(运行)、ctrl + enter(运行)、dd(删除一行)、m(用mardkown)</p><h2 id="导出包"><a href="#导出包" class="headerlink" title="导出包"></a>导出包</h2><p>虚拟环境的好处就在于和其他项目运行环境隔离。每一个独立的环境都可以使用pip命令导出已经安装的包，在另一个环境中安装这些包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(mag353) [python@node web]$ pip freeze &gt; requirement</span><br><span class="line">(mag353) [python@node web]$ mkdir ~/magedu/projects/pro1</span><br><span class="line">(mag353) [python@node web]$ <span class="built_in">cd</span> ~/magedu/projects/pro1</span><br><span class="line">[python@node pro1]$ pyenv install --list</span><br><span class="line">[python@node pro1]$ pyenv install 3.6.4</span><br><span class="line">[python@node pro1]$ pyenv virtualenv 3.6.4 mag364</span><br><span class="line">[python@node pro1]$ pyenv <span class="built_in">local</span> mag364</span><br><span class="line">(mag364) [python@node pro1]$ mv ../web/requirement ./</span><br><span class="line">(mag364) [python@node pro1]$ pip install -r requirement</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第一章-Python-环境搭建&quot;&gt;&lt;a href=&quot;#第一章-Python-环境搭建&quot; class=&quot;headerlink&quot; title=&quot;第一章 - Python 环境搭建&quot;&gt;&lt;/a&gt;第一章 - Python 环境搭建&lt;/h1&gt;&lt;h2 id=&quot;操作系统准备&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="python-magedu" scheme="https://herodanny.github.io/categories/python-magedu/"/>
    
    
      <category term="python" scheme="https://herodanny.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>用VsCode写Markdown</title>
    <link href="https://herodanny.github.io/vscode-write-markdown.html"/>
    <id>https://herodanny.github.io/vscode-write-markdown.html</id>
    <published>2019-04-18T07:47:28.000Z</published>
    <updated>2019-04-18T12:52:19.651Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Markdown-基本语法"><a href="#Markdown-基本语法" class="headerlink" title="Markdown 基本语法"></a>Markdown 基本语法</h1><h2 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h2><p>非常自然，一行文字就是一个段落。</p><p>比如：</p><pre><code>这是一个段落</code></pre><p>会被解释成：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果你需要另起一段，请在两个段落之间隔一个空行。</p><pre><code>这是一个段落。这是另一个段落。</code></pre><p>会被解释成</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是另一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>不隔一个空行的换行行为，在一些编辑器中被解释为换行，即插入一个<br>标签。对与另外一些编辑器，会被解释为插入一个空格。对于后者，若要插入换行标签，请在当前一行的结尾打两个空格。(vscode 就是后者，typora 普通模式是前者，源码模式和 vscode 一样是后者)</p><p>没用空一行，在结尾打两个空格的换行，还在一个段落中。</p><h2 id="粗体、斜体"><a href="#粗体、斜体" class="headerlink" title="粗体、斜体"></a>粗体、斜体</h2><p>可以使用星号*或下划线_指定粗体或者斜体。</p><pre><code>*这是斜体*_这也是斜体_**这是粗体*****这是粗体+斜体***</code></pre><p>会被解释成</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>这是斜体<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>这也是斜体<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>这是粗体<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>这是粗体+斜体<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p>一部分编辑器支持删除线，它不是经典 markdown 中的要素。用波浪线~定义删除线。</p><pre><code>~~就像这样~~</code></pre><p>会被解释成</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">strike</span>&gt;</span>就像这样<span class="tag">&lt;/<span class="name">strike</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>markdown 总支持 1~6 六级标题，通过在一行之前加上不同数量的井号来表示。</p><pre><code># 这是 H1 ### 这是 H2 ##### 这是 H3 ###...###### 这是 H6 ######</code></pre><p>行尾可以加上任意数量的井号字符，这些字符不会算作标题内容。通常会加上相等数量的字符以保持对称。</p><p>此外，H1 和 H2 也可以采用在文本下方添加底线来实现，比如：</p><pre><code>这是 H1=======这是 H2-------</code></pre><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>通过在行首加上大于号&gt;来添加引用格式。</p><pre><code>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisseid sem consectetuer libero luctus adipiscing.</code></pre><blockquote><p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,<br>consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.<br>Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p></blockquote><blockquote><p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse<br>id sem consectetuer libero luctus adipiscing.</p></blockquote><p>引用可以嵌套：</p><pre><code>&gt; This is the first level of quoting.&gt;&gt; &gt; This is nested blockquote.&gt;&gt; Back to the first level.</code></pre><blockquote><p>This is the first level of quoting.</p><blockquote><p>This is nested blockquote.</p></blockquote><p>Back to the first level.</p></blockquote><p>也可以嵌套其他格式：</p><pre><code>&gt; ## 这是一个标题。&gt;&gt; 1.   这是第一行列表项。&gt; 2.   这是第二行列表项。&gt;&gt; 给出一些例子代码：&gt;&gt;     return shell_exec(&quot;echo $input | $markdown_script&quot;);</code></pre><blockquote><h2 id="这是一个标题。"><a href="#这是一个标题。" class="headerlink" title="这是一个标题。"></a>这是一个标题。</h2><ol><li>这是第一行列表项。</li><li>这是第二行列表项。</li></ol><p>给出一些例子代码：</p><pre><code>return shell_exec(&quot;echo $input | $markdown_script&quot;);</code></pre></blockquote><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>无序列表使用星号、加号或是减号作为列表标记：</p><pre><code>*   Red*   Green*   Blue</code></pre><ul><li>Red</li><li>Green</li><li>Blue</li></ul><p>等同于</p><pre><code>+   Red+   Green+   Blue</code></pre><p>和</p><pre><code>-   Red-   Green-   Blue</code></pre><p>有序列表则使用数字接着一个英文句点：  </p><pre><code>1.  Bird2.  McHale3.  Parish</code></pre><ol><li>Bird</li><li>McHale</li><li>Parish</li></ol><h2 id="内敛代码"><a href="#内敛代码" class="headerlink" title="内敛代码"></a>内敛代码</h2><p>用反引号 ` 来标记内联代码，它们会解释成 <code>&lt;code&gt;</code> 标签。如果代码的内容中有反引号，请用两个反引号包裹。</p><h2 id="代码区域"><a href="#代码区域" class="headerlink" title="代码区域"></a>代码区域</h2><p>有两种方式标记代码区域，原生风格是行首缩进四个空格。</p><p>这是一个普通段落：</p><pre><code>这是一个代码区块。</code></pre><p>会被解释成</p><pre><code>&lt;p&gt;这是一个普通段落：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;这是一个代码区块。&lt;/code&gt;&lt;/pre&gt;</code></pre><h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span><span class="bullet">* *</span></span><br><span class="line"><span class="emphasis">***</span></span><br><span class="line"><span class="strong">*****</span></span><br><span class="line"><span class="bullet">- </span>- -</span><br><span class="line">---------------------------------------</span><br></pre></td></tr></table></figure><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><pre><code>[an example](http://example.com/)[an example](http://example.com/ &quot;Optional Title&quot;)</code></pre><p>会被解释为</p><pre><code>&lt;a href=&apos;http://example.com/&apos;&gt;an example&lt;/a&gt;&lt;a href=&apos;http://example.com/&apos; title=&quot;Optional Title&quot;&gt;an example&lt;/a&gt;</code></pre><p>除了上面的行内式，也可以使用参考式：</p><pre><code>[an example][id]</code></pre><p>然后在任意空白位置定义：</p><pre><code>[id]: http://example.com/ &quot;Optional Title&quot;</code></pre><h2 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h2><pre><code>![Alt text](/path/to/img.jpg)![Alt text](/path/to/img.jpg &quot;Optional Title&quot;)</code></pre><p>会被解释为</p><pre><code>&lt;img src=&apos;/path/to/img.jpg&apos; alt=&apos;Alt text&apos; /&gt;&lt;img src=&apos;/path/to/img.jpg&apos; alt=&apos;Alt text&apos; title=&apos;Optional Title&apos; /&gt;</code></pre><p>同样，图像也有类似的参考式语法。</p><h2 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h2><p>如果链接的地址和名字重复，可以用尖括号语法将其简化。</p><pre><code>&lt;http://example.com/&gt;</code></pre><p>就相当于</p><pre><code>[http://example.com/](http://example.com/)</code></pre><p>切记，大多数编辑器都会自动将符合url规则的东西视为链接，并且解释成链接。很多时候作者由于疏忽等缘故，链接和后面的中文之间缺少空格，导致链接不正常。所以我建议，链接要么加上尖括号，要么两端加上空格。</p><h2 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h2><p>markdown支持在以下字符前面插入反斜杠</p><pre><code>\   反斜线`   反引号*   星号_   底线{}  花括号[]  方括号()  括弧#   井字号+   加号-   减号.   英文句点!   惊叹号</code></pre><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><pre><code>| Item     | Value |  Qty  || :------- | ----: | :---: || Computer | $1600 |   5   || Phone    |   $12 |  12   || Pipe     |    $1 |  234  |</code></pre><p>会被解释成</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">th</span> <span class="attr">align</span>=<span class="string">"left"</span>&gt;</span>Item<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">th</span> <span class="attr">align</span>=<span class="string">"right"</span>&gt;</span>Value<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">th</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>Qty<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"left"</span>&gt;</span>Computer<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"right"</span>&gt;</span>$1600<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"left"</span>&gt;</span>Phone<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"right"</span>&gt;</span>$12<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>12<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"left"</span>&gt;</span>Pipe<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"right"</span>&gt;</span>$1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>234<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>要注意第二行的冒号决定了居左居右还是居中，如果你不加冒号，默认是居左的。</p><p>另外可以把第一行去掉，做成没有表头的表格，但第二行始终是要有的。</p><h2 id="内联-HTML"><a href="#内联-HTML" class="headerlink" title="内联 HTML"></a>内联 HTML</h2><p>markdown 的语法简洁，但有其局限性，所以特意保留了内联html这种方式。任何html标签及其内容，都会原样输出到结果中。也就是说，标签中的星号等作为markdown结构的符号，以及构成html标签和实体的符号，都不会做任何转义。</p><h2 id="vscode-markdown-扩展"><a href="#vscode-markdown-扩展" class="headerlink" title="vscode markdown 扩展"></a>vscode markdown 扩展</h2><p>Markdown All in One<br>Markdown Shortcuts</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Markdown-基本语法&quot;&gt;&lt;a href=&quot;#Markdown-基本语法&quot; class=&quot;headerlink&quot; title=&quot;Markdown 基本语法&quot;&gt;&lt;/a&gt;Markdown 基本语法&lt;/h1&gt;&lt;h2 id=&quot;段落&quot;&gt;&lt;a href=&quot;#段落&quot; cla
      
    
    </summary>
    
      <category term="before-development" scheme="https://herodanny.github.io/categories/before-development/"/>
    
    
      <category term="markdown" scheme="https://herodanny.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>my blog test</title>
    <link href="https://herodanny.github.io/my-blog-test.html"/>
    <id>https://herodanny.github.io/my-blog-test.html</id>
    <published>2019-04-13T03:59:37.000Z</published>
    <updated>2019-04-15T10:05:00.642Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Anima"><a href="#Anima" class="headerlink" title="Anima"></a>Anima</h1><!--<p align="center">    <a href="https://github.com/biezhi/anima/wiki"><img src="screenshot/cover.png" width="623"/></a></p>--><p><code>Anima</code> allows you to query database like <code>SQL</code> and <code>Stream</code>.<br>a simple DSL syntax, supports multiple databases, integrates well with Java8,<br>supports multiple relational mappings, and is a database manipulation tool.</p><p><strong><a href="https://github.com/biezhi/anima/wiki" target="_blank" rel="noopener">Document</a></strong></p><p><a href="https://travis-ci.org/biezhi/anima" target="_blank" rel="noopener"><img src="https://travis-ci.org/biezhi/anima.svg?branch=master" alt="Travis Build"></a><br><a href="https://mvnrepository.com/artifact/io.github.biezhi/anima" target="_blank" rel="noopener"><img src="https://img.shields.io/maven-central/v/io.github.biezhi/anima.svg" alt></a></p><a id="more"></a><h2 id="Feature"><a href="#Feature" class="headerlink" title="Feature"></a>Feature</h2><ul><li>Simple DSL </li><li>H2、MySQL、SQLite、PostgreSQL、Oracle、SqlServer </li><li>Paging support </li><li>Flexible configuration </li><li>Connection pool support</li><li>Support <code>LocalDate</code>、<code>LocalDateTime</code></li><li>Support lambda expression</li><li>Relationship (<code>hasOne</code>、<code>hasMany</code>、<code>belongsTo</code>)</li><li>SQL performance statistics</li><li>Based Java8</li></ul><h1 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h1><p><strong>Latest snapshot version</strong></p><blockquote><p>If you want to prioritize new features or some BUG fixes you can use it, you need to specify the snapshot repository in <code>pom.xml</code></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>snapshots-repo<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://oss.sonatype.org/content/repositories/snapshots<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.biezhi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>anima<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.4-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Here’s the <code>RELEASE</code> version.</p><p><strong>As Gradle</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">'io.github.biezhi:anima:0.2.3'</span></span><br></pre></td></tr></table></figure><p><strong>As Maven</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.biezhi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>anima<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>📒 Although <code>Anima</code> can also be used by adding a jar package, we do not recommend doing this.</p></blockquote><h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><p><strong>Open Connection</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MySQL</span></span><br><span class="line">Anima.open(<span class="string">"jdbc:mysql://127.0.0.1:3306/demo"</span>, <span class="string">"root"</span>, <span class="string">"123456"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// SQLite</span></span><br><span class="line">Anima.open(<span class="string">"jdbc:sqlite:./demo.db"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// H2</span></span><br><span class="line">Anima.open(<span class="string">"jdbc:h2:file:~/demo;FILE_LOCK=FS;PAGE_SIZE=1024;CACHE_SIZE=8192"</span>, <span class="string">"sa"</span>, <span class="string">""</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// DataSource</span></span><br><span class="line">DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">dataSource.setDriverClassName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">dataSource.setUrl(blade.environment().getOrNull(<span class="string">"jdbc.url"</span>));</span><br><span class="line">dataSource.setUsername(blade.environment().getOrNull(<span class="string">"jdbc.username"</span>));</span><br><span class="line">dataSource.setPassword(blade.environment().getOrNull(<span class="string">"jdbc.password"</span>));</span><br><span class="line">Anima.open(dataSource);</span><br></pre></td></tr></table></figure><blockquote><p>📕 This operation only needs one time</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String  userName;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String userName, Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Table Structure</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`users`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="keyword">IDENTITY</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  <span class="string">`user_name`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`age`</span> <span class="built_in">int</span>(<span class="number">11</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> count = select().from(User.class).count();</span><br><span class="line"><span class="comment">// SELECT COUNT(*) FROM users</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> count = select().from(User.class).where(<span class="string">"age &gt; ?"</span>, <span class="number">15</span>).isNotNull(<span class="string">"user_name"</span>).count();</span><br><span class="line"><span class="comment">// SELECT COUNT(*) FROM users WHERE age &gt; ? AND user_name IS NOT NULL</span></span><br><span class="line"></span><br><span class="line">User user = select().from(User.class).byId(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE id = ?</span></span><br><span class="line"></span><br><span class="line">List&lt;User&gt; users = select().from(User.class).byIds(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE id IN (?, ?, ?)</span></span><br><span class="line"></span><br><span class="line">String name = select().bySQL(String.class, <span class="string">"select user_name from users limit 1"</span>).one();</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; names = select().bySQL(String.class, <span class="string">"select user_name from users limit ?"</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">List&lt;User&gt; users = select().from(User.class).all();</span><br><span class="line"><span class="comment">// SELECT * FROM users</span></span><br><span class="line"></span><br><span class="line">List&lt;User&gt; users = select().from(User.class).like(<span class="string">"user_name"</span>, <span class="string">"%o%"</span>).all();</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE user_name LIKE ?</span></span><br></pre></td></tr></table></figure><p><strong>Limit</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; users = select().from(User.class).order(<span class="string">"id desc"</span>).limit(<span class="number">5</span>);</span><br><span class="line"><span class="comment">// SELECT * FROM users ORDER BY id desc</span></span><br></pre></td></tr></table></figure><p><strong>Paging</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Page&lt;User&gt; userPage = select().from(User.class).order(<span class="string">"id desc"</span>).page(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">// SELECT * FROM users ORDER BY id desc LIMIT ?, ?</span></span><br></pre></td></tr></table></figure><p><strong>Map</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select().from(User.class).map(User::getUserName).limit(<span class="number">3</span>).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><p><strong>Filter</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select().from(User.class).filter(u -&gt; u.getAge() &gt; <span class="number">10</span>).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><p><strong>Lambda</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User user = select().from(User.class).where(User::getUserName).eq(<span class="string">"jack"</span>).one();</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE user_name = ?</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; user = select().from(User.class)</span><br><span class="line">                .where(User::getUserName).notNull()</span><br><span class="line">                .and(User::getAge).gt(<span class="number">10</span>)</span><br><span class="line">                .all();</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE user_name IS NOT NULL AND age &gt; ?</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select().from(User.class).order(User::getId, OrderBy.DESC).order(User::getAge, OrderBy.ASC).all();</span><br><span class="line"><span class="comment">// SELECT * FROM users ORDER BY  id DESC, age ASC</span></span><br></pre></td></tr></table></figure><p><strong>Join</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Table</span>(name = <span class="string">"order_info"</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderInfo</span> <span class="keyword">extends</span> <span class="title">Model</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"productname"</span>)</span><br><span class="line">    <span class="keyword">private</span> String productName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Ignore</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Ignore</span></span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HasOne</span></span><br><span class="line">OrderInfo orderInfo = select().from(OrderInfo.class)</span><br><span class="line">        .join(</span><br><span class="line">            Joins.with(Address.class).as(OrderInfo::getAddress)</span><br><span class="line">                 .on(OrderInfo::getId, Address::getOrderId)</span><br><span class="line">        ).byId(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">orderInfo = select().from(OrderInfo.class)</span><br><span class="line">        .join(</span><br><span class="line">            Joins.with(Address.class).as(OrderInfo::getAddress)</span><br><span class="line">                 .on(OrderInfo::getId, Address::getOrderId)</span><br><span class="line">        )</span><br><span class="line">        .join(</span><br><span class="line">                Joins.with(User.class).as(OrderInfo::getUser)</span><br><span class="line">                        .on(OrderInfo::getUid, User::getId)</span><br><span class="line">        ).byId(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ManyToOne</span></span><br><span class="line">orderInfo = select().from(OrderInfo.class)</span><br><span class="line">        .join(</span><br><span class="line">            Joins.with(User.class).as(OrderInfo::getUser)</span><br><span class="line">                 .on(OrderInfo::getUid, User::getId)</span><br><span class="line">        ).byId(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// OneToMany</span></span><br><span class="line">UserDto userDto = select().from(UserDto.class).join(</span><br><span class="line">            Joins.with(OrderInfo.class).as(UserDto::getOrders)</span><br><span class="line">                 .on(UserDto::getId, OrderInfo::getUid)</span><br><span class="line">        ).byId(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><h3 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a>Insert</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer id = <span class="keyword">new</span> User(<span class="string">"biezhi"</span>, <span class="number">100</span>).save().asInt();</span><br><span class="line"><span class="comment">// INSERT INTO users(id,user_name,age) VALUES (?,?,?)</span></span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Anima.save(<span class="keyword">new</span> User(<span class="string">"jack"</span>, <span class="number">100</span>));</span><br></pre></td></tr></table></figure><p><strong>Batch Save</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">users.add(<span class="keyword">new</span> User(<span class="string">"user1"</span>, <span class="number">10</span>));</span><br><span class="line">users.add(<span class="keyword">new</span> User(<span class="string">"user2"</span>, <span class="number">11</span>));</span><br><span class="line">users.add(<span class="keyword">new</span> User(<span class="string">"user3"</span>, <span class="number">12</span>));</span><br><span class="line">Anima.saveBatch(users);</span><br></pre></td></tr></table></figure><blockquote><p>📘 This operation will begin a transaction and rollback when there is a transaction that is unsuccessful.</p></blockquote><h3 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> result  = update().from(User.class).set(<span class="string">"user_name"</span>, newName).where(<span class="string">"id"</span>, <span class="number">1</span>).execute();</span><br><span class="line"><span class="comment">// UPDATE users SET username = ? WHERE id = ?</span></span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> result = update().from(User.class).set(<span class="string">"user_name"</span>, newName).where(<span class="string">"id"</span>, <span class="number">1</span>).execute();</span><br><span class="line"><span class="comment">// UPDATE users SET user_name = ? WHERE id = ?</span></span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setId(<span class="number">1</span>);</span><br><span class="line">user.setUserName(<span class="string">"jack"</span>);</span><br><span class="line">user.update();</span><br><span class="line"><span class="comment">// UPDATE users SET user_name = ? WHERE id = ?</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update().from(User.class).set(User::getUserName, <span class="string">"base64"</span>).updateById(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update().from(User.class).set(User::getUserName, <span class="string">"base64"</span>).where(User::getId).eq(<span class="number">2</span>).execute();</span><br></pre></td></tr></table></figure><h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> result = delete().from(User.class).where(<span class="string">"id"</span>, <span class="number">1</span>).execute();</span><br><span class="line"><span class="comment">// DELETE FROM users WHERE id = ?</span></span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setAge(<span class="number">15</span>);</span><br><span class="line">user.setUserName(<span class="string">"jack"</span>);</span><br><span class="line">user.delete();</span><br><span class="line"><span class="comment">// DELETE FROM users WHERE user_name = ? and age = ?</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">delete().from(User.class).where(User::getId).deleteById(<span class="number">3</span>);</span><br><span class="line">delete().from(User.class).where(User::getId).eq(<span class="number">1</span>).execute();</span><br><span class="line">delete().from(User.class).where(User::getAge).lte(<span class="number">20</span>).execute();</span><br></pre></td></tr></table></figure><h3 id="Transaction"><a href="#Transaction" class="headerlink" title="Transaction"></a>Transaction</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Anima.atomic(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">new</span> User(<span class="string">"apple"</span>, <span class="number">666</span>).save();</span><br><span class="line">&#125;).catchException(e -&gt; Assert.assertEquals(ArithmeticException.class, e.getClass()));</span><br></pre></td></tr></table></figure><blockquote><p>📗 <code>Anima</code> uses the <code>atomic</code> method to complete a transaction. normally, the code will not throw an exception.<br>when a <code>RuntimeException</code> is caught, the transaction will be <code>rollback</code>.</p></blockquote><h2 id="Test-Code"><a href="#Test-Code" class="headerlink" title="Test Code"></a>Test Code</h2><p>See <a href="https://github.com/biezhi/anima/tree/master/src/test/java/io/github/biezhi/anima" target="_blank" rel="noopener">here</a></p><h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>Apache2</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Anima&quot;&gt;&lt;a href=&quot;#Anima&quot; class=&quot;headerlink&quot; title=&quot;Anima&quot;&gt;&lt;/a&gt;Anima&lt;/h1&gt;&lt;!--
&lt;p align=&quot;center&quot;&gt;
    &lt;a href=&quot;https://github.com/biezhi/anima/wiki&quot;&gt;&lt;img src=&quot;screenshot/cover.png&quot; width=&quot;623&quot;/&gt;&lt;/a&gt;
&lt;/p&gt;
--&gt;
&lt;p&gt;&lt;code&gt;Anima&lt;/code&gt; allows you to query database like &lt;code&gt;SQL&lt;/code&gt; and &lt;code&gt;Stream&lt;/code&gt;.&lt;br&gt;a simple DSL syntax, supports multiple databases, integrates well with Java8,&lt;br&gt;supports multiple relational mappings, and is a database manipulation tool.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/biezhi/anima/wiki&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Document&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/biezhi/anima&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://travis-ci.org/biezhi/anima.svg?branch=master&quot; alt=&quot;Travis Build&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://mvnrepository.com/artifact/io.github.biezhi/anima&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://img.shields.io/maven-central/v/io.github.biezhi/anima.svg&quot; alt&gt;&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="test" scheme="https://herodanny.github.io/categories/test/"/>
    
      <category term="tools" scheme="https://herodanny.github.io/categories/tools/"/>
    
    
      <category term="test" scheme="https://herodanny.github.io/tags/test/"/>
    
      <category term="markdown" scheme="https://herodanny.github.io/tags/markdown/"/>
    
      <category term="java" scheme="https://herodanny.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>my first blog article</title>
    <link href="https://herodanny.github.io/my-first-blog-article.html"/>
    <id>https://herodanny.github.io/my-first-blog-article.html</id>
    <published>2019-04-08T13:14:14.000Z</published>
    <updated>2019-04-16T01:17:15.603Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><ul><li>我的技术小黑屋</li><li>不会写代码的菜鸟</li><li>我要返回火星了</li></ul><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><ol><li>我们都是地球人</li><li>为啥你就不会 markdown?</li><li>看完还不会就要被安排</li></ol><h2 id="链接的写法"><a href="#链接的写法" class="headerlink" title="链接的写法"></a>链接的写法</h2><p><a href="https://herodanny.github.io">我的技术小屋</a></p><h2 id="带-Title"><a href="#带-Title" class="headerlink" title="带 Title"></a>带 Title</h2><p><a href="https://www.github.com/herodanny" title="此处可能有炸弹" target="_blank" rel="noopener">我的技术小屋</a></p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p><img src="https://i.loli.net/2019/04/15/5cb4572ff03d1.jpg" alt></p><h2 id="带-Title-1"><a href="#带-Title-1" class="headerlink" title="带 Title"></a>带 Title</h2><p><img src="&quot;咯咯咯&quot;" alt="alt"></p><h2 id="引用方式"><a href="#引用方式" class="headerlink" title="引用方式"></a>引用方式</h2><p><img src="https://i.loli.net/2019/04/15/5cb4572ff03d1.jpg" alt="alt" title="咯咯咯，会不会markdown"></p><p></p><blockquote><p>世界依旧很大,大到只能胡说。  </p></blockquote><p></p><h3 id="面朝大海，春暖花开"><a href="#面朝大海，春暖花开" class="headerlink" title="面朝大海，春暖花开"></a>面朝大海，春暖花开</h3><blockquote><p>从明天起，做一个幸福的人<br>喂马、劈柴，周游世界<br>从明天起，关心粮食和蔬菜<br>我有一所房子，面朝大海，春暖花开<br>从明天起，和每一个亲人通信<br>告诉他们我的幸福<br>那幸福的闪电告诉我的<br>我将告诉每一个人<br>给每一条河每一座山取一个温暖的名字<br>陌生人，我也为你祝福<br>愿你有一个灿烂的前程<br>愿你有情人终成眷属<br>愿你在尘世获得幸福<br>我只愿面朝大海，春暖花开  </p></blockquote><p><strong>粗体</strong></p><p><strong>粗体</strong></p><p><em>看，我斜了没</em></p><p><em>真的很斜</em></p><p><strong><em>粗体＋斜体</em></strong></p><p><del>此处的故事只能用泪水掩盖</del></p><h1 id="群里单身女生名单"><a href="#群里单身女生名单" class="headerlink" title="群里单身女生名单"></a>群里单身女生名单</h1><table><thead><tr><th>姓名</th><th style="text-align:center">年龄</th><th style="text-align:right">三围</th></tr></thead><tbody><tr><td>罗欲凤</td><td style="text-align:center">18</td><td style="text-align:right">18, 27, 30</td></tr><tr><td>秋刀鱼</td><td style="text-align:center">26</td><td style="text-align:right">28, 25, 33</td></tr><tr><td>窝不行</td><td style="text-align:center">22</td><td style="text-align:right">23, 28, 35</td></tr></tbody></table><p><code>单行代码引用</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">   fmt.Println(<span class="string">"我的技术小屋"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分割线</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一级标题&quot;&gt;&lt;a href=&quot;#一级标题&quot; class=&quot;headerlink&quot; title=&quot;一级标题&quot;&gt;&lt;/a&gt;一级标题&lt;/h1&gt;&lt;h2 id=&quot;二级标题&quot;&gt;&lt;a href=&quot;#二级标题&quot; class=&quot;headerlink&quot; title=&quot;二级标题&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="test" scheme="https://herodanny.github.io/categories/test/"/>
    
      <category term="tools" scheme="https://herodanny.github.io/categories/tools/"/>
    
    
      <category term="test" scheme="https://herodanny.github.io/tags/test/"/>
    
      <category term="markdown" scheme="https://herodanny.github.io/tags/markdown/"/>
    
  </entry>
  
</feed>
