<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>从菜鸟到老鸟</title>
  
  <subtitle>From Zero To Hero</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://herodanny.github.io/"/>
  <updated>2019-04-20T15:50:39.766Z</updated>
  <id>https://herodanny.github.io/</id>
  
  <author>
    <name>herodanny</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python-mageedu-笔记2</title>
    <link href="https://herodanny.github.io/python-mageedu-notes2.html"/>
    <id>https://herodanny.github.io/python-mageedu-notes2.html</id>
    <published>2019-04-20T15:48:58.000Z</published>
    <updated>2019-04-20T15:50:39.766Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第二章-Python-基础语法"><a href="#第二章-Python-基础语法" class="headerlink" title="第二章 - Python 基础语法"></a>第二章 - Python 基础语法</h1><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><ul><li><p>注释 —— # 标注的文本</p></li><li><p>数字</p><ul><li>整数，不区分long和int<ul><li>进制0xa、0o10、0b10</li><li>bool，2个值True、False</li></ul></li><li>浮点数<ul><li>1.2、3.1415、-0.12，1.46e9等价于1.46*109</li></ul></li><li>复数，1+2j</li></ul></li><li><p>字符串</p><ul><li>使用 ‘ “ 单双引号引用的字符的序列</li><li>‘’’和””” 单双三引号，可以跨行、可以在其中自由的使用单双引号</li><li>在字符串前面加上r或者R前缀，表示该字符串不做特殊的处理</li></ul></li><li><p>转义序列</p><ul><li><code>\\ \t \r \n \&#39; \&quot;</code></li><li>前缀r，把里面的所有字符当普通字符对待</li></ul></li><li><p>缩进</p><ul><li>未使用C等语言的花括号，而是采用缩进的方式表示层次关系</li><li>约定使用4个空格缩进</li></ul></li><li><p>续行</p><ul><li>在行尾使用 \</li><li>如果使用各种括号，认为括号内是一个整体，内部跨行不用 \</li></ul></li><li><p>标识符</p><ol><li>一个名字，用来指代一个值</li><li>只能字母、下划线和数字</li><li>只能以字母或下划线开头</li><li>不能是python的关键字，例如def、class就不能作为标识符</li><li>Python是大小写敏感的</li></ol></li><li><p>约定：  </p><ul><li>不允许使用中文  </li><li>不允许使用歧义单词，例如class_  </li><li>在python中不要随便使用下划线开头的表示符  </li></ul></li><li><p>常量</p><ul><li>一旦赋值就不能改变值的标识符</li><li>python中无法定义常量</li></ul></li><li><p>字面常量</p><ul><li>一个单独的量，例如 12、”abc” 、’2341356514.03e-9’</li></ul></li><li><p>变量</p><ul><li>赋值后，可以改变值的标识符</li></ul></li></ul><h2 id="Python的语言类型"><a href="#Python的语言类型" class="headerlink" title="Python的语言类型"></a>Python的语言类型</h2><ul><li><p>Python是动态语言、强类型语言</p></li><li><p>静态编译语言</p><ul><li>实现声明变量类型，类型不能再改变</li><li>编译时检查</li></ul></li><li><p>动态编译语言</p><ul><li>不用事先声明类型，随时可以赋值为其他类型</li><li>编程时不知道是什么类型，很难推断</li></ul></li><li><p>强类型语言</p><ul><li>不同类型之间操作，必须先强制类型转换为同一类型。print(‘a’+1)</li></ul></li><li><p>弱类型语言</p><ul><li>不同类型间可以操作，自动隐式转换，JavaScript中console.log(1+’a’)</li></ul></li></ul><h2 id="运算符-Operator"><a href="#运算符-Operator" class="headerlink" title="运算符 Operator"></a>运算符 Operator</h2><ul><li><p>算数运算符</p><ul><li>+ - * / % **</li><li>自然除/结果是浮点数，整除//。注：2.x中/和//都是整除</li></ul></li><li><p>位运算符</p><ul><li>&amp; | ~ ^ &lt;&lt; &gt;&gt;</li><li>常用方式：乘除2的倍数，32 // 4相当于 32 &gt;&gt; 2</li><li>12，0xc，0o14，0b1100<ul><li>~12等于多少，为什么</li></ul></li></ul></li></ul><h2 id="原码、反码、补码，负数表示法"><a href="#原码、反码、补码，负数表示法" class="headerlink" title="原码、反码、补码，负数表示法"></a>原码、反码、补码，负数表示法</h2><ul><li><p>原码</p><ul><li>5 =&gt; 0b101，1 =&gt; 0b1 ，-1 =&gt; -0b1， bin(-1)</li></ul></li><li><p>反码</p><ul><li>正数的反码与原码相同；负数的反码符号位不变其余按位取反</li></ul></li><li><p>补码</p><ul><li>正数的补码与原码相同；负数的补码符号位不变其余按位取反后+1<br>有符号数才用补码表示</li></ul></li><li><p>负数表示法</p><ul><li>数字电路的CPU中的运算器实现了加法器，但是没有减法器，减法是转换成加法</li><li>负数在计算机中使用补码存储，-1的补码为1111 1111</li><li>5-1 =&gt; 5+(-1)直觉上是0b101-0b1，其实计算机中是0b101+0b11111111，溢出位舍弃</li><li>~12为什么是-13？</li><li>10^9 等于？ 10^-9等于？为什么</li></ul></li></ul><p>&#160;&#160;&#160;&#160;  5 的补码 0000 0101<br>&#160;&#160;&#160;&#160;  -1 的原码 1000 0001<br>&#160;&#160;&#160;&#160;  -1 的补码 1111 1111  (0xff)<br>&#160;&#160;&#160;&#160;  5-1得 0000 0100</p><p>&#160;&#160;&#160;&#160; 12 的补码  0000 1100<br>&#160;&#160;&#160;&#160; ~12 是 1111 0011<br>&#160;&#160;&#160;&#160; 怎么从补码得到原码？<br>&#160;&#160;&#160;&#160; 与得到补码是一样的，最高位不变，其他位取反加一，即补码的补码就是原码<br>&#160;&#160;&#160;&#160; 1000 1101 (即-13)</p><ul><li><p>比较运算符</p><ul><li>== != &gt; &lt; &gt;= &lt;=</li><li>返回一个bool值</li><li>1 &lt; ‘1’ &#160; 报错 &#160;&#160;&#160;&#160;&#160; 1 == ‘1’ &#160; False</li><li>== 是可以不同类型比较的，除非 大于、小于等做类型重载，不然是不能比较的</li><li>链式比较操作符<ul><li>4&gt;3&gt;2  &#160;&#160;&#160;&#160;&#160;  4&gt;mynumber&gt;=1</li></ul></li></ul></li><li><p>逻辑运算符</p><ul><li>与或非 and or not</li><li>短路运算符<ul><li>and 如果第一个表达式为False，后面就没有必要计算了，这个逻辑表达式一定是False</li><li>or 如果第一个表达式True，后面没有必要计算了，这个逻辑表达式一定是True</li></ul></li></ul></li><li><p>赋值运算符</p><ul><li>a = min(3,5)</li><li>+= -= *= /= %= 等</li><li>x = y = z = 10<ul><li>尽量少用连等，因为如果右边是个引用就麻烦了</li></ul></li></ul></li><li><p>成员运算符</p><ul><li>in、not in</li></ul></li><li><p>身份运算符</p><ul><li>is 、is not</li></ul></li></ul><h2 id="运算符优先级（由高到低）"><a href="#运算符优先级（由高到低）" class="headerlink" title="运算符优先级（由高到低）"></a>运算符优先级（由高到低）</h2><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">‘expr’</td><td style="text-align:left">字符串转换</td></tr><tr><td style="text-align:left">{key:expr}</td><td style="text-align:left">字典</td></tr><tr><td style="text-align:left">[expr1, expr2, …]</td><td style="text-align:left">列表</td></tr><tr><td style="text-align:left">(expr1, expr2, …)</td><td style="text-align:left">元组</td></tr><tr><td style="text-align:left">function(expr, …)</td><td style="text-align:left">函数调用</td></tr><tr><td style="text-align:left">x[index:index]</td><td style="text-align:left">切片</td></tr><tr><td style="text-align:left">x[index]</td><td style="text-align:left">下标索引值</td></tr><tr><td style="text-align:left">x.attribute</td><td style="text-align:left">属性引用</td></tr><tr><td style="text-align:left">~x</td><td style="text-align:left">按位取反</td></tr><tr><td style="text-align:left">+x, -x</td><td style="text-align:left">正，负</td></tr><tr><td style="text-align:left">x**y</td><td style="text-align:left">幂</td></tr><tr><td style="text-align:left">x*y, x/y, x%y,</td><td style="text-align:left">乘法,除,取模</td></tr><tr><td style="text-align:left">x+y, x-y</td><td style="text-align:left">加，减</td></tr><tr><td style="text-align:left">x &lt;&lt; y, x &gt;&gt; y</td><td style="text-align:left">移位</td></tr><tr><td style="text-align:left">x&amp;y</td><td style="text-align:left">按位与</td></tr><tr><td style="text-align:left">x^y</td><td style="text-align:left">按位异或</td></tr><tr><td style="text-align:left">x\</td><td style="text-align:left">y</td><td>按位或</td></tr><tr><td style="text-align:left">x&lt;y, x&lt;=y , x==y, x!=y, x&gt;=y, x&gt;y</td><td style="text-align:left">比较</td></tr><tr><td style="text-align:left">x is y , x is not y</td><td style="text-align:left">等同测试</td></tr><tr><td style="text-align:left">x in y, x not in y</td><td style="text-align:left">成员测试</td></tr><tr><td style="text-align:left">not x</td><td style="text-align:left">逻辑否</td></tr><tr><td style="text-align:left">x and y</td><td style="text-align:left">逻辑与</td></tr><tr><td style="text-align:left">x or y</td><td style="text-align:left">逻辑或</td></tr><tr><td style="text-align:left">lambda arg, … : expr</td><td style="text-align:left">Lambda 匿名函数</td></tr></tbody></table><ul><li><p>算数运算符 &gt; 位运算符 &gt; 身份运算符 &gt; 成员运算符 &gt; 逻辑运算符 &gt; 赋值运算符</p><ul><li>位运算符也可以看成算术运算</li></ul></li><li><p>记不住，用括号</p></li><li><p>长表达式，多用括号，易懂、易读</p></li></ul><h2 id="表达式-Expression"><a href="#表达式-Expression" class="headerlink" title="表达式 Expression"></a>表达式 Expression</h2><ul><li>由数字、符号、括号、变量等的组合<ul><li>算数表达式</li><li>逻辑表达式</li><li>赋值表达式<ul><li>Python中，赋值即定义，如果一个变量已经定义，赋值相当于重新定义</li></ul></li></ul></li></ul><h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><ul><li><p>变量无须事先声明，也不需要指定类型</p><ul><li>动态语言的特性</li></ul></li><li><p>编程中一般无须关心变量的存亡，也不用关心内存的管理</p></li><li><p>python使用引用计数记录所有对象的引用数</p><ul><li>当对象引用数变为0，它就可以被 垃圾回收GC</li><li>计数增加：<ul><li>赋值给其它变量就增加引用计数，例如x=3;y=x</li></ul></li><li>计数减少：<ul><li>函数运行结束时，局部变量就会被自动销毁，对象引用计数减少</li><li>变量被赋值给其它对象。例如x=3;y=x;x=4</li></ul></li></ul></li><li><p>有关性能的时候，就需要考虑变量的引用问题，但是该释放内存，还是尽量不释放内存，看需求</p></li></ul><h2 id="程序控制"><a href="#程序控制" class="headerlink" title="程序控制"></a>程序控制</h2><ul><li><p>顺序</p><ul><li>按照先后顺序一条条执行</li><li>例如，先洗手，再吃饭，再洗碗</li></ul></li><li><p>分支</p><ul><li>根据不同的情况判断，条件满足执行某条件下的语句</li><li>例如，先洗手，如果饭没有做好，玩游戏，如果饭做好了，就吃饭，如果饭都没有做，叫外卖</li></ul></li><li><p>循环</p><ul><li>条件满足就反复执行，不满足就不执行或不再执行</li><li>例如，先洗手，看饭好了没有，没有好，一会来看一次是否好了，一会儿来看一次，直到饭好了，才可是吃饭。这里循环的条件是饭没有好，饭没有好，就循环的来看饭好了没有</li></ul></li></ul><h2 id="单分支结构"><a href="#单分支结构" class="headerlink" title="单分支结构"></a>单分支结构</h2><ul><li><p>if语句</p><ul><li>if condition:<ul><li>代码块</li></ul></li><li>condition必须是一个bool类型，这个地方有一个隐式转换bool(condition)</li><li>if 1&lt;2:<br>   &#160;&#160;&#160;&#160;print(‘1 less than 2’)</li></ul></li><li><p>代码块</p><ul><li>类似于if语句的冒号后面的就是一个语句块</li><li>在if、for、def、class等</li></ul></li></ul><h2 id="真值表"><a href="#真值表" class="headerlink" title="真值表"></a>真值表</h2><table><thead><tr><th style="text-align:left">对象/常量</th><th style="text-align:left">值</th></tr></thead><tbody><tr><td style="text-align:left">“”</td><td style="text-align:left">假</td></tr><tr><td style="text-align:left">“string”</td><td style="text-align:left">真</td></tr><tr><td style="text-align:left">0</td><td style="text-align:left">假</td></tr><tr><td style="text-align:left">&gt;=1</td><td style="text-align:left">真</td></tr><tr><td style="text-align:left">&lt;=-1</td><td style="text-align:left">真</td></tr><tr><td style="text-align:left">()空元组</td><td style="text-align:left">假</td></tr><tr><td style="text-align:left">[]空列表</td><td style="text-align:left">假</td></tr><tr><td style="text-align:left">{}空字典</td><td style="text-align:left">假</td></tr><tr><td style="text-align:left">None</td><td style="text-align:left">假</td></tr></tbody></table><ul><li>False等价布尔值，相当于bool(value)<ul><li>空集合<ul><li>空字符串</li><li>空字典</li><li>空列表</li><li>空元祖</li></ul></li><li>None对象</li><li>0</li></ul></li></ul><h2 id="多分支结构"><a href="#多分支结构" class="headerlink" title="多分支结构"></a>多分支结构</h2><ul><li><p>if…elif…else语句<br>&#160;&#160;&#160;&#160;if condition1:<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;代码块1<br>&#160;&#160;&#160;&#160;elif condition2:<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;代码块2<br>&#160;&#160;&#160;&#160;elif condition3:<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;代码块3<br>&#160;&#160;&#160;&#160;……<br>&#160;&#160;&#160;&#160;else:<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;代码块  </p></li><li><p>举例<br>&#160;&#160;&#160;&#160;a = 5<br>&#160;&#160;&#160;&#160;if a&lt;0:<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;print(‘negative’)<br>&#160;&#160;&#160;&#160;elif a==0:<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;print(‘zero’)<br>&#160;&#160;&#160;&#160;else:<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;print(‘positive’)  </p></li></ul><h2 id="分支嵌套"><a href="#分支嵌套" class="headerlink" title="分支嵌套"></a>分支嵌套</h2><ul><li><p>举例<br>&#160;&#160;&#160;&#160;score = 80<br>&#160;&#160;&#160;&#160;&#160;if score&lt;0:<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;print(‘wrong’)<br>&#160;&#160;&#160;&#160;else:<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if score==0:<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;print(‘egg’)<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;elif score &lt;= 100:<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;print(‘right’)<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else:<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;print(‘too big’)  </p></li><li><p>嵌套结构，可以是分支、循环的嵌套</p></li><li><p>可以互相嵌套多层</p></li><li><p>练习：给定一个不超过5位的正整数，判断其有几位  </p><ul><li>使用 input 函数，input返回的是字符串</li><li>如果位数多的话可以用折半</li><li>num = 8<br>if (num /= 10) == 0: &#160;&#160;&#160;&#160; 为什么这里报错<br>&#160;&#160;&#160;&#160;print(‘1位数’)</li></ul></li></ul><h2 id="循环——while语句"><a href="#循环——while语句" class="headerlink" title="循环——while语句"></a>循环——while语句</h2><ul><li><p>语法<br>&#160;&#160;&#160;&#160;while condition:<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;block  </p><ul><li>当条件满足即condition为True，进入循环体，执行block</li></ul></li><li><p>举例<br>&#160;&#160;&#160;&#160;flag=10<br>&#160;&#160;&#160;&#160;while flag:<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;print(flag)<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;flag -= 1  </p><ul><li>执行结果是什么？为什么？</li><li>如果flag=-10可以吗？如何改造？</li></ul></li></ul><h2 id="循环——for语句"><a href="#循环——for语句" class="headerlink" title="循环——for语句*"></a>循环——for语句*</h2><ul><li><p>语法</p><ul><li>for element in iteratable:<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;block</li><li>当可迭代对象中有元素可以迭代，进入循环体，执行block</li></ul></li><li><p>range函数  </p></li><li><p>举例：打印1~10<br>&#160;&#160;&#160;&#160;for i in range(10):<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;print(i+1)  </p><ul><li>执行结果是什么？为什么？</li><li>如果想倒序打印呢</li></ul></li></ul><h2 id="循环-continue语句"><a href="#循环-continue语句" class="headerlink" title="循环 continue语句"></a>循环 continue语句</h2><ul><li><p>中断当前循环的当次执行，继续下一次循环</p></li><li><p>举例：计算10以内的偶数（for循环）<br>&#160;&#160;&#160;&#160;for i in range(10):<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if not i%2:  &#160;&#160;&#160;&#160; # i%2==0这么写也行<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;print(i)  </p></li><li>还有其它的实现吗？</li></ul><p>&#160;&#160;&#160;&#160;for i in range(0,10,2):<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;print(i)  </p><p>&#160;&#160;&#160;&#160;for i in range(0,10):<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if i &amp; 1: &#160;&#160;&#160;&#160;# 或用 i%2  表示奇数就continue<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;continue<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;print(i)  </p><h2 id="循环-break语句"><a href="#循环-break语句" class="headerlink" title="循环 break语句"></a>循环 break语句</h2><ul><li>终止当前循环</li><li>举例：计算1000以内的被7整除的前20个数（for循环）<br>&#160;&#160;&#160;&#160;count = 0<br>&#160;&#160;&#160;&#160;for i in range(0,1000,7):<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;print(i)<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;count += 1<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if count &gt;= 20:<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;break</li></ul><h2 id="循环-continue、break语句"><a href="#循环-continue、break语句" class="headerlink" title="循环 continue、break语句"></a>循环 continue、break语句</h2><ul><li><p>总结</p><ul><li>continue和break是循环的控制语句，只影响当前循环，包括while、for循环</li><li>如果循环嵌套， continue和break也只影响语句所在的那一层循环</li><li>continue和break 不是跳出语句块，所以 if cond: break 不是跳出if，而是终止if外的break所在的循环</li></ul></li><li><p>练习：<br>给定一个不超过5位的正整数，判断该数的位数，依次打印出个位、十位、百位、千位、万位的数字  </p></li></ul><h2 id="循环-else子句"><a href="#循环-else子句" class="headerlink" title="循环 else子句"></a>循环 else子句</h2><ul><li><p>语法<br>&#160;&#160;&#160;&#160;while condition:<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;block<br>&#160;&#160;&#160;&#160;else:<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;block<br>&#160;&#160;&#160;&#160;for element in iteratable:<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;block<br>&#160;&#160;&#160;&#160;else:<br>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;block  </p></li><li><p>如果循环正常的执行结束，就执行else子句；如果使用break终止，else子句不会执行</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第二章-Python-基础语法&quot;&gt;&lt;a href=&quot;#第二章-Python-基础语法&quot; class=&quot;headerlink&quot; title=&quot;第二章 - Python 基础语法&quot;&gt;&lt;/a&gt;第二章 - Python 基础语法&lt;/h1&gt;&lt;h2 id=&quot;基本语法&quot;&gt;&lt;a 
      
    
    </summary>
    
      <category term="python-mageedu" scheme="https://herodanny.github.io/categories/python-mageedu/"/>
    
    
      <category term="python" scheme="https://herodanny.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python-mageedu-笔记1</title>
    <link href="https://herodanny.github.io/python-mageedu-notes1.html"/>
    <id>https://herodanny.github.io/python-mageedu-notes1.html</id>
    <published>2019-04-19T12:16:49.000Z</published>
    <updated>2019-04-20T09:30:28.874Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-Python-环境搭建"><a href="#第一章-Python-环境搭建" class="headerlink" title="第一章 - Python 环境搭建"></a>第一章 - Python 环境搭建</h1><h2 id="操作系统准备"><a href="#操作系统准备" class="headerlink" title="操作系统准备"></a>操作系统准备</h2><p>准备Linux最小系统即可。 </p><p>如果在虚拟机中克隆，MAC地址会变。 这里使用CentOS 6.5+ </p><h2 id="Pyenv-安装"><a href="#Pyenv-安装" class="headerlink" title="Pyenv 安装"></a>Pyenv 安装</h2><ol><li>安装git </li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install git -y</span><br></pre></td></tr></table></figure><ol start="2"><li>安装Python编译依赖 </li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc make patch gdbm-devel openssl-devel sqlite-devel  readline-devel zlib-devel bzip2-devel</span><br></pre></td></tr></table></figure><ol start="3"><li>创建用户python </li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd python </span><br><span class="line">passwd python</span><br></pre></td></tr></table></figure><ol start="4"><li>使用python用户登录后安装Pyenv </li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash</span><br></pre></td></tr></table></figure><p>下载的 pyenv-installer 是一个shell脚本。<br>注意： </p><ol><li>在 <a href="https://github.com/pyenv/pyenv-installer" target="_blank" rel="noopener">https://github.com/pyenv/pyenv-installer</a> 有安装文档 </li><li><p>如果curl出现 curl: (35) SSL connect error ，是nss版本低的问题，更新它。 可能需要配置一个有较新包的yum源 </p><pre><code>[updates] name=CentOS-Updates baseurl=https://mirrors.aliyun.com/centos/6.9/os/x86_64 gpgcheck=0 </code></pre></li></ol><p>然后更新nss<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum update nss</span><br></pre></td></tr></table></figure></p><ol start="5"><li>在python用户的~/.bash_profile中追加 </li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="string">"/home/python/.pyenv/bin:<span class="variable">$PATH</span>"</span> </span><br><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(pyenv init -)</span>"</span> </span><br><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(pyenv virtualenv-init -)</span>"</span> </span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure><p>这样当用户启动的时候，会执行用户的 .bash_profile 中的脚本，就会启动pyenv。 安装好的pyenv 就在~/.pyenv中 </p><h2 id="Pyenv-使用"><a href="#Pyenv-使用" class="headerlink" title="Pyenv 使用"></a>Pyenv 使用</h2><p>python 版本及path路径<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python --version </span><br><span class="line">python -V </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span></span><br></pre></td></tr></table></figure></p><p>可以看到当前系统Python路径 </p><p>pyenv 命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pyenv</span><br><span class="line">pyenv <span class="built_in">help</span> install</span><br></pre></td></tr></table></figure></p><p>列出所有可用版本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyenv install --list</span><br></pre></td></tr></table></figure></p><p>安装指定版本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pyenv install 3.5.3 -v <span class="comment"># 加 -v 可以看详细过程 verbose</span></span><br><span class="line">pyenv versions</span><br></pre></td></tr></table></figure></p><p>会从python官网下载安装压缩包到 /tmp 目录，很慢，为了提速，可选用cache方法。</p><p>使用缓存方式安装<br>在~/.pyenv目录下，新建cache目录，放入下载好的待安装版本的文件。  </p><p>不确定要哪一个文件，把下载的3个文件都放进去。一般放 ‘tar.xz’ 包。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ scp ~/Downloads/Python-3.5.3.tar.xz root@10.211.55.6:~/.pyenv/cache</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyenv install 3.5.3 -v</span><br></pre></td></tr></table></figure><p>安装后的python文件夹在 .pyenv/versions 下。<br>cache文件夹里有下载的压缩包。  </p><p>pyenv 的 python版本控制<br>version 显示当前的python版本 versions 显示所有可用的python版本，和当前版本。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pyenv version</span><br><span class="line">pyenv versions</span><br></pre></td></tr></table></figure></p><p>global 全局设置<br><code>pyenv global 3.5.3</code> 可以看到所有受pyenv控制的窗口中都是3.5.3的python版本了。 这里用global是作用于非root用户python用户上，如果是root用户安装，请不要使用global，否则影响太大。比如，这里使用的CentOS6.5就是Python2.6，使用了global就成了3.x，会带来很不好的影响。 <code>pyenv global system</code> 回到原来系统版本。  </p><p>shell 会话设置<br>影响只作用于当前会话 <code>pyenv shell 3.5.3</code><br>是会话级的，一旦断开sessionid也变了，也不好用。  </p><p>local 本地设置<br>使用pyenv local设置从当前工作目录开始向下递归都继承这个设置。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pyenv <span class="built_in">local</span> 3.5.3</span><br><span class="line">python -V</span><br><span class="line"><span class="comment"># 可能还是显示原来的版本，用pyenv version，要在虚拟环境中python -V 才会显示新的版本</span></span><br></pre></td></tr></table></figure></p><p>也可以使用 anaconda，pyenv 是自己下源码编，某些情况下可能不如 anaconda 直接编好的二进制分发。  </p><h2 id="Virtualenv-虚拟环境设置"><a href="#Virtualenv-虚拟环境设置" class="headerlink" title="Virtualenv 虚拟环境设置"></a>Virtualenv 虚拟环境设置</h2><p>为什么要使用虚拟环境？ 因为刚才使用的Python环境都是一个公共的空间，如果多个项目使用不同Python版本开发，或者使用不同的Python版本部署运行，或者使用同样的版本开发的但不同项目使用了不同版本的库，等等这些问题都会带来冲突。最好的解决办法就是每一个项目独立运行自己的“独立小环境”中。  </p><p>使用插件，在plugins/pyenv-virtualenv中<br><code>pyenv virtualenv 3.5.3 mag353</code><br>使用python3.5.3版本创建出一个独立的虚拟空间 mag353。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ pyenv versions</span><br><span class="line">* system (<span class="built_in">set</span> by /home/python/.pyenv/version)</span><br><span class="line">3.5.3</span><br><span class="line">3.5.3/envs/mag353</span><br><span class="line">mag353</span><br></pre></td></tr></table></figure><p>可以在版本列表中存在，就和3.5.3是一样的，就是一个版本了。以后只要使用这个虚拟版本，包就会按照到这些对应的目录下去，而不是使用3.5.3。<br>可以看到真实的虚拟环境是下 envs/ 目录下。<br>.pyenv/versions/ 下是软链接。  </p><p>在需要设置python版本的文件夹路径下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pyenv <span class="built_in">local</span> mag353</span><br><span class="line">pyenv versions</span><br></pre></td></tr></table></figure></p><p>怎么会起作用的，是利用了一堆隐藏文件和在 .bash_profile 中添加的那几指令。</p><p>现在可以对python进行版本的管理，包的管理。</p><h2 id="pip-通用配置"><a href="#pip-通用配置" class="headerlink" title="pip 通用配置"></a>pip 通用配置</h2><p>pip 是Python的包管理工具，3.x的版本直接带了，可以直接使用。 和yun一样为了使用国内镜像，如下配置。<br><code>mkdir ~/.pip</code><br>配置文件在 ~/.pip/pip.conf  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url=https://mirrors.aliyun.com/pypi/simple/</span><br><span class="line">trusted-host=mirrors.aliyun.com</span><br></pre></td></tr></table></figure><h2 id="安装-ipython"><a href="#安装-ipython" class="headerlink" title="安装 ipython"></a>安装 ipython</h2><p>ipython 是增强的交互式 Python 命令行工具<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install ipython  </span><br><span class="line">ipython</span><br></pre></td></tr></table></figure></p><h2 id="安装-Jupyter"><a href="#安装-Jupyter" class="headerlink" title="安装 Jupyter"></a>安装 Jupyter</h2><p>Jupyter 是基于WEB的交互式笔记本，其中可以非常方便的使用Python。<br>安装Jupyter，也会安装ipython的。  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pip install jupyter</span><br><span class="line">jupyter notebook <span class="built_in">help</span></span><br><span class="line">jupyter notebook passwd <span class="comment"># 设置下浏览器访问时的密码</span></span><br><span class="line">jupyter notebook --ip=0.0.0.0 --no-browser</span><br><span class="line">ss -tanl</span><br></pre></td></tr></table></figure><p>浏览器不能访问是服务器端防火墙问题。  </p><p>快捷键：shift + enter(运行)、ctrl + enter(运行)、dd(删除一行)、m(用mardkown)</p><h2 id="导出包"><a href="#导出包" class="headerlink" title="导出包"></a>导出包</h2><p>虚拟环境的好处就在于和其他项目运行环境隔离。每一个独立的环境都可以使用pip命令导出已经安装的包，在另一个环境中安装这些包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(mag353) [python@node web]$ pip freeze &gt; requirement</span><br><span class="line">(mag353) [python@node web]$ mkdir ~/magedu/projects/pro1</span><br><span class="line">(mag353) [python@node web]$ <span class="built_in">cd</span> ~/magedu/projects/pro1</span><br><span class="line">[python@node pro1]$ pyenv install --list</span><br><span class="line">[python@node pro1]$ pyenv install 3.6.4</span><br><span class="line">[python@node pro1]$ pyenv virtualenv 3.6.4 mag364</span><br><span class="line">[python@node pro1]$ pyenv <span class="built_in">local</span> mag364</span><br><span class="line">(mag364) [python@node pro1]$ mv ../web/requirement ./</span><br><span class="line">(mag364) [python@node pro1]$ pip install -r requirement</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第一章-Python-环境搭建&quot;&gt;&lt;a href=&quot;#第一章-Python-环境搭建&quot; class=&quot;headerlink&quot; title=&quot;第一章 - Python 环境搭建&quot;&gt;&lt;/a&gt;第一章 - Python 环境搭建&lt;/h1&gt;&lt;h2 id=&quot;操作系统准备&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="python-mageedu" scheme="https://herodanny.github.io/categories/python-mageedu/"/>
    
    
      <category term="python" scheme="https://herodanny.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>用VsCode写Markdown</title>
    <link href="https://herodanny.github.io/vscodewritemarkdown.html"/>
    <id>https://herodanny.github.io/vscodewritemarkdown.html</id>
    <published>2019-04-18T07:47:28.000Z</published>
    <updated>2019-04-18T12:52:19.651Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Markdown-基本语法"><a href="#Markdown-基本语法" class="headerlink" title="Markdown 基本语法"></a>Markdown 基本语法</h1><h2 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h2><p>非常自然，一行文字就是一个段落。</p><p>比如：</p><pre><code>这是一个段落</code></pre><p>会被解释成：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果你需要另起一段，请在两个段落之间隔一个空行。</p><pre><code>这是一个段落。这是另一个段落。</code></pre><p>会被解释成</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是另一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>不隔一个空行的换行行为，在一些编辑器中被解释为换行，即插入一个<br>标签。对与另外一些编辑器，会被解释为插入一个空格。对于后者，若要插入换行标签，请在当前一行的结尾打两个空格。(vscode 就是后者，typora 普通模式是前者，源码模式和 vscode 一样是后者)</p><p>没用空一行，在结尾打两个空格的换行，还在一个段落中。</p><h2 id="粗体、斜体"><a href="#粗体、斜体" class="headerlink" title="粗体、斜体"></a>粗体、斜体</h2><p>可以使用星号*或下划线_指定粗体或者斜体。</p><pre><code>*这是斜体*_这也是斜体_**这是粗体*****这是粗体+斜体***</code></pre><p>会被解释成</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>这是斜体<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>这也是斜体<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>这是粗体<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>这是粗体+斜体<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p>一部分编辑器支持删除线，它不是经典 markdown 中的要素。用波浪线~定义删除线。</p><pre><code>~~就像这样~~</code></pre><p>会被解释成</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">strike</span>&gt;</span>就像这样<span class="tag">&lt;/<span class="name">strike</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>markdown 总支持 1~6 六级标题，通过在一行之前加上不同数量的井号来表示。</p><pre><code># 这是 H1 ### 这是 H2 ##### 这是 H3 ###...###### 这是 H6 ######</code></pre><p>行尾可以加上任意数量的井号字符，这些字符不会算作标题内容。通常会加上相等数量的字符以保持对称。</p><p>此外，H1 和 H2 也可以采用在文本下方添加底线来实现，比如：</p><pre><code>这是 H1=======这是 H2-------</code></pre><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>通过在行首加上大于号&gt;来添加引用格式。</p><pre><code>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisseid sem consectetuer libero luctus adipiscing.</code></pre><blockquote><p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,<br>consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.<br>Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p></blockquote><blockquote><p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse<br>id sem consectetuer libero luctus adipiscing.</p></blockquote><p>引用可以嵌套：</p><pre><code>&gt; This is the first level of quoting.&gt;&gt; &gt; This is nested blockquote.&gt;&gt; Back to the first level.</code></pre><blockquote><p>This is the first level of quoting.</p><blockquote><p>This is nested blockquote.</p></blockquote><p>Back to the first level.</p></blockquote><p>也可以嵌套其他格式：</p><pre><code>&gt; ## 这是一个标题。&gt;&gt; 1.   这是第一行列表项。&gt; 2.   这是第二行列表项。&gt;&gt; 给出一些例子代码：&gt;&gt;     return shell_exec(&quot;echo $input | $markdown_script&quot;);</code></pre><blockquote><h2 id="这是一个标题。"><a href="#这是一个标题。" class="headerlink" title="这是一个标题。"></a>这是一个标题。</h2><ol><li>这是第一行列表项。</li><li>这是第二行列表项。</li></ol><p>给出一些例子代码：</p><pre><code>return shell_exec(&quot;echo $input | $markdown_script&quot;);</code></pre></blockquote><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>无序列表使用星号、加号或是减号作为列表标记：</p><pre><code>*   Red*   Green*   Blue</code></pre><ul><li>Red</li><li>Green</li><li>Blue</li></ul><p>等同于</p><pre><code>+   Red+   Green+   Blue</code></pre><p>和</p><pre><code>-   Red-   Green-   Blue</code></pre><p>有序列表则使用数字接着一个英文句点：  </p><pre><code>1.  Bird2.  McHale3.  Parish</code></pre><ol><li>Bird</li><li>McHale</li><li>Parish</li></ol><h2 id="内敛代码"><a href="#内敛代码" class="headerlink" title="内敛代码"></a>内敛代码</h2><p>用反引号 ` 来标记内联代码，它们会解释成 <code>&lt;code&gt;</code> 标签。如果代码的内容中有反引号，请用两个反引号包裹。</p><h2 id="代码区域"><a href="#代码区域" class="headerlink" title="代码区域"></a>代码区域</h2><p>有两种方式标记代码区域，原生风格是行首缩进四个空格。</p><p>这是一个普通段落：</p><pre><code>这是一个代码区块。</code></pre><p>会被解释成</p><pre><code>&lt;p&gt;这是一个普通段落：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;这是一个代码区块。&lt;/code&gt;&lt;/pre&gt;</code></pre><h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span><span class="bullet">* *</span></span><br><span class="line"><span class="emphasis">***</span></span><br><span class="line"><span class="strong">*****</span></span><br><span class="line"><span class="bullet">- </span>- -</span><br><span class="line">---------------------------------------</span><br></pre></td></tr></table></figure><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><pre><code>[an example](http://example.com/)[an example](http://example.com/ &quot;Optional Title&quot;)</code></pre><p>会被解释为</p><pre><code>&lt;a href=&apos;http://example.com/&apos;&gt;an example&lt;/a&gt;&lt;a href=&apos;http://example.com/&apos; title=&quot;Optional Title&quot;&gt;an example&lt;/a&gt;</code></pre><p>除了上面的行内式，也可以使用参考式：</p><pre><code>[an example][id]</code></pre><p>然后在任意空白位置定义：</p><pre><code>[id]: http://example.com/ &quot;Optional Title&quot;</code></pre><h2 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h2><pre><code>![Alt text](/path/to/img.jpg)![Alt text](/path/to/img.jpg &quot;Optional Title&quot;)</code></pre><p>会被解释为</p><pre><code>&lt;img src=&apos;/path/to/img.jpg&apos; alt=&apos;Alt text&apos; /&gt;&lt;img src=&apos;/path/to/img.jpg&apos; alt=&apos;Alt text&apos; title=&apos;Optional Title&apos; /&gt;</code></pre><p>同样，图像也有类似的参考式语法。</p><h2 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h2><p>如果链接的地址和名字重复，可以用尖括号语法将其简化。</p><pre><code>&lt;http://example.com/&gt;</code></pre><p>就相当于</p><pre><code>[http://example.com/](http://example.com/)</code></pre><p>切记，大多数编辑器都会自动将符合url规则的东西视为链接，并且解释成链接。很多时候作者由于疏忽等缘故，链接和后面的中文之间缺少空格，导致链接不正常。所以我建议，链接要么加上尖括号，要么两端加上空格。</p><h2 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h2><p>markdown支持在以下字符前面插入反斜杠</p><pre><code>\   反斜线`   反引号*   星号_   底线{}  花括号[]  方括号()  括弧#   井字号+   加号-   减号.   英文句点!   惊叹号</code></pre><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><pre><code>| Item     | Value |  Qty  || :------- | ----: | :---: || Computer | $1600 |   5   || Phone    |   $12 |  12   || Pipe     |    $1 |  234  |</code></pre><p>会被解释成</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">th</span> <span class="attr">align</span>=<span class="string">"left"</span>&gt;</span>Item<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">th</span> <span class="attr">align</span>=<span class="string">"right"</span>&gt;</span>Value<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">th</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>Qty<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"left"</span>&gt;</span>Computer<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"right"</span>&gt;</span>$1600<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"left"</span>&gt;</span>Phone<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"right"</span>&gt;</span>$12<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>12<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"left"</span>&gt;</span>Pipe<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"right"</span>&gt;</span>$1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>234<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>要注意第二行的冒号决定了居左居右还是居中，如果你不加冒号，默认是居左的。</p><p>另外可以把第一行去掉，做成没有表头的表格，但第二行始终是要有的。</p><h2 id="内联-HTML"><a href="#内联-HTML" class="headerlink" title="内联 HTML"></a>内联 HTML</h2><p>markdown 的语法简洁，但有其局限性，所以特意保留了内联html这种方式。任何html标签及其内容，都会原样输出到结果中。也就是说，标签中的星号等作为markdown结构的符号，以及构成html标签和实体的符号，都不会做任何转义。</p><h2 id="vscode-markdown-扩展"><a href="#vscode-markdown-扩展" class="headerlink" title="vscode markdown 扩展"></a>vscode markdown 扩展</h2><p>Markdown All in One<br>Markdown Shortcuts</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Markdown-基本语法&quot;&gt;&lt;a href=&quot;#Markdown-基本语法&quot; class=&quot;headerlink&quot; title=&quot;Markdown 基本语法&quot;&gt;&lt;/a&gt;Markdown 基本语法&lt;/h1&gt;&lt;h2 id=&quot;段落&quot;&gt;&lt;a href=&quot;#段落&quot; cla
      
    
    </summary>
    
      <category term="before-development" scheme="https://herodanny.github.io/categories/before-development/"/>
    
    
      <category term="markdown" scheme="https://herodanny.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>my blog test</title>
    <link href="https://herodanny.github.io/my-blog-test.html"/>
    <id>https://herodanny.github.io/my-blog-test.html</id>
    <published>2019-04-13T03:59:37.000Z</published>
    <updated>2019-04-15T10:05:00.642Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Anima"><a href="#Anima" class="headerlink" title="Anima"></a>Anima</h1><!--<p align="center">    <a href="https://github.com/biezhi/anima/wiki"><img src="screenshot/cover.png" width="623"/></a></p>--><p><code>Anima</code> allows you to query database like <code>SQL</code> and <code>Stream</code>.<br>a simple DSL syntax, supports multiple databases, integrates well with Java8,<br>supports multiple relational mappings, and is a database manipulation tool.</p><p><strong><a href="https://github.com/biezhi/anima/wiki" target="_blank" rel="noopener">Document</a></strong></p><p><a href="https://travis-ci.org/biezhi/anima" target="_blank" rel="noopener"><img src="https://travis-ci.org/biezhi/anima.svg?branch=master" alt="Travis Build"></a><br><a href="https://mvnrepository.com/artifact/io.github.biezhi/anima" target="_blank" rel="noopener"><img src="https://img.shields.io/maven-central/v/io.github.biezhi/anima.svg" alt></a></p><a id="more"></a><h2 id="Feature"><a href="#Feature" class="headerlink" title="Feature"></a>Feature</h2><ul><li>Simple DSL </li><li>H2、MySQL、SQLite、PostgreSQL、Oracle、SqlServer </li><li>Paging support </li><li>Flexible configuration </li><li>Connection pool support</li><li>Support <code>LocalDate</code>、<code>LocalDateTime</code></li><li>Support lambda expression</li><li>Relationship (<code>hasOne</code>、<code>hasMany</code>、<code>belongsTo</code>)</li><li>SQL performance statistics</li><li>Based Java8</li></ul><h1 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h1><p><strong>Latest snapshot version</strong></p><blockquote><p>If you want to prioritize new features or some BUG fixes you can use it, you need to specify the snapshot repository in <code>pom.xml</code></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>snapshots-repo<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://oss.sonatype.org/content/repositories/snapshots<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.biezhi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>anima<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.4-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Here’s the <code>RELEASE</code> version.</p><p><strong>As Gradle</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile <span class="string">'io.github.biezhi:anima:0.2.3'</span></span><br></pre></td></tr></table></figure><p><strong>As Maven</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.biezhi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>anima<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>📒 Although <code>Anima</code> can also be used by adding a jar package, we do not recommend doing this.</p></blockquote><h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><p><strong>Open Connection</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MySQL</span></span><br><span class="line">Anima.open(<span class="string">"jdbc:mysql://127.0.0.1:3306/demo"</span>, <span class="string">"root"</span>, <span class="string">"123456"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// SQLite</span></span><br><span class="line">Anima.open(<span class="string">"jdbc:sqlite:./demo.db"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// H2</span></span><br><span class="line">Anima.open(<span class="string">"jdbc:h2:file:~/demo;FILE_LOCK=FS;PAGE_SIZE=1024;CACHE_SIZE=8192"</span>, <span class="string">"sa"</span>, <span class="string">""</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// DataSource</span></span><br><span class="line">DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">dataSource.setDriverClassName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">dataSource.setUrl(blade.environment().getOrNull(<span class="string">"jdbc.url"</span>));</span><br><span class="line">dataSource.setUsername(blade.environment().getOrNull(<span class="string">"jdbc.username"</span>));</span><br><span class="line">dataSource.setPassword(blade.environment().getOrNull(<span class="string">"jdbc.password"</span>));</span><br><span class="line">Anima.open(dataSource);</span><br></pre></td></tr></table></figure><blockquote><p>📕 This operation only needs one time</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Model</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String  userName;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String userName, Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Table Structure</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`users`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="keyword">IDENTITY</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  <span class="string">`user_name`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`age`</span> <span class="built_in">int</span>(<span class="number">11</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> count = select().from(User.class).count();</span><br><span class="line"><span class="comment">// SELECT COUNT(*) FROM users</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> count = select().from(User.class).where(<span class="string">"age &gt; ?"</span>, <span class="number">15</span>).isNotNull(<span class="string">"user_name"</span>).count();</span><br><span class="line"><span class="comment">// SELECT COUNT(*) FROM users WHERE age &gt; ? AND user_name IS NOT NULL</span></span><br><span class="line"></span><br><span class="line">User user = select().from(User.class).byId(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE id = ?</span></span><br><span class="line"></span><br><span class="line">List&lt;User&gt; users = select().from(User.class).byIds(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE id IN (?, ?, ?)</span></span><br><span class="line"></span><br><span class="line">String name = select().bySQL(String.class, <span class="string">"select user_name from users limit 1"</span>).one();</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; names = select().bySQL(String.class, <span class="string">"select user_name from users limit ?"</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">List&lt;User&gt; users = select().from(User.class).all();</span><br><span class="line"><span class="comment">// SELECT * FROM users</span></span><br><span class="line"></span><br><span class="line">List&lt;User&gt; users = select().from(User.class).like(<span class="string">"user_name"</span>, <span class="string">"%o%"</span>).all();</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE user_name LIKE ?</span></span><br></pre></td></tr></table></figure><p><strong>Limit</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; users = select().from(User.class).order(<span class="string">"id desc"</span>).limit(<span class="number">5</span>);</span><br><span class="line"><span class="comment">// SELECT * FROM users ORDER BY id desc</span></span><br></pre></td></tr></table></figure><p><strong>Paging</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Page&lt;User&gt; userPage = select().from(User.class).order(<span class="string">"id desc"</span>).page(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">// SELECT * FROM users ORDER BY id desc LIMIT ?, ?</span></span><br></pre></td></tr></table></figure><p><strong>Map</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select().from(User.class).map(User::getUserName).limit(<span class="number">3</span>).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><p><strong>Filter</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select().from(User.class).filter(u -&gt; u.getAge() &gt; <span class="number">10</span>).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><p><strong>Lambda</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User user = select().from(User.class).where(User::getUserName).eq(<span class="string">"jack"</span>).one();</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE user_name = ?</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; user = select().from(User.class)</span><br><span class="line">                .where(User::getUserName).notNull()</span><br><span class="line">                .and(User::getAge).gt(<span class="number">10</span>)</span><br><span class="line">                .all();</span><br><span class="line"><span class="comment">// SELECT * FROM users WHERE user_name IS NOT NULL AND age &gt; ?</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select().from(User.class).order(User::getId, OrderBy.DESC).order(User::getAge, OrderBy.ASC).all();</span><br><span class="line"><span class="comment">// SELECT * FROM users ORDER BY  id DESC, age ASC</span></span><br></pre></td></tr></table></figure><p><strong>Join</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Table</span>(name = <span class="string">"order_info"</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderInfo</span> <span class="keyword">extends</span> <span class="title">Model</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"productname"</span>)</span><br><span class="line">    <span class="keyword">private</span> String productName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Ignore</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Ignore</span></span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HasOne</span></span><br><span class="line">OrderInfo orderInfo = select().from(OrderInfo.class)</span><br><span class="line">        .join(</span><br><span class="line">            Joins.with(Address.class).as(OrderInfo::getAddress)</span><br><span class="line">                 .on(OrderInfo::getId, Address::getOrderId)</span><br><span class="line">        ).byId(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">orderInfo = select().from(OrderInfo.class)</span><br><span class="line">        .join(</span><br><span class="line">            Joins.with(Address.class).as(OrderInfo::getAddress)</span><br><span class="line">                 .on(OrderInfo::getId, Address::getOrderId)</span><br><span class="line">        )</span><br><span class="line">        .join(</span><br><span class="line">                Joins.with(User.class).as(OrderInfo::getUser)</span><br><span class="line">                        .on(OrderInfo::getUid, User::getId)</span><br><span class="line">        ).byId(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ManyToOne</span></span><br><span class="line">orderInfo = select().from(OrderInfo.class)</span><br><span class="line">        .join(</span><br><span class="line">            Joins.with(User.class).as(OrderInfo::getUser)</span><br><span class="line">                 .on(OrderInfo::getUid, User::getId)</span><br><span class="line">        ).byId(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// OneToMany</span></span><br><span class="line">UserDto userDto = select().from(UserDto.class).join(</span><br><span class="line">            Joins.with(OrderInfo.class).as(UserDto::getOrders)</span><br><span class="line">                 .on(UserDto::getId, OrderInfo::getUid)</span><br><span class="line">        ).byId(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><h3 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a>Insert</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer id = <span class="keyword">new</span> User(<span class="string">"biezhi"</span>, <span class="number">100</span>).save().asInt();</span><br><span class="line"><span class="comment">// INSERT INTO users(id,user_name,age) VALUES (?,?,?)</span></span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Anima.save(<span class="keyword">new</span> User(<span class="string">"jack"</span>, <span class="number">100</span>));</span><br></pre></td></tr></table></figure><p><strong>Batch Save</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">users.add(<span class="keyword">new</span> User(<span class="string">"user1"</span>, <span class="number">10</span>));</span><br><span class="line">users.add(<span class="keyword">new</span> User(<span class="string">"user2"</span>, <span class="number">11</span>));</span><br><span class="line">users.add(<span class="keyword">new</span> User(<span class="string">"user3"</span>, <span class="number">12</span>));</span><br><span class="line">Anima.saveBatch(users);</span><br></pre></td></tr></table></figure><blockquote><p>📘 This operation will begin a transaction and rollback when there is a transaction that is unsuccessful.</p></blockquote><h3 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> result  = update().from(User.class).set(<span class="string">"user_name"</span>, newName).where(<span class="string">"id"</span>, <span class="number">1</span>).execute();</span><br><span class="line"><span class="comment">// UPDATE users SET username = ? WHERE id = ?</span></span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> result = update().from(User.class).set(<span class="string">"user_name"</span>, newName).where(<span class="string">"id"</span>, <span class="number">1</span>).execute();</span><br><span class="line"><span class="comment">// UPDATE users SET user_name = ? WHERE id = ?</span></span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setId(<span class="number">1</span>);</span><br><span class="line">user.setUserName(<span class="string">"jack"</span>);</span><br><span class="line">user.update();</span><br><span class="line"><span class="comment">// UPDATE users SET user_name = ? WHERE id = ?</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update().from(User.class).set(User::getUserName, <span class="string">"base64"</span>).updateById(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update().from(User.class).set(User::getUserName, <span class="string">"base64"</span>).where(User::getId).eq(<span class="number">2</span>).execute();</span><br></pre></td></tr></table></figure><h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> result = delete().from(User.class).where(<span class="string">"id"</span>, <span class="number">1</span>).execute();</span><br><span class="line"><span class="comment">// DELETE FROM users WHERE id = ?</span></span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setAge(<span class="number">15</span>);</span><br><span class="line">user.setUserName(<span class="string">"jack"</span>);</span><br><span class="line">user.delete();</span><br><span class="line"><span class="comment">// DELETE FROM users WHERE user_name = ? and age = ?</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">delete().from(User.class).where(User::getId).deleteById(<span class="number">3</span>);</span><br><span class="line">delete().from(User.class).where(User::getId).eq(<span class="number">1</span>).execute();</span><br><span class="line">delete().from(User.class).where(User::getAge).lte(<span class="number">20</span>).execute();</span><br></pre></td></tr></table></figure><h3 id="Transaction"><a href="#Transaction" class="headerlink" title="Transaction"></a>Transaction</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Anima.atomic(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">new</span> User(<span class="string">"apple"</span>, <span class="number">666</span>).save();</span><br><span class="line">&#125;).catchException(e -&gt; Assert.assertEquals(ArithmeticException.class, e.getClass()));</span><br></pre></td></tr></table></figure><blockquote><p>📗 <code>Anima</code> uses the <code>atomic</code> method to complete a transaction. normally, the code will not throw an exception.<br>when a <code>RuntimeException</code> is caught, the transaction will be <code>rollback</code>.</p></blockquote><h2 id="Test-Code"><a href="#Test-Code" class="headerlink" title="Test Code"></a>Test Code</h2><p>See <a href="https://github.com/biezhi/anima/tree/master/src/test/java/io/github/biezhi/anima" target="_blank" rel="noopener">here</a></p><h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>Apache2</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Anima&quot;&gt;&lt;a href=&quot;#Anima&quot; class=&quot;headerlink&quot; title=&quot;Anima&quot;&gt;&lt;/a&gt;Anima&lt;/h1&gt;&lt;!--
&lt;p align=&quot;center&quot;&gt;
    &lt;a href=&quot;https://github.com/biezhi/anima/wiki&quot;&gt;&lt;img src=&quot;screenshot/cover.png&quot; width=&quot;623&quot;/&gt;&lt;/a&gt;
&lt;/p&gt;
--&gt;
&lt;p&gt;&lt;code&gt;Anima&lt;/code&gt; allows you to query database like &lt;code&gt;SQL&lt;/code&gt; and &lt;code&gt;Stream&lt;/code&gt;.&lt;br&gt;a simple DSL syntax, supports multiple databases, integrates well with Java8,&lt;br&gt;supports multiple relational mappings, and is a database manipulation tool.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/biezhi/anima/wiki&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Document&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/biezhi/anima&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://travis-ci.org/biezhi/anima.svg?branch=master&quot; alt=&quot;Travis Build&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://mvnrepository.com/artifact/io.github.biezhi/anima&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://img.shields.io/maven-central/v/io.github.biezhi/anima.svg&quot; alt&gt;&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="test" scheme="https://herodanny.github.io/categories/test/"/>
    
      <category term="tools" scheme="https://herodanny.github.io/categories/tools/"/>
    
    
      <category term="markdown" scheme="https://herodanny.github.io/tags/markdown/"/>
    
      <category term="test" scheme="https://herodanny.github.io/tags/test/"/>
    
      <category term="java" scheme="https://herodanny.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>my first blog article</title>
    <link href="https://herodanny.github.io/my-first-blog-article.html"/>
    <id>https://herodanny.github.io/my-first-blog-article.html</id>
    <published>2019-04-08T13:14:14.000Z</published>
    <updated>2019-04-16T01:17:15.603Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><ul><li>我的技术小黑屋</li><li>不会写代码的菜鸟</li><li>我要返回火星了</li></ul><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><ol><li>我们都是地球人</li><li>为啥你就不会 markdown?</li><li>看完还不会就要被安排</li></ol><h2 id="链接的写法"><a href="#链接的写法" class="headerlink" title="链接的写法"></a>链接的写法</h2><p><a href="https://herodanny.github.io">我的技术小屋</a></p><h2 id="带-Title"><a href="#带-Title" class="headerlink" title="带 Title"></a>带 Title</h2><p><a href="https://www.github.com/herodanny" title="此处可能有炸弹" target="_blank" rel="noopener">我的技术小屋</a></p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p><img src="https://i.loli.net/2019/04/15/5cb4572ff03d1.jpg" alt></p><h2 id="带-Title-1"><a href="#带-Title-1" class="headerlink" title="带 Title"></a>带 Title</h2><p><img src="&quot;咯咯咯&quot;" alt="alt"></p><h2 id="引用方式"><a href="#引用方式" class="headerlink" title="引用方式"></a>引用方式</h2><p><img src="https://i.loli.net/2019/04/15/5cb4572ff03d1.jpg" alt="alt" title="咯咯咯，会不会markdown"></p><p></p><blockquote><p>世界依旧很大,大到只能胡说。  </p></blockquote><p></p><h3 id="面朝大海，春暖花开"><a href="#面朝大海，春暖花开" class="headerlink" title="面朝大海，春暖花开"></a>面朝大海，春暖花开</h3><blockquote><p>从明天起，做一个幸福的人<br>喂马、劈柴，周游世界<br>从明天起，关心粮食和蔬菜<br>我有一所房子，面朝大海，春暖花开<br>从明天起，和每一个亲人通信<br>告诉他们我的幸福<br>那幸福的闪电告诉我的<br>我将告诉每一个人<br>给每一条河每一座山取一个温暖的名字<br>陌生人，我也为你祝福<br>愿你有一个灿烂的前程<br>愿你有情人终成眷属<br>愿你在尘世获得幸福<br>我只愿面朝大海，春暖花开  </p></blockquote><p><strong>粗体</strong></p><p><strong>粗体</strong></p><p><em>看，我斜了没</em></p><p><em>真的很斜</em></p><p><strong><em>粗体＋斜体</em></strong></p><p><del>此处的故事只能用泪水掩盖</del></p><h1 id="群里单身女生名单"><a href="#群里单身女生名单" class="headerlink" title="群里单身女生名单"></a>群里单身女生名单</h1><table><thead><tr><th>姓名</th><th style="text-align:center">年龄</th><th style="text-align:right">三围</th></tr></thead><tbody><tr><td>罗欲凤</td><td style="text-align:center">18</td><td style="text-align:right">18, 27, 30</td></tr><tr><td>秋刀鱼</td><td style="text-align:center">26</td><td style="text-align:right">28, 25, 33</td></tr><tr><td>窝不行</td><td style="text-align:center">22</td><td style="text-align:right">23, 28, 35</td></tr></tbody></table><p><code>单行代码引用</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">   fmt.Println(<span class="string">"我的技术小屋"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分割线</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一级标题&quot;&gt;&lt;a href=&quot;#一级标题&quot; class=&quot;headerlink&quot; title=&quot;一级标题&quot;&gt;&lt;/a&gt;一级标题&lt;/h1&gt;&lt;h2 id=&quot;二级标题&quot;&gt;&lt;a href=&quot;#二级标题&quot; class=&quot;headerlink&quot; title=&quot;二级标题&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="test" scheme="https://herodanny.github.io/categories/test/"/>
    
      <category term="tools" scheme="https://herodanny.github.io/categories/tools/"/>
    
    
      <category term="markdown" scheme="https://herodanny.github.io/tags/markdown/"/>
    
      <category term="test" scheme="https://herodanny.github.io/tags/test/"/>
    
  </entry>
  
</feed>
